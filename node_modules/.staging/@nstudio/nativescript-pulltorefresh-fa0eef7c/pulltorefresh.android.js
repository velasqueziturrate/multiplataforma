import * as common from './pulltorefresh-common';
export * from './pulltorefresh-common';
const SwipeRefreshLayout_Namespace = useAndroidX()
    ? androidx.swiperefreshlayout.widget
    : android.support.v4.widget;
function useAndroidX() {
    return global.androidx && androidx.swiperefreshlayout;
}
var CarouselFriendlySwipeRefreshLayout = /** @class */ (function (_super) {
    __extends(CarouselFriendlySwipeRefreshLayout, _super);
    function CarouselFriendlySwipeRefreshLayout(context, attrs) {
        var _this = _super.call(this, context, attrs) || this;
        _this._touchSlop = android.view.ViewConfiguration.get(context).getScaledTouchSlop();
        return _this;
    }
    CarouselFriendlySwipeRefreshLayout.prototype.onInterceptTouchEvent = function (event) {
        switch (event.getAction()) {
            case android.view.MotionEvent.ACTION_DOWN: {
                this._previousX = android.view.MotionEvent.obtain(event).getX();
                break;
            }
            case android.view.MotionEvent.ACTION_MOVE: {
                var eventX = event.getX();
                var xDifference = Math.abs(eventX - this._previousX);
                if (xDifference > this._touchSlop) {
                    return false;
                }
                break;
            }
        }
        return _super.prototype.onInterceptTouchEvent.call(this, event);
    };
    return CarouselFriendlySwipeRefreshLayout;
}(SwipeRefreshLayout_Namespace.SwipeRefreshLayout));
export class PullToRefresh extends common.PullToRefreshBase {
    get android() {
        return this.nativeView;
    }
    createNativeView() {
        const swipeRefreshLayout = new CarouselFriendlySwipeRefreshLayout(this._context);
        if (!this._androidViewId) {
            this._androidViewId = android.view.View.generateViewId();
        }
        swipeRefreshLayout.setId(this._androidViewId);
        if (useAndroidX()) {
            const androidXListener = new androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener({
                onRefresh() {
                    const owner = this.owner.get();
                    if (owner) {
                        owner.refreshing = true;
                        owner.notify({
                            eventName: common.PullToRefreshBase.refreshEvent,
                            object: owner
                        });
                    }
                }
            });
            swipeRefreshLayout.setOnRefreshListener(androidXListener);
            swipeRefreshLayout.refreshListener = androidXListener;
        }
        else {
            const supportListener = new android.support
                .v4.widget.SwipeRefreshLayout.OnRefreshListener({
                onRefresh(v) {
                    const owner = this.owner.get();
                    if (owner) {
                        owner.refreshing = true;
                        owner.notify({
                            eventName: common.PullToRefreshBase.refreshEvent,
                            object: owner
                        });
                    }
                }
            });
            swipeRefreshLayout.setOnRefreshListener(supportListener);
            swipeRefreshLayout.refreshListener = supportListener;
        }
        return swipeRefreshLayout;
    }
    initNativeView() {
        super.initNativeView();
        const nativeView = this.nativeView;
        nativeView.refreshListener.owner = new WeakRef(this);
    }
    disposeNativeView() {
        const nativeView = this.nativeView;
        nativeView.refreshListener.owner = null;
        super.disposeNativeView();
    }
    [common.refreshingProperty.getDefault]() {
        return false;
    }
    [common.refreshingProperty.setNative](value) {
        this.nativeView.setRefreshing(value);
    }
    [common.indicatorColorProperty.setNative](value) {
        const color = value ? value.android : this.color;
        this.nativeView.setColorSchemeColors([color]);
    }
    [common.indicatorColorStyleProperty.setNative](value) {
        if (this.indicatorColor) {
            return;
        }
        const color = value ? value.android : this.color;
        this.nativeView.setColorSchemeColors([color]);
    }
    [common.indicatorFillColorProperty.setNative](value) {
        const color = value ? value.android : this.backgroundColor;
        this.nativeView.setProgressBackgroundColorSchemeColor(color);
    }
    [common.indicatorFillColorStyleProperty.setNative](value) {
        if (this.indicatorFillColor) {
            return;
        }
        const color = value ? value.android : this.backgroundColor;
        this.nativeView.setProgressBackgroundColorSchemeColor(color);
    }
}
//# sourceMappingURL=pulltorefresh.android.js.map