var RadSideDrawer_1;
import { Property, ContainerView, booleanConverter, CSSType, Color } from "@nativescript/core";
export const FadeTransitionString = "fadetransition";
export const PushTransitionString = "pushtransition";
export const RevealTransitionString = "revealtransition";
export const ReverseSlideOutTransitionString = "reverseslideouttransition";
export const ScaleDownPusherTransitionString = "scaledownpushertransition";
export const ScaleUpTransitionString = "scaleuptransition";
export const SlideAlongTransitionString = "slidealongtransition";
export const SlideInOnTopTransitionString = "slideinontoptransition";
export var SideDrawerLocation;
(function (SideDrawerLocation) {
    SideDrawerLocation["Left"] = "Left";
    SideDrawerLocation["Right"] = "Right";
    SideDrawerLocation["Top"] = "Top";
    SideDrawerLocation["Bottom"] = "Bottom";
})(SideDrawerLocation || (SideDrawerLocation = {}));
export class DrawerTransitionBase {
    getNativeContent() {
        return undefined;
    }
}
export class DrawerStateChangingEventArgs {
}
export class DrawerStateChangedEventArgs {
}
let RadSideDrawer = RadSideDrawer_1 = class RadSideDrawer extends ContainerView {
    constructor() {
        super(...arguments);
        this.shadowColor = RadSideDrawer_1.shadowColorProperty.defaultValue;
    }
    onGesturesEnabledPropertyChanged(oldValue, newValue) {
        this._onGesturesEnabledChanged(oldValue, newValue);
    }
    onAllowEdgeSwipePropertyChanged(oldValue, newValue) {
        this._onAllowEdgeSwipeChanged(oldValue, newValue);
    }
    onDrawerTransitionChanged(oldValue, newValue) {
        this._onDrawerTransitionChanged(oldValue, newValue);
    }
    onDrawerContentSizeChanged(oldValue, newValue) {
        this._onDrawerContentSizeChanged(oldValue, newValue);
    }
    onDrawerLocationPropertyChanged(oldValue, newValue) {
        this._onDrawerLocationChanged(oldValue, newValue);
    }
    onShadowColorPropertyChanged(oldValue, newValue) {
        this._onShadowColorChanged(oldValue, newValue);
    }
    _onMainContentPropertyChanged(oldValue, newValue) {
        this._onMainContentChanged(oldValue, newValue);
    }
    _onDrawerContentPropertyChanged(oldValue, newValue) {
        this._onDrawerContentChanged(oldValue, newValue);
    }
    _onMainContentChanged(oldValue, newValue) {
        if (oldValue) {
            this._removeView(oldValue);
        }
        if (newValue) {
            this._addView(newValue);
        }
    }
    _onDrawerContentChanged(oldValue, newValue) {
        if (oldValue) {
            this._removeView(oldValue);
        }
        if (newValue) {
            this._addView(newValue);
        }
    }
    _onDrawerLocationChanged(oldValue, newValue) { }
    _onShadowColorChanged(oldValue, newValue) { }
    _onDrawerTransitionChanged(oldValue, newValue) { }
    _onDrawerContentSizeChanged(oldValue, newValue) { }
    _onGesturesEnabledChanged(oldValue, newValue) { }
    _onAllowEdgeSwipeChanged(oldValue, newValue) { }
    showDrawer() {
    }
    closeDrawer() {
    }
    getIsOpen() {
        let androidIsOpen = false;
        let iosIsOpen = false;
        if (this.android) {
            androidIsOpen = this.android.getIsOpen();
        }
        if (this.ios) {
            iosIsOpen = this.ios.defaultSideDrawer.isVisible;
        }
        let result = androidIsOpen || iosIsOpen;
        if (result) {
            return result;
        }
        return false;
    }
    get _isRootView() {
        return this.page ? false : true;
    }
    toggleDrawerState() {
        if (this.getIsOpen()) {
            this.closeDrawer();
        }
        else {
            this.showDrawer();
        }
    }
    get _childrenCount() {
        let count = 0;
        if (this.drawerContent) {
            count++;
        }
        if (this.mainContent) {
            count++;
        }
        return count;
    }
    eachChildView(callback) {
        const mainContent = this.mainContent;
        if (mainContent) {
            callback(mainContent);
        }
        const drawerContent = this.drawerContent;
        if (drawerContent) {
            callback(drawerContent);
        }
    }
};
RadSideDrawer.drawerOpeningEvent = "drawerOpening";
RadSideDrawer.drawerOpenedEvent = "drawerOpened";
RadSideDrawer.drawerClosingEvent = "drawerClosing";
RadSideDrawer.drawerClosedEvent = "drawerClosed";
RadSideDrawer.drawerPanEvent = "drawerPan";
RadSideDrawer.gesturesEnabledProperty = new Property({
    name: "gesturesEnabled",
    defaultValue: true,
    valueConverter: booleanConverter,
    valueChanged: (target, oldValue, newValue) => {
        target.onGesturesEnabledPropertyChanged(oldValue, newValue);
    },
});
RadSideDrawer.allowEdgeSwipeProperty = new Property({
    name: "allowEdgeSwipe",
    defaultValue: true,
    valueConverter: booleanConverter,
    valueChanged: (target, oldValue, newValue) => {
        target.onAllowEdgeSwipePropertyChanged(oldValue, newValue);
    },
});
RadSideDrawer.drawerTransitionProperty = new Property({
    name: "drawerTransition",
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target.onDrawerTransitionChanged(oldValue, newValue);
    },
});
RadSideDrawer.drawerContentSizeProperty = new Property({
    name: "drawerContentSize",
    defaultValue: 280,
    valueConverter: parseInt,
    valueChanged: (target, oldValue, newValue) => {
        target.onDrawerContentSizeChanged(oldValue, newValue);
    },
});
RadSideDrawer.drawerLocationProperty = new Property({
    name: "drawerLocation",
    defaultValue: SideDrawerLocation.Left,
    valueConverter: (value) => SideDrawerLocation[value],
    valueChanged: (target, oldValue, newValue) => {
        target.onDrawerLocationPropertyChanged(oldValue, newValue);
    },
});
RadSideDrawer.shadowColorProperty = new Property({
    name: "shadowColor",
    defaultValue: new Color("#000000"),
    valueConverter: (value) => new Color(value),
    valueChanged: (target, oldValue, newValue) => {
        target.onShadowColorPropertyChanged(oldValue, newValue);
    },
});
RadSideDrawer.mainContentProperty = new Property({
    name: "mainContent",
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target._onMainContentPropertyChanged(oldValue, newValue);
    },
});
RadSideDrawer.drawerContentProperty = new Property({
    name: "drawerContent",
    defaultValue: undefined,
    valueChanged: (target, oldValue, newValue) => {
        target._onDrawerContentPropertyChanged(oldValue, newValue);
    },
});
RadSideDrawer = RadSideDrawer_1 = __decorate([
    CSSType("RadSideDrawer")
], RadSideDrawer);
export { RadSideDrawer };
RadSideDrawer.gesturesEnabledProperty.register(RadSideDrawer);
RadSideDrawer.allowEdgeSwipeProperty.register(RadSideDrawer);
RadSideDrawer.drawerTransitionProperty.register(RadSideDrawer);
RadSideDrawer.drawerContentSizeProperty.register(RadSideDrawer);
RadSideDrawer.drawerLocationProperty.register(RadSideDrawer);
RadSideDrawer.shadowColorProperty.register(RadSideDrawer);
RadSideDrawer.mainContentProperty.register(RadSideDrawer);
RadSideDrawer.drawerContentProperty.register(RadSideDrawer);
//# sourceMappingURL=ui-sidedrawer.common.js.map