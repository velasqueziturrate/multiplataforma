export * from "./ui-sidedrawer.common";
import * as commonModule from "./ui-sidedrawer.common";
import { Utils } from "@nativescript/core";
let SideDrawerChangeListener;
function initializeListeners() {
    if (!SideDrawerChangeListener) {
        var SideDrawerChangeListenerImpl = /** @class */ (function (_super) {
    __extends(SideDrawerChangeListenerImpl, _super);
    function SideDrawerChangeListenerImpl(owner) {
        var _this = _super.call(this) || this;
        _this.owner = owner;
        return global.__native(_this);
    }
    SideDrawerChangeListenerImpl.prototype.onDrawerOpening = function (drawer) {
        if (!this.owner) {
            return false;
        }
        if (this.owner.hasListeners(commonModule.RadSideDrawer.drawerOpeningEvent)) {
            var args = {
                eventName: commonModule.RadSideDrawer.drawerOpeningEvent,
                object: this.owner,
                returnValue: false
            };
            this.owner.notify(args);
            if (args.returnValue) {
                return args.returnValue;
            }
        }
        return false;
    };
    SideDrawerChangeListenerImpl.prototype.onDrawerOpened = function (drawer) {
        if (!this.owner) {
            return;
        }
        if (this.owner.hasListeners(commonModule.RadSideDrawer.drawerOpenedEvent)) {
            var args = {
                eventName: commonModule.RadSideDrawer.drawerOpenedEvent,
                object: this.owner
            };
            this.owner.notify(args);
        }
    };
    SideDrawerChangeListenerImpl.prototype.onDrawerClosing = function (drawer) {
        if (!this.owner) {
            return false;
        }
        if (this.owner.hasListeners(commonModule.RadSideDrawer.drawerClosingEvent)) {
            var args = {
                eventName: commonModule.RadSideDrawer.drawerClosingEvent,
                object: this.owner,
                returnValue: false
            };
            this.owner.notify(args);
            if (args.returnValue) {
                return args.returnValue;
            }
        }
        return false;
    };
    SideDrawerChangeListenerImpl.prototype.onDrawerClosed = function (drawer) {
        if (!this.owner) {
            return;
        }
        if (this.owner.hasListeners(commonModule.RadSideDrawer.drawerClosedEvent)) {
            var args = {
                eventName: commonModule.RadSideDrawer.drawerClosedEvent,
                object: this.owner
            };
            this.owner.notify(args);
        }
    };
    SideDrawerChangeListenerImpl.prototype.onDrawerPan = function (drawer) {
        if (!this.owner) {
            return;
        }
        if (this.owner.hasListeners(commonModule.RadSideDrawer.drawerPanEvent)) {
            var args = {
                eventName: commonModule.RadSideDrawer.drawerPanEvent,
                object: this.owner
            };
            this.owner.notify(args);
        }
    };
    SideDrawerChangeListenerImpl = __decorate([
        Interfaces([com.telerik.android.primitives.widget.sidedrawer.DrawerChangeListener])
    ], SideDrawerChangeListenerImpl);
    return SideDrawerChangeListenerImpl;
}(java.lang.Object));
        SideDrawerChangeListener = SideDrawerChangeListenerImpl;
    }
}
export class RadSideDrawer extends commonModule.RadSideDrawer {
    constructor() {
        super(...arguments);
        this._androidViewId = -1;
    }
    get _nativeView() {
        return this._android;
    }
    get _page() {
        let page;
        if (this.page) {
            page = this.page;
        }
        else {
            page = this.mainContent.nativeView;
        }
        return page;
    }
    onUnloaded() {
        super.onUnloaded();
        if (this._mainContentNativeView) {
            let lp = this._mainContentNativeView.getLayoutParams();
            lp.topMargin = 0;
            this._mainContentNativeView.setLayoutParams(lp);
        }
        if (this._page && this._page.actionBar) {
            this._page.actionBar.nativeView.removeOnLayoutChangeListener(this.layoutChangeFunction);
        }
    }
    onBackPressed() {
        const currentView = this.mainContent;
        if (currentView && this._isRootView) {
            return currentView.onBackPressed();
        }
        return false;
    }
    _addViewToNativeVisualTree(child) {
        if (this._android && child.android) {
            if (this.mainContent === child) {
                this._android.setMainContent(child.nativeView);
                return true;
            }
            if (this.drawerContent === child) {
                this._android.setDrawerContent(child.nativeView);
                return true;
            }
        }
        return false;
    }
    _removeViewFromNativeVisualTree(child) {
        if (this._android && child.android) {
            // TODO: Remove listener
            if (this.mainContent === child) {
                this._android.setMainContent(null);
                child._isAddedToNativeVisualTree = false;
            }
            if (this.drawerContent === child) {
                this._android.setDrawerContent(null);
                child._isAddedToNativeVisualTree = false;
            }
        }
    }
    initDrawer() {
        initializeListeners();
        this._android = new com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer(this._context);
        this._android._drawerChangeListener = new SideDrawerChangeListener(this);
        this._android.addChangeListener(this._android._drawerChangeListener);
    }
    createNativeView() {
        if (this._page) {
            this._page.on("navigatingFrom", this.onNavigatingFrom, this);
        }
        this.initDrawer();
        this._android.setDrawerSize(Utils.layout.getDisplayDensity() * this.drawerContentSize);
        this._android.setIsLocked(!this.gesturesEnabled);
        this._android.setAllowEdgeSwipe(this.allowEdgeSwipe);
        if (this.drawerTransition) {
            this._android.setDrawerTransition(this.drawerTransition.getNativeContent());
        }
        if (this.drawerLocation) {
            this.setDrawerLocation(this.drawerLocation);
        }
        return this._android;
    }
    initNativeView() {
        super.initNativeView();
        if (this._androidViewId < 0) {
            this._androidViewId = android.view.View.generateViewId();
        }
        this._nativeView.setId(this._androidViewId);
    }
    disposeNativeView() {
        if (this._page) {
            this._page.off("navigatingFrom", this.onNavigatingFrom, this);
        }
        if (this._android._drawerChangeListener) {
            this._android._drawerChangeListener.owner = null;
        }
    }
    onNavigatingFrom(args) {
        if (this.getIsOpen()) {
            this.closeDrawer();
        }
    }
    get android() {
        return this._android;
    }
    _onGesturesEnabledChanged(oldValue, newValue) {
        let value = newValue;
        if (!this.android) {
            return;
        }
        this.android.setIsLocked(!value);
    }
    _onAllowEdgeSwipeChanged(oldValue, newValue) {
        let value = newValue;
        if (!this.android) {
            return;
        }
        this.android.setAllowEdgeSwipe(value);
    }
    _onDrawerContentSizeChanged(oldValue, newValue) {
        if (!this.android) {
            return;
        }
        if (newValue) {
            this.android.setDrawerSize(Utils.layout.getDisplayDensity() * newValue);
        }
    }
    _onDrawerTransitionChanged(oldValue, newValue) {
        if (!newValue) {
            return;
        }
        let finalVal;
        if (typeof newValue === "string") {
            switch (newValue.toLowerCase()) {
                case commonModule.FadeTransitionString: {
                    finalVal = new FadeTransition();
                    break;
                }
                case commonModule.PushTransitionString: {
                    finalVal = new PushTransition();
                    break;
                }
                case commonModule.RevealTransitionString: {
                    finalVal = new RevealTransition();
                    break;
                }
                case commonModule.ReverseSlideOutTransitionString: {
                    finalVal = new ReverseSlideOutTransition();
                    break;
                }
                case commonModule.ScaleDownPusherTransitionString: {
                    finalVal = new ScaleDownPusherTransition();
                    break;
                }
                case commonModule.ScaleUpTransitionString: {
                    finalVal = new ScaleUpTransition();
                    break;
                }
                case commonModule.SlideAlongTransitionString: {
                    finalVal = new SlideAlongTransition();
                    break;
                }
                case commonModule.SlideInOnTopTransitionString: {
                    finalVal = new SlideInOnTopTransition();
                    break;
                }
                default: {
                    console.log("Error: Not supported value (" + newValue + ") set to 'drawerTransition'");
                    finalVal = new SlideInOnTopTransition();
                    break;
                }
            }
            if (this.drawerTransition !== finalVal) {
                this.drawerTransition = finalVal;
                return;
            }
        }
        else {
            finalVal = newValue;
        }
        if (this.android) {
            this.android.setDrawerTransition(finalVal.getNativeContent());
        }
    }
    _onShadowColorChanged(oldValue, newValue) {
        if (!this.android) {
            return;
        }
        const nativeColor = newValue ? newValue.android : RadSideDrawer.shadowColorProperty.defaultValue.android;
        this.android.resolveFadeLayer().view().setBackgroundColor(nativeColor);
    }
    _onDrawerLocationChanged(oldValue, newValue) {
        super._onDrawerLocationChanged(oldValue, newValue);
        if (!this.android) {
            return;
        }
        if (!newValue) {
            return;
        }
        this.setDrawerLocation(newValue);
    }
    setDrawerLocation(newLocation) {
        switch (newLocation) {
            case commonModule.SideDrawerLocation.Left:
                this.android.setDrawerLocation(com.telerik.android.primitives.widget.sidedrawer.DrawerLocation.LEFT);
                break;
            case commonModule.SideDrawerLocation.Right:
                this.android.setDrawerLocation(com.telerik.android.primitives.widget.sidedrawer.DrawerLocation.RIGHT);
                break;
            case commonModule.SideDrawerLocation.Top:
                this.android.setDrawerLocation(com.telerik.android.primitives.widget.sidedrawer.DrawerLocation.TOP);
                break;
            case commonModule.SideDrawerLocation.Bottom:
                this.android.setDrawerLocation(com.telerik.android.primitives.widget.sidedrawer.DrawerLocation.BOTTOM);
                break;
        }
    }
    closeDrawer() {
        if (this.android) {
            this.android.setIsOpen(false);
            super.closeDrawer();
        }
    }
    showDrawer() {
        if (this._android) {
            this._android.setIsOpen(true);
            super.showDrawer();
        }
    }
}
export class DrawerTransitionBase {
    getNativeContent() {
        return undefined;
    }
}
export class FadeTransition extends DrawerTransitionBase {
    getNativeContent() {
        return new com.telerik.android.primitives.widget.sidedrawer.transitions.FadeTransition();
    }
}
export class PushTransition extends DrawerTransitionBase {
    getNativeContent() {
        return new com.telerik.android.primitives.widget.sidedrawer.transitions.PushTransition();
    }
}
export class RevealTransition extends DrawerTransitionBase {
    getNativeContent() {
        return new com.telerik.android.primitives.widget.sidedrawer.transitions.RevealTransition();
    }
}
export class ReverseSlideOutTransition extends DrawerTransitionBase {
    getNativeContent() {
        return new com.telerik.android.primitives.widget.sidedrawer.transitions.ReverseSlideOutTransition();
    }
}
export class ScaleDownPusherTransition extends DrawerTransitionBase {
    getNativeContent() {
        return new com.telerik.android.primitives.widget.sidedrawer.transitions.ScaleDownPusherTransition();
    }
}
export class ScaleUpTransition extends DrawerTransitionBase {
    getNativeContent() {
        return new com.telerik.android.primitives.widget.sidedrawer.transitions.ScaleUpTransition();
    }
}
export class SlideAlongTransition extends DrawerTransitionBase {
    getNativeContent() {
        return new com.telerik.android.primitives.widget.sidedrawer.transitions.SlideAlongTransition();
    }
}
export class SlideInOnTopTransition extends DrawerTransitionBase {
    getNativeContent() {
        return new com.telerik.android.primitives.widget.sidedrawer.transitions.SlideInOnTopTransition();
    }
}
//# sourceMappingURL=ui-sidedrawer.android.js.map