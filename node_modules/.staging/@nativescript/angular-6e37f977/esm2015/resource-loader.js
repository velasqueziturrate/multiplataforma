import { Injectable } from '@angular/core';
import { ResourceLoader } from '@angular/compiler';
import { path } from '@nativescript/core';
import { NSFileSystem } from './file-system/ns-file-system';
const sourceExtensionsMap = {
    '.scss': '.css',
    '.sass': '.css',
    '.less': '.css',
};
export class FileSystemResourceLoader extends ResourceLoader {
    constructor(fs) {
        super();
        this.fs = fs;
    }
    get(url) {
        const resolvedPath = this.resolve(url);
        const templateFile = this.fs.fileFromPath(resolvedPath);
        return templateFile.readTextSync();
    }
    resolve(url) {
        const normalizedSourceUrl = this.resolveRelativeUrls(url);
        const normalizedCompiledFileUrl = normalizedSourceUrl.replace(/\.\w+$/, (ext) => sourceExtensionsMap[ext] || ext);
        if (normalizedCompiledFileUrl !== normalizedSourceUrl && this.fs.fileExists(normalizedCompiledFileUrl)) {
            return normalizedCompiledFileUrl;
        }
        if (this.fs.fileExists(normalizedSourceUrl)) {
            return normalizedSourceUrl;
        }
        if (normalizedCompiledFileUrl === normalizedSourceUrl) {
            throw new Error(`Could not resolve ${url}. Looked for: ${normalizedSourceUrl}.`);
        }
        else {
            throw new Error(`Could not resolve ${url}.` + `Looked for: ${normalizedCompiledFileUrl}, ${normalizedSourceUrl}.`);
        }
    }
    resolveRelativeUrls(url) {
        // Angular assembles absolute URLs and prefixes them with //
        if (url.indexOf('/') !== 0) {
            // Resolve relative URLs based on the app root.
            return path.join(this.fs.currentApp().path, url);
        }
        else {
            return url;
        }
    }
}
FileSystemResourceLoader.decorators = [
    { type: Injectable }
];
FileSystemResourceLoader.ctorParameters = () => [
    { type: NSFileSystem }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2UtbG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vcmVzb3VyY2UtbG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUUxQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFNUQsTUFBTSxtQkFBbUIsR0FBRztJQUMzQixPQUFPLEVBQUUsTUFBTTtJQUNmLE9BQU8sRUFBRSxNQUFNO0lBQ2YsT0FBTyxFQUFFLE1BQU07Q0FDZixDQUFDO0FBR0YsTUFBTSxPQUFPLHdCQUF5QixTQUFRLGNBQWM7SUFDM0QsWUFBb0IsRUFBZ0I7UUFDbkMsS0FBSyxFQUFFLENBQUM7UUFEVyxPQUFFLEdBQUYsRUFBRSxDQUFjO0lBRXBDLENBQUM7SUFFRCxHQUFHLENBQUMsR0FBVztRQUNkLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFdkMsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFeEQsT0FBTyxZQUFZLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUVELE9BQU8sQ0FBQyxHQUFXO1FBQ2xCLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFELE1BQU0seUJBQXlCLEdBQUcsbUJBQW1CLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7UUFDbEgsSUFBSSx5QkFBeUIsS0FBSyxtQkFBbUIsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFO1lBQ3ZHLE9BQU8seUJBQXlCLENBQUM7U0FDakM7UUFDRCxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLEVBQUU7WUFDNUMsT0FBTyxtQkFBbUIsQ0FBQztTQUMzQjtRQUVELElBQUkseUJBQXlCLEtBQUssbUJBQW1CLEVBQUU7WUFDdEQsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsR0FBRyxpQkFBaUIsbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO1NBQ2pGO2FBQU07WUFDTixNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxlQUFlLHlCQUF5QixLQUFLLG1CQUFtQixHQUFHLENBQUMsQ0FBQztTQUNuSDtJQUNGLENBQUM7SUFFTyxtQkFBbUIsQ0FBQyxHQUFXO1FBQ3RDLDREQUE0RDtRQUM1RCxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzNCLCtDQUErQztZQUMvQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDakQ7YUFBTTtZQUNOLE9BQU8sR0FBRyxDQUFDO1NBQ1g7SUFDRixDQUFDOzs7WUF2Q0QsVUFBVTs7O1lBUkYsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJlc291cmNlTG9hZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tcGlsZXInO1xuaW1wb3J0IHsgcGF0aCB9IGZyb20gJ0BuYXRpdmVzY3JpcHQvY29yZSc7XG5cbmltcG9ydCB7IE5TRmlsZVN5c3RlbSB9IGZyb20gJy4vZmlsZS1zeXN0ZW0vbnMtZmlsZS1zeXN0ZW0nO1xuXG5jb25zdCBzb3VyY2VFeHRlbnNpb25zTWFwID0ge1xuXHQnLnNjc3MnOiAnLmNzcycsXG5cdCcuc2Fzcyc6ICcuY3NzJyxcblx0Jy5sZXNzJzogJy5jc3MnLFxufTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEZpbGVTeXN0ZW1SZXNvdXJjZUxvYWRlciBleHRlbmRzIFJlc291cmNlTG9hZGVyIHtcblx0Y29uc3RydWN0b3IocHJpdmF0ZSBmczogTlNGaWxlU3lzdGVtKSB7XG5cdFx0c3VwZXIoKTtcblx0fVxuXG5cdGdldCh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG5cdFx0Y29uc3QgcmVzb2x2ZWRQYXRoID0gdGhpcy5yZXNvbHZlKHVybCk7XG5cblx0XHRjb25zdCB0ZW1wbGF0ZUZpbGUgPSB0aGlzLmZzLmZpbGVGcm9tUGF0aChyZXNvbHZlZFBhdGgpO1xuXG5cdFx0cmV0dXJuIHRlbXBsYXRlRmlsZS5yZWFkVGV4dFN5bmMoKTtcblx0fVxuXG5cdHJlc29sdmUodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuXHRcdGNvbnN0IG5vcm1hbGl6ZWRTb3VyY2VVcmwgPSB0aGlzLnJlc29sdmVSZWxhdGl2ZVVybHModXJsKTtcblx0XHRjb25zdCBub3JtYWxpemVkQ29tcGlsZWRGaWxlVXJsID0gbm9ybWFsaXplZFNvdXJjZVVybC5yZXBsYWNlKC9cXC5cXHcrJC8sIChleHQpID0+IHNvdXJjZUV4dGVuc2lvbnNNYXBbZXh0XSB8fCBleHQpO1xuXHRcdGlmIChub3JtYWxpemVkQ29tcGlsZWRGaWxlVXJsICE9PSBub3JtYWxpemVkU291cmNlVXJsICYmIHRoaXMuZnMuZmlsZUV4aXN0cyhub3JtYWxpemVkQ29tcGlsZWRGaWxlVXJsKSkge1xuXHRcdFx0cmV0dXJuIG5vcm1hbGl6ZWRDb21waWxlZEZpbGVVcmw7XG5cdFx0fVxuXHRcdGlmICh0aGlzLmZzLmZpbGVFeGlzdHMobm9ybWFsaXplZFNvdXJjZVVybCkpIHtcblx0XHRcdHJldHVybiBub3JtYWxpemVkU291cmNlVXJsO1xuXHRcdH1cblxuXHRcdGlmIChub3JtYWxpemVkQ29tcGlsZWRGaWxlVXJsID09PSBub3JtYWxpemVkU291cmNlVXJsKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCByZXNvbHZlICR7dXJsfS4gTG9va2VkIGZvcjogJHtub3JtYWxpemVkU291cmNlVXJsfS5gKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgcmVzb2x2ZSAke3VybH0uYCArIGBMb29rZWQgZm9yOiAke25vcm1hbGl6ZWRDb21waWxlZEZpbGVVcmx9LCAke25vcm1hbGl6ZWRTb3VyY2VVcmx9LmApO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgcmVzb2x2ZVJlbGF0aXZlVXJscyh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG5cdFx0Ly8gQW5ndWxhciBhc3NlbWJsZXMgYWJzb2x1dGUgVVJMcyBhbmQgcHJlZml4ZXMgdGhlbSB3aXRoIC8vXG5cdFx0aWYgKHVybC5pbmRleE9mKCcvJykgIT09IDApIHtcblx0XHRcdC8vIFJlc29sdmUgcmVsYXRpdmUgVVJMcyBiYXNlZCBvbiB0aGUgYXBwIHJvb3QuXG5cdFx0XHRyZXR1cm4gcGF0aC5qb2luKHRoaXMuZnMuY3VycmVudEFwcCgpLnBhdGgsIHVybCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB1cmw7XG5cdFx0fVxuXHR9XG59XG4iXX0=