import { unsetValue, ContentView, LayoutBase, platformNames } from '@nativescript/core';
import { CommentNode, TextNode, getViewClass, getViewMeta, isDetachedElement, isInvisibleNode, isKnownView, isView } from './element-registry';
import { NativeScriptDebug } from './trace';
const ELEMENT_NODE_TYPE = 1;
const XML_ATTRIBUTES = Object.freeze(['style', 'rows', 'columns', 'fontAttributes']);
const whiteSpaceSplitter = /\s+/;
export function isLayout(view) {
    return view instanceof LayoutBase;
}
export function isContentView(view) {
    return view instanceof ContentView;
}
const propertyMaps = new Map();
export class ViewUtil {
    constructor(device) {
        this.isIos = device.os === platformNames.ios;
        this.isAndroid = device.os === platformNames.android;
    }
    insertChild(parent, child, previous, next) {
        if (!parent) {
            return;
        }
        const extendedParent = this.ensureNgViewExtensions(parent);
        const extendedChild = this.ensureNgViewExtensions(child);
        if (!previous) {
            previous = extendedParent.lastChild;
        }
        this.addToQueue(extendedParent, extendedChild, previous, next);
        if (isInvisibleNode(child)) {
            extendedChild.parentNode = extendedParent;
        }
        if (!isDetachedElement(child)) {
            const nextVisual = this.findNextVisual(next);
            this.addToVisualTree(extendedParent, extendedChild, nextVisual);
        }
    }
    addToQueue(parent, child, previous, next) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.viewUtilLog(`ViewUtil.addToQueue parent: ${parent}, view: ${child}, ` + `previous: ${previous}, next: ${next}`);
        }
        if (previous) {
            previous.nextSibling = child;
        }
        else {
            parent.firstChild = child;
        }
        if (next) {
            child.nextSibling = next;
        }
        else {
            this.appendToQueue(parent, child);
        }
    }
    appendToQueue(parent, view) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.viewUtilLog(`ViewUtil.appendToQueue parent: ${parent} view: ${view}`);
        }
        if (parent.lastChild) {
            parent.lastChild.nextSibling = view;
        }
        parent.lastChild = view;
    }
    addToVisualTree(parent, child, next) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.viewUtilLog(`ViewUtil.addToVisualTree parent: ${parent}, view: ${child}, next: ${next}`);
        }
        if (parent.meta && parent.meta.insertChild) {
            parent.meta.insertChild(parent, child, next);
        }
        else if (isLayout(parent)) {
            this.insertToLayout(parent, child, next);
        }
        else if (isContentView(parent)) {
            parent.content = child;
        }
        else if (parent && parent._addChildFromBuilder) {
            parent._addChildFromBuilder(child.nodeName, child);
        }
    }
    insertToLayout(parent, child, next) {
        if (child.parent === parent) {
            this.removeLayoutChild(parent, child);
        }
        const nextVisual = this.findNextVisual(next);
        if (nextVisual) {
            const index = parent.getChildIndex(nextVisual);
            parent.insertChild(child, index);
        }
        else {
            parent.addChild(child);
        }
    }
    findNextVisual(view) {
        let next = view;
        while (next && isDetachedElement(next)) {
            next = next.nextSibling;
        }
        return next;
    }
    removeChild(parent, child) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.viewUtilLog(`ViewUtil.removeChild parent: ${parent} child: ${child}`);
        }
        if (!parent) {
            return;
        }
        const extendedParent = this.ensureNgViewExtensions(parent);
        const extendedChild = this.ensureNgViewExtensions(child);
        this.removeFromQueue(extendedParent, extendedChild);
        if (!isDetachedElement(extendedChild)) {
            this.removeFromVisualTree(extendedParent, extendedChild);
        }
    }
    removeFromQueue(parent, child) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.viewUtilLog(`ViewUtil.removeFromQueue parent: ${parent} child: ${child}`);
        }
        if (parent.firstChild === child && parent.lastChild === child) {
            parent.firstChild = null;
            parent.lastChild = null;
            child.nextSibling = null;
            return;
        }
        if (parent.firstChild === child) {
            parent.firstChild = child.nextSibling;
        }
        const previous = this.findPreviousElement(parent, child);
        if (parent.lastChild === child) {
            parent.lastChild = previous;
        }
        if (previous) {
            previous.nextSibling = child.nextSibling;
        }
        child.nextSibling = null;
    }
    // NOTE: This one is O(n) - use carefully
    findPreviousElement(parent, child) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.viewUtilLog(`ViewUtil.findPreviousElement parent: ${parent} child: ${child}`);
        }
        let previousVisual;
        if (isLayout(parent)) {
            previousVisual = this.getPreviousVisualElement(parent, child);
        }
        let previous = previousVisual || parent.firstChild;
        // since detached elements are not added to the visual tree,
        // we need to find the actual previous sibling of the view,
        // which may as well be an invisible node
        while (previous && previous !== child && previous.nextSibling !== child) {
            previous = previous.nextSibling;
        }
        return previous;
    }
    getPreviousVisualElement(parent, child) {
        const elementIndex = parent.getChildIndex(child);
        if (elementIndex > 0) {
            return parent.getChildAt(elementIndex - 1);
        }
    }
    // NOTE: This one is O(n) - use carefully
    getChildIndex(parent, child) {
        if (isLayout(parent)) {
            return parent.getChildIndex(child);
        }
        else if (isContentView(parent)) {
            return child === parent.content ? 0 : -1;
        }
    }
    removeFromVisualTree(parent, child) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.viewUtilLog(`ViewUtil.removeFromVisualTree parent: ${parent} child: ${child}`);
        }
        if (parent.meta && parent.meta.removeChild) {
            parent.meta.removeChild(parent, child);
        }
        else if (isLayout(parent)) {
            this.removeLayoutChild(parent, child);
        }
        else if (isContentView(parent) && parent.content === child) {
            parent.content = null;
        }
        else if (isView(parent)) {
            parent._removeView(child);
        }
    }
    removeLayoutChild(parent, child) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.viewUtilLog(`ViewUtil.removeLayoutChild parent: ${parent} child: ${child}`);
        }
        const index = parent.getChildIndex(child);
        if (index !== -1) {
            parent.removeChild(child);
        }
    }
    createComment() {
        return new CommentNode();
    }
    createText() {
        return new TextNode();
    }
    createView(name) {
        const originalName = name;
        if (!isKnownView(name)) {
            name = 'ProxyViewContainer';
        }
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.viewUtilLog(`Creating view: ${originalName} ${name}`);
        }
        const viewClass = getViewClass(name);
        const view = new viewClass();
        const ngView = this.setNgViewExtensions(view, name);
        return ngView;
    }
    ensureNgViewExtensions(view) {
        if (view.hasOwnProperty('meta')) {
            return view;
        }
        else {
            const name = view.cssType;
            const ngView = this.setNgViewExtensions(view, name);
            return ngView;
        }
    }
    setNgViewExtensions(view, name) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.viewUtilLog(`Make into a NgView view: ${view} name: "${name}"`);
        }
        const ngView = view;
        ngView.nodeName = name;
        ngView.meta = getViewMeta(name);
        // we're setting the node type of the view
        // to 'element' because of checks done in the
        // dom animation engine
        ngView.nodeType = ELEMENT_NODE_TYPE;
        return ngView;
    }
    setProperty(view, attributeName, value, namespace) {
        if (!view || (namespace && !this.runsIn(namespace))) {
            return;
        }
        if (attributeName.indexOf('.') !== -1) {
            // Handle nested properties
            const properties = attributeName.split('.');
            attributeName = properties[properties.length - 1];
            let propMap = this.getProperties(view);
            let i = 0;
            while (i < properties.length - 1 && typeof view !== 'undefined') {
                let prop = properties[i];
                if (propMap.has(prop)) {
                    prop = propMap.get(prop);
                }
                view = view[prop];
                propMap = this.getProperties(view);
                i++;
            }
        }
        if (typeof view !== 'undefined') {
            this.setPropertyInternal(view, attributeName, value);
        }
    }
    runsIn(platform) {
        return (platform === 'ios' && this.isIos) || (platform === 'android' && this.isAndroid);
    }
    setPropertyInternal(view, attributeName, value) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.viewUtilLog(`Setting attribute: ${attributeName}=${value} to ${view}`);
        }
        if (attributeName === 'class') {
            this.setClasses(view, value);
            return;
        }
        if (XML_ATTRIBUTES.indexOf(attributeName) !== -1) {
            view[attributeName] = value;
            return;
        }
        const propMap = this.getProperties(view);
        const propertyName = propMap.get(attributeName);
        // Ensure the children of a collection currently have no parent set.
        if (Array.isArray(value)) {
            this.removeParentReferencesFromItems(value);
        }
        if (propertyName) {
            // We have a lower-upper case mapped property.
            view[propertyName] = value;
            return;
        }
        // Unknown attribute value -- just set it to our object as is.
        view[attributeName] = value;
    }
    removeParentReferencesFromItems(items) {
        for (const item of items) {
            if (item.parent && item.parentNode) {
                if (NativeScriptDebug.isLogEnabled()) {
                    NativeScriptDebug.viewUtilLog(`Unassigning parent ${item.parentNode} on value: ${item}`);
                }
                item.parent = undefined;
                item.parentNode = undefined;
            }
        }
    }
    getProperties(instance) {
        const type = instance && instance.constructor;
        if (!type) {
            return new Map();
        }
        if (!propertyMaps.has(type)) {
            let propMap = new Map();
            for (let propName in instance) {
                // tslint:disable:forin
                propMap.set(propName.toLowerCase(), propName);
            }
            propertyMaps.set(type, propMap);
        }
        return propertyMaps.get(type);
    }
    cssClasses(view) {
        if (!view.ngCssClasses) {
            view.ngCssClasses = new Map();
        }
        return view.ngCssClasses;
    }
    addClass(view, className) {
        this.cssClasses(view).set(className, true);
        this.syncClasses(view);
    }
    removeClass(view, className) {
        this.cssClasses(view).delete(className);
        this.syncClasses(view);
    }
    setClasses(view, classesValue) {
        let classes = classesValue.split(whiteSpaceSplitter);
        this.cssClasses(view).clear();
        classes.forEach((className) => this.cssClasses(view).set(className, true));
        this.syncClasses(view);
    }
    syncClasses(view) {
        let classValue = Array.from(this.cssClasses(view).keys()).join(' ');
        view.className = classValue;
    }
    setStyle(view, styleName, value) {
        view.style[styleName] = value;
    }
    removeStyle(view, styleName) {
        view.style[styleName] = unsetValue;
    }
}
//# sourceMappingURL=data:application/json;base64,