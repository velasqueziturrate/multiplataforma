import { Directive, ElementRef, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BaseValueAccessor } from './base-value-accessor';
const TEXT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => TextValueAccessor),
    multi: true,
};
/**
 * The accessor for writing a text and listening to changes that is used by the
 * {@link NgModel} directives.
 *
 *  ### Example
 *  ```
 *  <TextField [(ngModel)]="model.test">
 *  ```
 */
export class TextValueAccessor extends BaseValueAccessor {
    // tslint:disable-line:directive-class-suffix
    constructor(elementRef) {
        super(elementRef.nativeElement);
    }
    writeValue(value) {
        const normalized = super.normalizeValue(value);
        this.view.text = normalized;
    }
}
TextValueAccessor.decorators = [
    { type: Directive, args: [{
                selector: 'TextField[ngModel],TextField[formControlName],TextField[formControl],' +
                    'textField[ngModel],textField[formControlName],textField[formControl],' +
                    'textfield[ngModel],textfield[formControlName],textfield[formControl],' +
                    'text-field[ngModel],text-field[formControlName],text-field[formControl],' +
                    'TextView[ngModel],TextView[formControlName],TextView[formControl],' +
                    'textView[ngModel],textView[formControlName],textView[formControl],' +
                    'textview[ngModel],textview[formControlName],textview[formControl],' +
                    'text-view[ngModel],text-view[formControlName],text-view[formControl],' +
                    'SearchBar[ngModel],SearchBar[formControlName],SearchBar[formControl],' +
                    'searchBar[ngModel],searchBar[formControlName],searchBar[formControl],' +
                    'searchbar[ngModel],searchbar[formControlName],searchbar[formControl],' +
                    'search-bar[ngModel], search-bar[formControlName],search-bar[formControl]',
                providers: [TEXT_VALUE_ACCESSOR],
                host: {
                    '(blur)': 'onTouched()',
                    '(textChange)': 'onChange($event.value)',
                },
            },] }
];
TextValueAccessor.ctorParameters = () => [
    { type: ElementRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC12YWx1ZS1hY2Nlc3Nvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2Zvcm1zL3ZhbHVlLWFjY2Vzc29ycy90ZXh0LXZhbHVlLWFjY2Vzc29yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVuRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUUxRCxNQUFNLG1CQUFtQixHQUFHO0lBQzNCLE9BQU8sRUFBRSxpQkFBaUI7SUFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztJQUNoRCxLQUFLLEVBQUUsSUFBSTtDQUNYLENBQUM7QUFJRjs7Ozs7Ozs7R0FRRztBQXFCSCxNQUFNLE9BQU8saUJBQWtCLFNBQVEsaUJBQTJCO0lBQ2pFLDZDQUE2QztJQUM3QyxZQUFZLFVBQXNCO1FBQ2pDLEtBQUssQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUFVO1FBQ3BCLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDO0lBQzdCLENBQUM7OztZQTdCRCxTQUFTLFNBQUM7Z0JBQ1YsUUFBUSxFQUNQLHVFQUF1RTtvQkFDdkUsdUVBQXVFO29CQUN2RSx1RUFBdUU7b0JBQ3ZFLDBFQUEwRTtvQkFDMUUsb0VBQW9FO29CQUNwRSxvRUFBb0U7b0JBQ3BFLG9FQUFvRTtvQkFDcEUsdUVBQXVFO29CQUN2RSx1RUFBdUU7b0JBQ3ZFLHVFQUF1RTtvQkFDdkUsdUVBQXVFO29CQUN2RSwwRUFBMEU7Z0JBQzNFLFNBQVMsRUFBRSxDQUFDLG1CQUFtQixDQUFDO2dCQUNoQyxJQUFJLEVBQUU7b0JBQ0wsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLGNBQWMsRUFBRSx3QkFBd0I7aUJBQ3hDO2FBQ0Q7OztZQXpDbUIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgZm9yd2FyZFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSAnQG5hdGl2ZXNjcmlwdC9jb3JlJztcbmltcG9ydCB7IEJhc2VWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnLi9iYXNlLXZhbHVlLWFjY2Vzc29yJztcblxuY29uc3QgVEVYVF9WQUxVRV9BQ0NFU1NPUiA9IHtcblx0cHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG5cdHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFRleHRWYWx1ZUFjY2Vzc29yKSxcblx0bXVsdGk6IHRydWUsXG59O1xuXG5leHBvcnQgdHlwZSBUZXh0VmlldyA9IHsgdGV4dDogc3RyaW5nIH0gJiBWaWV3O1xuXG4vKipcbiAqIFRoZSBhY2Nlc3NvciBmb3Igd3JpdGluZyBhIHRleHQgYW5kIGxpc3RlbmluZyB0byBjaGFuZ2VzIHRoYXQgaXMgdXNlZCBieSB0aGVcbiAqIHtAbGluayBOZ01vZGVsfSBkaXJlY3RpdmVzLlxuICpcbiAqICAjIyMgRXhhbXBsZVxuICogIGBgYFxuICogIDxUZXh0RmllbGQgWyhuZ01vZGVsKV09XCJtb2RlbC50ZXN0XCI+XG4gKiAgYGBgXG4gKi9cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3Rvcjpcblx0XHQnVGV4dEZpZWxkW25nTW9kZWxdLFRleHRGaWVsZFtmb3JtQ29udHJvbE5hbWVdLFRleHRGaWVsZFtmb3JtQ29udHJvbF0sJyArXG5cdFx0J3RleHRGaWVsZFtuZ01vZGVsXSx0ZXh0RmllbGRbZm9ybUNvbnRyb2xOYW1lXSx0ZXh0RmllbGRbZm9ybUNvbnRyb2xdLCcgK1xuXHRcdCd0ZXh0ZmllbGRbbmdNb2RlbF0sdGV4dGZpZWxkW2Zvcm1Db250cm9sTmFtZV0sdGV4dGZpZWxkW2Zvcm1Db250cm9sXSwnICtcblx0XHQndGV4dC1maWVsZFtuZ01vZGVsXSx0ZXh0LWZpZWxkW2Zvcm1Db250cm9sTmFtZV0sdGV4dC1maWVsZFtmb3JtQ29udHJvbF0sJyArXG5cdFx0J1RleHRWaWV3W25nTW9kZWxdLFRleHRWaWV3W2Zvcm1Db250cm9sTmFtZV0sVGV4dFZpZXdbZm9ybUNvbnRyb2xdLCcgK1xuXHRcdCd0ZXh0Vmlld1tuZ01vZGVsXSx0ZXh0Vmlld1tmb3JtQ29udHJvbE5hbWVdLHRleHRWaWV3W2Zvcm1Db250cm9sXSwnICtcblx0XHQndGV4dHZpZXdbbmdNb2RlbF0sdGV4dHZpZXdbZm9ybUNvbnRyb2xOYW1lXSx0ZXh0dmlld1tmb3JtQ29udHJvbF0sJyArXG5cdFx0J3RleHQtdmlld1tuZ01vZGVsXSx0ZXh0LXZpZXdbZm9ybUNvbnRyb2xOYW1lXSx0ZXh0LXZpZXdbZm9ybUNvbnRyb2xdLCcgK1xuXHRcdCdTZWFyY2hCYXJbbmdNb2RlbF0sU2VhcmNoQmFyW2Zvcm1Db250cm9sTmFtZV0sU2VhcmNoQmFyW2Zvcm1Db250cm9sXSwnICtcblx0XHQnc2VhcmNoQmFyW25nTW9kZWxdLHNlYXJjaEJhcltmb3JtQ29udHJvbE5hbWVdLHNlYXJjaEJhcltmb3JtQ29udHJvbF0sJyArXG5cdFx0J3NlYXJjaGJhcltuZ01vZGVsXSxzZWFyY2hiYXJbZm9ybUNvbnRyb2xOYW1lXSxzZWFyY2hiYXJbZm9ybUNvbnRyb2xdLCcgK1xuXHRcdCdzZWFyY2gtYmFyW25nTW9kZWxdLCBzZWFyY2gtYmFyW2Zvcm1Db250cm9sTmFtZV0sc2VhcmNoLWJhcltmb3JtQ29udHJvbF0nLFxuXHRwcm92aWRlcnM6IFtURVhUX1ZBTFVFX0FDQ0VTU09SXSxcblx0aG9zdDoge1xuXHRcdCcoYmx1ciknOiAnb25Ub3VjaGVkKCknLFxuXHRcdCcodGV4dENoYW5nZSknOiAnb25DaGFuZ2UoJGV2ZW50LnZhbHVlKScsXG5cdH0sXG59KVxuZXhwb3J0IGNsYXNzIFRleHRWYWx1ZUFjY2Vzc29yIGV4dGVuZHMgQmFzZVZhbHVlQWNjZXNzb3I8VGV4dFZpZXc+IHtcblx0Ly8gdHNsaW50OmRpc2FibGUtbGluZTpkaXJlY3RpdmUtY2xhc3Mtc3VmZml4XG5cdGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcblx0XHRzdXBlcihlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuXHR9XG5cblx0d3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZCB7XG5cdFx0Y29uc3Qgbm9ybWFsaXplZCA9IHN1cGVyLm5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcblx0XHR0aGlzLnZpZXcudGV4dCA9IG5vcm1hbGl6ZWQ7XG5cdH1cbn1cbiJdfQ==