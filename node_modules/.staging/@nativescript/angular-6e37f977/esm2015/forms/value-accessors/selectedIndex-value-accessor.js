import { Directive, ElementRef, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BaseValueAccessor } from './base-value-accessor';
const SELECTED_INDEX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => SelectedIndexValueAccessor),
    multi: true,
};
/**
 * The accessor for setting a selectedIndex and listening to changes that is used by the
 * {@link NgModel} directives.
 *
 *  ### Example
 *  ```
 *  <SegmentedBar [(ngModel)]="model.test">
 *  ```
 */
export class SelectedIndexValueAccessor extends BaseValueAccessor {
    // tslint:disable-line:max-line-length directive-class-suffix
    constructor(elementRef) {
        super(elementRef.nativeElement);
    }
    writeValue(value) {
        const normalized = super.normalizeValue(value);
        this.value = normalized;
        if (this.viewInitialized) {
            this.view.selectedIndex = this.value;
        }
    }
    ngAfterViewInit() {
        this.viewInitialized = true;
        this.view.selectedIndex = this.value;
    }
}
SelectedIndexValueAccessor.decorators = [
    { type: Directive, args: [{
                selector: 'SegmentedBar[ngModel],SegmentedBar[formControlName],SegmentedBar[formControl],' +
                    'segmentedBar[ngModel],segmentedBar[formControlName],segmentedBar[formControl],' +
                    'segmentedbar[ngModel],segmentedbar[formControlName],segmentedbar[formControl],' +
                    'segmented-bar[ngModel],segmented-bar[formControlName],segmented-bar[formControl],' +
                    'ListPicker[ngModel],ListPicker[formControlName],ListPicker[formControl],' +
                    'listPicker[ngModel],listPicker[formControlName],listPicker[formControl],' +
                    'listpicker[ngModel],listpicker[formControlName],listpicker[formControl],' +
                    'list-picker[ngModel],list-picker[formControlName],list-picker[formControl],' +
                    'TabView[ngModel],TabView[formControlName],TabView[formControl],' +
                    'tabView[ngModel],tabView[formControlName],tabView[formControl],' +
                    'tabview[ngModel],tabview[formControlName],tabview[formControl],' +
                    'tab-view[ngModel],tab-view[formControlName],tab-view[formControl]',
                providers: [SELECTED_INDEX_VALUE_ACCESSOR],
                host: {
                    '(selectedIndexChange)': 'onChange($event.value)',
                },
            },] }
];
SelectedIndexValueAccessor.ctorParameters = () => [
    { type: ElementRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0ZWRJbmRleC12YWx1ZS1hY2Nlc3Nvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2Zvcm1zL3ZhbHVlLWFjY2Vzc29ycy9zZWxlY3RlZEluZGV4LXZhbHVlLWFjY2Vzc29yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDakYsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHMUQsTUFBTSw2QkFBNkIsR0FBRztJQUNyQyxPQUFPLEVBQUUsaUJBQWlCO0lBQzFCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsMEJBQTBCLENBQUM7SUFDekQsS0FBSyxFQUFFLElBQUk7Q0FDWCxDQUFDO0FBSUY7Ozs7Ozs7O0dBUUc7QUFvQkgsTUFBTSxPQUFPLDBCQUEyQixTQUFRLGlCQUFpQztJQUNoRiw2REFBNkQ7SUFDN0QsWUFBWSxVQUFzQjtRQUNqQyxLQUFLLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFLRCxVQUFVLENBQUMsS0FBVTtRQUNwQixNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDO1FBRXhCLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1NBQ3JDO0lBQ0YsQ0FBQztJQUVELGVBQWU7UUFDZCxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RDLENBQUM7OztZQXhDRCxTQUFTLFNBQUM7Z0JBQ1YsUUFBUSxFQUNQLGdGQUFnRjtvQkFDaEYsZ0ZBQWdGO29CQUNoRixnRkFBZ0Y7b0JBQ2hGLG1GQUFtRjtvQkFDbkYsMEVBQTBFO29CQUMxRSwwRUFBMEU7b0JBQzFFLDBFQUEwRTtvQkFDMUUsNkVBQTZFO29CQUM3RSxpRUFBaUU7b0JBQ2pFLGlFQUFpRTtvQkFDakUsaUVBQWlFO29CQUNqRSxtRUFBbUU7Z0JBQ3BFLFNBQVMsRUFBRSxDQUFDLDZCQUE2QixDQUFDO2dCQUMxQyxJQUFJLEVBQUU7b0JBQ0wsdUJBQXVCLEVBQUUsd0JBQXdCO2lCQUNqRDthQUNEOzs7WUF4Q21CLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIGZvcndhcmRSZWYsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQmFzZVZhbHVlQWNjZXNzb3IgfSBmcm9tICcuL2Jhc2UtdmFsdWUtYWNjZXNzb3InO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gJ0BuYXRpdmVzY3JpcHQvY29yZSc7XG5cbmNvbnN0IFNFTEVDVEVEX0lOREVYX1ZBTFVFX0FDQ0VTU09SID0ge1xuXHRwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcblx0dXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gU2VsZWN0ZWRJbmRleFZhbHVlQWNjZXNzb3IpLFxuXHRtdWx0aTogdHJ1ZSxcbn07XG5cbmV4cG9ydCB0eXBlIFNlbGVjdGFibGVWaWV3ID0geyBzZWxlY3RlZEluZGV4OiBudW1iZXIgfSAmIFZpZXc7XG5cbi8qKlxuICogVGhlIGFjY2Vzc29yIGZvciBzZXR0aW5nIGEgc2VsZWN0ZWRJbmRleCBhbmQgbGlzdGVuaW5nIHRvIGNoYW5nZXMgdGhhdCBpcyB1c2VkIGJ5IHRoZVxuICoge0BsaW5rIE5nTW9kZWx9IGRpcmVjdGl2ZXMuXG4gKlxuICogICMjIyBFeGFtcGxlXG4gKiAgYGBgXG4gKiAgPFNlZ21lbnRlZEJhciBbKG5nTW9kZWwpXT1cIm1vZGVsLnRlc3RcIj5cbiAqICBgYGBcbiAqL1xuQERpcmVjdGl2ZSh7XG5cdHNlbGVjdG9yOlxuXHRcdCdTZWdtZW50ZWRCYXJbbmdNb2RlbF0sU2VnbWVudGVkQmFyW2Zvcm1Db250cm9sTmFtZV0sU2VnbWVudGVkQmFyW2Zvcm1Db250cm9sXSwnICtcblx0XHQnc2VnbWVudGVkQmFyW25nTW9kZWxdLHNlZ21lbnRlZEJhcltmb3JtQ29udHJvbE5hbWVdLHNlZ21lbnRlZEJhcltmb3JtQ29udHJvbF0sJyArXG5cdFx0J3NlZ21lbnRlZGJhcltuZ01vZGVsXSxzZWdtZW50ZWRiYXJbZm9ybUNvbnRyb2xOYW1lXSxzZWdtZW50ZWRiYXJbZm9ybUNvbnRyb2xdLCcgK1xuXHRcdCdzZWdtZW50ZWQtYmFyW25nTW9kZWxdLHNlZ21lbnRlZC1iYXJbZm9ybUNvbnRyb2xOYW1lXSxzZWdtZW50ZWQtYmFyW2Zvcm1Db250cm9sXSwnICtcblx0XHQnTGlzdFBpY2tlcltuZ01vZGVsXSxMaXN0UGlja2VyW2Zvcm1Db250cm9sTmFtZV0sTGlzdFBpY2tlcltmb3JtQ29udHJvbF0sJyArXG5cdFx0J2xpc3RQaWNrZXJbbmdNb2RlbF0sbGlzdFBpY2tlcltmb3JtQ29udHJvbE5hbWVdLGxpc3RQaWNrZXJbZm9ybUNvbnRyb2xdLCcgK1xuXHRcdCdsaXN0cGlja2VyW25nTW9kZWxdLGxpc3RwaWNrZXJbZm9ybUNvbnRyb2xOYW1lXSxsaXN0cGlja2VyW2Zvcm1Db250cm9sXSwnICtcblx0XHQnbGlzdC1waWNrZXJbbmdNb2RlbF0sbGlzdC1waWNrZXJbZm9ybUNvbnRyb2xOYW1lXSxsaXN0LXBpY2tlcltmb3JtQ29udHJvbF0sJyArXG5cdFx0J1RhYlZpZXdbbmdNb2RlbF0sVGFiVmlld1tmb3JtQ29udHJvbE5hbWVdLFRhYlZpZXdbZm9ybUNvbnRyb2xdLCcgK1xuXHRcdCd0YWJWaWV3W25nTW9kZWxdLHRhYlZpZXdbZm9ybUNvbnRyb2xOYW1lXSx0YWJWaWV3W2Zvcm1Db250cm9sXSwnICtcblx0XHQndGFidmlld1tuZ01vZGVsXSx0YWJ2aWV3W2Zvcm1Db250cm9sTmFtZV0sdGFidmlld1tmb3JtQ29udHJvbF0sJyArXG5cdFx0J3RhYi12aWV3W25nTW9kZWxdLHRhYi12aWV3W2Zvcm1Db250cm9sTmFtZV0sdGFiLXZpZXdbZm9ybUNvbnRyb2xdJyxcblx0cHJvdmlkZXJzOiBbU0VMRUNURURfSU5ERVhfVkFMVUVfQUNDRVNTT1JdLFxuXHRob3N0OiB7XG5cdFx0JyhzZWxlY3RlZEluZGV4Q2hhbmdlKSc6ICdvbkNoYW5nZSgkZXZlbnQudmFsdWUpJyxcblx0fSxcbn0pXG5leHBvcnQgY2xhc3MgU2VsZWN0ZWRJbmRleFZhbHVlQWNjZXNzb3IgZXh0ZW5kcyBCYXNlVmFsdWVBY2Nlc3NvcjxTZWxlY3RhYmxlVmlldz4gaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcblx0Ly8gdHNsaW50OmRpc2FibGUtbGluZTptYXgtbGluZS1sZW5ndGggZGlyZWN0aXZlLWNsYXNzLXN1ZmZpeFxuXHRjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG5cdFx0c3VwZXIoZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcblx0fVxuXG5cdHByaXZhdGUgdmFsdWU6IG51bWJlcjtcblx0cHJpdmF0ZSB2aWV3SW5pdGlhbGl6ZWQ6IGJvb2xlYW47XG5cblx0d3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZCB7XG5cdFx0Y29uc3Qgbm9ybWFsaXplZCA9IHN1cGVyLm5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcblx0XHR0aGlzLnZhbHVlID0gbm9ybWFsaXplZDtcblxuXHRcdGlmICh0aGlzLnZpZXdJbml0aWFsaXplZCkge1xuXHRcdFx0dGhpcy52aWV3LnNlbGVjdGVkSW5kZXggPSB0aGlzLnZhbHVlO1xuXHRcdH1cblx0fVxuXG5cdG5nQWZ0ZXJWaWV3SW5pdCgpIHtcblx0XHR0aGlzLnZpZXdJbml0aWFsaXplZCA9IHRydWU7XG5cdFx0dGhpcy52aWV3LnNlbGVjdGVkSW5kZXggPSB0aGlzLnZhbHVlO1xuXHR9XG59XG4iXX0=