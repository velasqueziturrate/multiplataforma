import { Directive, ElementRef, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BaseValueAccessor } from './base-value-accessor';
const DATE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => DateValueAccessor),
    multi: true,
};
/**
 * The accessor for setting a date and listening to changes that is used by the
 * {@link NgModel} directives.
 *
 *  ### Example
 *  ```
 *  <DatePicker [(ngModel)]="model.test">
 *  ```
 */
export class DateValueAccessor extends BaseValueAccessor {
    // tslint:disable-line:directive-class-suffix
    constructor(elementRef) {
        super(elementRef.nativeElement);
    }
    writeValue(value) {
        const normalized = super.normalizeValue(value);
        this.view.date = normalized;
    }
}
DateValueAccessor.decorators = [
    { type: Directive, args: [{
                selector: 'DatePicker[ngModel],DatePicker[formControlName],DatePicker[formControl],' + 'datepicker[ngModel],datepicker[formControlName],datepicker[formControl],' + 'datePicker[ngModel],datePicker[formControlName],datePicker[formControl],' + 'date-picker[ngModel],date-picker[formControlName],date-picker[formControl]',
                providers: [DATE_VALUE_ACCESSOR],
                host: {
                    '(dateChange)': 'onChange($event.value)',
                },
            },] }
];
DateValueAccessor.ctorParameters = () => [
    { type: ElementRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS12YWx1ZS1hY2Nlc3Nvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2Zvcm1zL3ZhbHVlLWFjY2Vzc29ycy9kYXRlLXZhbHVlLWFjY2Vzc29yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUcxRCxNQUFNLG1CQUFtQixHQUFHO0lBQzNCLE9BQU8sRUFBRSxpQkFBaUI7SUFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztJQUNoRCxLQUFLLEVBQUUsSUFBSTtDQUNYLENBQUM7QUFFRjs7Ozs7Ozs7R0FRRztBQVFILE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxpQkFBNkI7SUFDbkUsNkNBQTZDO0lBQzdDLFlBQVksVUFBc0I7UUFDakMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQVU7UUFDcEIsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUM7SUFDN0IsQ0FBQzs7O1lBaEJELFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUsMEVBQTBFLEdBQUcsMEVBQTBFLEdBQUcsMEVBQTBFLEdBQUcsNEVBQTRFO2dCQUM3VCxTQUFTLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztnQkFDaEMsSUFBSSxFQUFFO29CQUNMLGNBQWMsRUFBRSx3QkFBd0I7aUJBQ3hDO2FBQ0Q7OztZQTFCbUIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgZm9yd2FyZFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBCYXNlVmFsdWVBY2Nlc3NvciB9IGZyb20gJy4vYmFzZS12YWx1ZS1hY2Nlc3Nvcic7XG5pbXBvcnQgeyBEYXRlUGlja2VyIH0gZnJvbSAnQG5hdGl2ZXNjcmlwdC9jb3JlJztcblxuY29uc3QgREFURV9WQUxVRV9BQ0NFU1NPUiA9IHtcblx0cHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG5cdHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IERhdGVWYWx1ZUFjY2Vzc29yKSxcblx0bXVsdGk6IHRydWUsXG59O1xuXG4vKipcbiAqIFRoZSBhY2Nlc3NvciBmb3Igc2V0dGluZyBhIGRhdGUgYW5kIGxpc3RlbmluZyB0byBjaGFuZ2VzIHRoYXQgaXMgdXNlZCBieSB0aGVcbiAqIHtAbGluayBOZ01vZGVsfSBkaXJlY3RpdmVzLlxuICpcbiAqICAjIyMgRXhhbXBsZVxuICogIGBgYFxuICogIDxEYXRlUGlja2VyIFsobmdNb2RlbCldPVwibW9kZWwudGVzdFwiPlxuICogIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6ICdEYXRlUGlja2VyW25nTW9kZWxdLERhdGVQaWNrZXJbZm9ybUNvbnRyb2xOYW1lXSxEYXRlUGlja2VyW2Zvcm1Db250cm9sXSwnICsgJ2RhdGVwaWNrZXJbbmdNb2RlbF0sZGF0ZXBpY2tlcltmb3JtQ29udHJvbE5hbWVdLGRhdGVwaWNrZXJbZm9ybUNvbnRyb2xdLCcgKyAnZGF0ZVBpY2tlcltuZ01vZGVsXSxkYXRlUGlja2VyW2Zvcm1Db250cm9sTmFtZV0sZGF0ZVBpY2tlcltmb3JtQ29udHJvbF0sJyArICdkYXRlLXBpY2tlcltuZ01vZGVsXSxkYXRlLXBpY2tlcltmb3JtQ29udHJvbE5hbWVdLGRhdGUtcGlja2VyW2Zvcm1Db250cm9sXScsXG5cdHByb3ZpZGVyczogW0RBVEVfVkFMVUVfQUNDRVNTT1JdLFxuXHRob3N0OiB7XG5cdFx0JyhkYXRlQ2hhbmdlKSc6ICdvbkNoYW5nZSgkZXZlbnQudmFsdWUpJyxcblx0fSxcbn0pXG5leHBvcnQgY2xhc3MgRGF0ZVZhbHVlQWNjZXNzb3IgZXh0ZW5kcyBCYXNlVmFsdWVBY2Nlc3NvcjxEYXRlUGlja2VyPiB7XG5cdC8vIHRzbGludDpkaXNhYmxlLWxpbmU6ZGlyZWN0aXZlLWNsYXNzLXN1ZmZpeFxuXHRjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG5cdFx0c3VwZXIoZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcblx0fVxuXG5cdHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xuXHRcdGNvbnN0IG5vcm1hbGl6ZWQgPSBzdXBlci5ub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG5cdFx0dGhpcy52aWV3LmRhdGUgPSBub3JtYWxpemVkO1xuXHR9XG59XG4iXX0=