import { Inject, Injectable, Optional, NgZone, ViewEncapsulation } from '@angular/core';
import { View, Application, profile, Device } from '@nativescript/core';
import { APP_ROOT_VIEW, getRootPage } from './platform-providers';
import { ViewUtil } from './view-util';
import { NativeScriptDebug } from './trace';
import { NativeScriptRenderer } from './renderer';
import { EmulatedRenderer } from './renderer-emulated';
const ɵ0 = function addStyleToCss(style) {
    Application.addCss(style);
};
const addStyleToCss = profile('"renderer".addStyleToCss', ɵ0);
export class NativeScriptRendererFactory {
    constructor(rootView, zone) {
        this.zone = zone;
        this.componentRenderers = new Map();
        this.viewUtil = new ViewUtil(Device);
        this.setRootNgView(rootView);
        this.defaultRenderer = new NativeScriptRenderer(this.rootNgView, zone, this.viewUtil);
    }
    setRootNgView(rootView) {
        if (!rootView) {
            rootView = getRootPage();
        }
        rootView.nodeName = 'NONE';
        this.rootNgView = rootView;
    }
    createRenderer(element, type) {
        if (!element || !type) {
            return this.defaultRenderer;
        }
        let renderer = this.componentRenderers.get(type.id);
        if (renderer) {
            if (renderer instanceof EmulatedRenderer) {
                renderer.applyToHost(element);
            }
            return renderer;
        }
        if (type.encapsulation === ViewEncapsulation.None) {
            type.styles.map((s) => s.toString()).forEach(addStyleToCss);
            renderer = this.defaultRenderer;
        }
        else {
            renderer = new EmulatedRenderer(type, this.rootNgView, this.zone, this.viewUtil);
            renderer.applyToHost(element);
        }
        this.componentRenderers.set(type.id, renderer);
        return renderer;
    }
    ngOnDestroy() {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRendererFactory.ngOnDestroy()`);
        }
        while (this.rootNgView && this.rootNgView.firstChild) {
            this.viewUtil.removeChild(this.rootNgView, this.rootNgView.firstChild);
        }
    }
}
NativeScriptRendererFactory.decorators = [
    { type: Injectable }
];
NativeScriptRendererFactory.ctorParameters = () => [
    { type: View, decorators: [{ type: Optional }, { type: Inject, args: [APP_ROOT_VIEW,] }] },
    { type: NgZone }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZXItZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3JlbmRlcmVyLWZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQW9CLFFBQVEsRUFBRSxNQUFNLEVBQWlCLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pILE9BQU8sRUFBRSxJQUFJLEVBQWUsV0FBVyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRixPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFdkMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQzVDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNsRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztXQUVHLFNBQVMsYUFBYSxDQUFDLEtBQWE7SUFDN0YsV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMzQixDQUFDO0FBRkQsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLDBCQUEwQixLQUV0RCxDQUFDO0FBR0gsTUFBTSxPQUFPLDJCQUEyQjtJQU12QyxZQUErQyxRQUFjLEVBQVUsSUFBWTtRQUFaLFNBQUksR0FBSixJQUFJLENBQVE7UUFMbkYsdUJBQWtCLEdBQUcsSUFBSSxHQUFHLEVBQWdDLENBQUM7UUFNNUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdkYsQ0FBQztJQUVPLGFBQWEsQ0FBQyxRQUFhO1FBQ2xDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDZCxRQUFRLEdBQUcsV0FBVyxFQUFFLENBQUM7U0FDekI7UUFFRCxRQUFRLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQztRQUMzQixJQUFJLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQztJQUM1QixDQUFDO0lBRUQsY0FBYyxDQUFDLE9BQVksRUFBRSxJQUFtQjtRQUMvQyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ3RCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztTQUM1QjtRQUVELElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3BELElBQUksUUFBUSxFQUFFO1lBQ2IsSUFBSSxRQUFRLFlBQVksZ0JBQWdCLEVBQUU7Z0JBQ3pDLFFBQVEsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDOUI7WUFFRCxPQUFPLFFBQVEsQ0FBQztTQUNoQjtRQUVELElBQUksSUFBSSxDQUFDLGFBQWEsS0FBSyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUU7WUFDbEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM1RCxRQUFRLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztTQUNoQzthQUFNO1lBQ04sUUFBUSxHQUFHLElBQUksZ0JBQWdCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDOUQsUUFBUyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNsRDtRQUVELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMvQyxPQUFPLFFBQVEsQ0FBQztJQUNqQixDQUFDO0lBRUQsV0FBVztRQUNWLElBQUksaUJBQWlCLENBQUMsWUFBWSxFQUFFLEVBQUU7WUFDckMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7U0FDM0U7UUFFRCxPQUFPLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUU7WUFDckQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ3ZFO0lBQ0YsQ0FBQzs7O1lBeERELFVBQVU7OztZQVpGLElBQUksdUJBbUJDLFFBQVEsWUFBSSxNQUFNLFNBQUMsYUFBYTtZQXBCVyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBSZW5kZXJlckZhY3RvcnkyLCBPcHRpb25hbCwgTmdab25lLCBSZW5kZXJlclR5cGUyLCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVmlldywgZ2V0Vmlld0J5SWQsIEFwcGxpY2F0aW9uLCBwcm9maWxlLCBEZXZpY2UgfSBmcm9tICdAbmF0aXZlc2NyaXB0L2NvcmUnO1xuaW1wb3J0IHsgQVBQX1JPT1RfVklFVywgZ2V0Um9vdFBhZ2UgfSBmcm9tICcuL3BsYXRmb3JtLXByb3ZpZGVycyc7XG5pbXBvcnQgeyBWaWV3VXRpbCB9IGZyb20gJy4vdmlldy11dGlsJztcbmltcG9ydCB7IE5nVmlldywgSW52aXNpYmxlTm9kZSB9IGZyb20gJy4vZWxlbWVudC1yZWdpc3RyeSc7XG5pbXBvcnQgeyBOYXRpdmVTY3JpcHREZWJ1ZyB9IGZyb20gJy4vdHJhY2UnO1xuaW1wb3J0IHsgTmF0aXZlU2NyaXB0UmVuZGVyZXIgfSBmcm9tICcuL3JlbmRlcmVyJztcbmltcG9ydCB7IEVtdWxhdGVkUmVuZGVyZXIgfSBmcm9tICcuL3JlbmRlcmVyLWVtdWxhdGVkJztcblxuY29uc3QgYWRkU3R5bGVUb0NzcyA9IHByb2ZpbGUoJ1wicmVuZGVyZXJcIi5hZGRTdHlsZVRvQ3NzJywgZnVuY3Rpb24gYWRkU3R5bGVUb0NzcyhzdHlsZTogc3RyaW5nKTogdm9pZCB7XG5cdEFwcGxpY2F0aW9uLmFkZENzcyhzdHlsZSk7XG59KTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5hdGl2ZVNjcmlwdFJlbmRlcmVyRmFjdG9yeSBpbXBsZW1lbnRzIFJlbmRlcmVyRmFjdG9yeTIge1xuXHRjb21wb25lbnRSZW5kZXJlcnMgPSBuZXcgTWFwPHN0cmluZywgTmF0aXZlU2NyaXB0UmVuZGVyZXI+KCk7XG5cdHZpZXdVdGlsOiBWaWV3VXRpbDtcblx0ZGVmYXVsdFJlbmRlcmVyOiBOYXRpdmVTY3JpcHRSZW5kZXJlcjtcblx0cm9vdE5nVmlldzogTmdWaWV3O1xuXG5cdGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoQVBQX1JPT1RfVklFVykgcm9vdFZpZXc6IFZpZXcsIHByaXZhdGUgem9uZTogTmdab25lKSB7XG5cdFx0dGhpcy52aWV3VXRpbCA9IG5ldyBWaWV3VXRpbChEZXZpY2UpO1xuXHRcdHRoaXMuc2V0Um9vdE5nVmlldyhyb290Vmlldyk7XG5cdFx0dGhpcy5kZWZhdWx0UmVuZGVyZXIgPSBuZXcgTmF0aXZlU2NyaXB0UmVuZGVyZXIodGhpcy5yb290TmdWaWV3LCB6b25lLCB0aGlzLnZpZXdVdGlsKTtcblx0fVxuXG5cdHByaXZhdGUgc2V0Um9vdE5nVmlldyhyb290VmlldzogYW55KSB7XG5cdFx0aWYgKCFyb290Vmlldykge1xuXHRcdFx0cm9vdFZpZXcgPSBnZXRSb290UGFnZSgpO1xuXHRcdH1cblxuXHRcdHJvb3RWaWV3Lm5vZGVOYW1lID0gJ05PTkUnO1xuXHRcdHRoaXMucm9vdE5nVmlldyA9IHJvb3RWaWV3O1xuXHR9XG5cblx0Y3JlYXRlUmVuZGVyZXIoZWxlbWVudDogYW55LCB0eXBlOiBSZW5kZXJlclR5cGUyKTogTmF0aXZlU2NyaXB0UmVuZGVyZXIge1xuXHRcdGlmICghZWxlbWVudCB8fCAhdHlwZSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZGVmYXVsdFJlbmRlcmVyO1xuXHRcdH1cblxuXHRcdGxldCByZW5kZXJlciA9IHRoaXMuY29tcG9uZW50UmVuZGVyZXJzLmdldCh0eXBlLmlkKTtcblx0XHRpZiAocmVuZGVyZXIpIHtcblx0XHRcdGlmIChyZW5kZXJlciBpbnN0YW5jZW9mIEVtdWxhdGVkUmVuZGVyZXIpIHtcblx0XHRcdFx0cmVuZGVyZXIuYXBwbHlUb0hvc3QoZWxlbWVudCk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZW5kZXJlcjtcblx0XHR9XG5cblx0XHRpZiAodHlwZS5lbmNhcHN1bGF0aW9uID09PSBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lKSB7XG5cdFx0XHR0eXBlLnN0eWxlcy5tYXAoKHMpID0+IHMudG9TdHJpbmcoKSkuZm9yRWFjaChhZGRTdHlsZVRvQ3NzKTtcblx0XHRcdHJlbmRlcmVyID0gdGhpcy5kZWZhdWx0UmVuZGVyZXI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbmRlcmVyID0gbmV3IEVtdWxhdGVkUmVuZGVyZXIodHlwZSwgdGhpcy5yb290TmdWaWV3LCB0aGlzLnpvbmUsIHRoaXMudmlld1V0aWwpO1xuXHRcdFx0KDxFbXVsYXRlZFJlbmRlcmVyPnJlbmRlcmVyKS5hcHBseVRvSG9zdChlbGVtZW50KTtcblx0XHR9XG5cblx0XHR0aGlzLmNvbXBvbmVudFJlbmRlcmVycy5zZXQodHlwZS5pZCwgcmVuZGVyZXIpO1xuXHRcdHJldHVybiByZW5kZXJlcjtcblx0fVxuXG5cdG5nT25EZXN0cm95KCk6IHZvaWQge1xuXHRcdGlmIChOYXRpdmVTY3JpcHREZWJ1Zy5pc0xvZ0VuYWJsZWQoKSkge1xuXHRcdFx0TmF0aXZlU2NyaXB0RGVidWcucmVuZGVyZXJMb2coYE5hdGl2ZVNjcmlwdFJlbmRlcmVyRmFjdG9yeS5uZ09uRGVzdHJveSgpYCk7XG5cdFx0fVxuXG5cdFx0d2hpbGUgKHRoaXMucm9vdE5nVmlldyAmJiB0aGlzLnJvb3ROZ1ZpZXcuZmlyc3RDaGlsZCkge1xuXHRcdFx0dGhpcy52aWV3VXRpbC5yZW1vdmVDaGlsZCh0aGlzLnJvb3ROZ1ZpZXcsIHRoaXMucm9vdE5nVmlldy5maXJzdENoaWxkKTtcblx0XHR9XG5cdH1cbn1cbiJdfQ==