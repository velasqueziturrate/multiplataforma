import { __decorate } from "tslib";
import { Application, TextView, Color, Frame, profile, profilingUptime } from '@nativescript/core';
// import './dom-adapter';
// import 'nativescript-intl';
import { PlatformRef, EventEmitter, Sanitizer } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { NativeScriptDebug } from './trace';
import { defaultPageFactoryProvider, setRootPage, PAGE_FACTORY, getRootPage } from './platform-providers';
import { AppHostView, AppHostAsyncView } from './app-host-view';
export const onBeforeLivesync = new EventEmitter();
export const onAfterLivesync = new EventEmitter();
let lastBootstrappedModule;
export class NativeScriptSanitizer extends Sanitizer {
    sanitize(_context, value) {
        return value;
    }
}
export class NativeScriptDocument {
    constructor() {
        // Required by the AnimationDriver
        this.body = {
            isOverride: true,
        };
    }
    createElement(tag) {
        throw new Error('NativeScriptDocument is not DOM Document. There is no createElement() method.');
    }
}
export const COMMON_PROVIDERS = [defaultPageFactoryProvider, { provide: Sanitizer, useClass: NativeScriptSanitizer, deps: [] }, { provide: DOCUMENT, useClass: NativeScriptDocument, deps: [] }];
export class NativeScriptPlatformRef extends PlatformRef {
    constructor(platform, appOptions = {}) {
        super();
        this.platform = platform;
        this.appOptions = appOptions;
    }
    bootstrapModuleFactory(moduleFactory) {
        this._bootstrapper = () => {
            let bootstrapFactory = moduleFactory;
            if (this.appOptions.hmrOptions) {
                bootstrapFactory = this.appOptions.hmrOptions.moduleTypeFactory();
            }
            return this.platform.bootstrapModuleFactory(bootstrapFactory);
        };
        this.bootstrapApp();
        return null; // Make the compiler happy
    }
    bootstrapModule(moduleType, compilerOptions = []) {
        this._bootstrapper = () => {
            let bootstrapType = moduleType;
            if (this.appOptions.hmrOptions) {
                bootstrapType = this.appOptions.hmrOptions.moduleTypeFactory();
            }
            return this.platform.bootstrapModule(bootstrapType, compilerOptions);
        };
        this.bootstrapApp();
        return null; // Make the compiler happy
    }
    bootstrapApp() {
        global.__onLiveSyncCore = () => {
            if (this.appOptions.hmrOptions) {
                const rootView = Application.getRootView();
                if (rootView) {
                    rootView._closeAllModalViewsInternal();
                }
                this.appOptions.hmrOptions.livesyncCallback(() => this._livesync());
            }
            else {
                this._livesync();
            }
        };
        if (this.appOptions && typeof this.appOptions.cssFile === 'string') {
            Application.setCssFileName(this.appOptions.cssFile);
        }
        this.bootstrapNativeScriptApp();
    }
    onDestroy(callback) {
        this.platform.onDestroy(callback);
    }
    get injector() {
        return this.platform.injector;
    }
    destroy() {
        this.platform.destroy();
    }
    get destroyed() {
        return this.platform.destroyed;
    }
    bootstrapNativeScriptApp() {
        let rootContent;
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.bootstrapLog('NativeScriptPlatform bootstrap started.');
        }
        const launchCallback = profile('@nativescript/angular/platform-common.launchCallback', (args) => {
            if (NativeScriptDebug.isLogEnabled()) {
                NativeScriptDebug.bootstrapLog('Application launch event fired');
            }
            // Create a temp page for root of the renderer
            let tempAppHostView;
            let tempAppHostAsyncView;
            if (this.appOptions && (this.appOptions.async || this.appOptions.launchView)) {
                tempAppHostAsyncView = new AppHostAsyncView(new Color(this.appOptions && this.appOptions.backgroundColor ? this.appOptions.backgroundColor : '#fff'));
                if (this.appOptions.launchView) {
                    this.appOptions.launchView.style.zIndex = 1000;
                    tempAppHostAsyncView.addChild(this.appOptions.launchView);
                }
                rootContent = tempAppHostAsyncView.ngAppRoot;
                setRootPage(tempAppHostAsyncView);
            }
            else {
                tempAppHostView = new AppHostView(new Color(this.appOptions && this.appOptions.backgroundColor ? this.appOptions.backgroundColor : '#fff'));
                setRootPage(tempAppHostView);
            }
            let bootstrapPromiseCompleted = false;
            const bootstrap = () => {
                this._bootstrapper().then((moduleRef) => {
                    bootstrapPromiseCompleted = true;
                    if (NativeScriptDebug.isLogEnabled()) {
                        NativeScriptDebug.bootstrapLog(`Angular bootstrap bootstrap done. uptime: ${profilingUptime()}`);
                    }
                    if (this.appOptions.launchView && this.appOptions.launchView.cleanup) {
                        this.appOptions.launchView.cleanup().then(() => {
                            // cleanup any custom launch views
                            tempAppHostAsyncView.removeChild(this.appOptions.launchView);
                            this.appOptions.launchView = null;
                        });
                    }
                    else if (tempAppHostView) {
                        rootContent = tempAppHostView.content;
                    }
                    lastBootstrappedModule = new WeakRef(moduleRef);
                }, (err) => {
                    bootstrapPromiseCompleted = true;
                    const errorMessage = err.message + '\n\n' + err.stack;
                    if (NativeScriptDebug.isLogEnabled()) {
                        NativeScriptDebug.bootstrapLogError('ERROR BOOTSTRAPPING ANGULAR');
                    }
                    if (NativeScriptDebug.isLogEnabled()) {
                        NativeScriptDebug.bootstrapLogError(errorMessage);
                    }
                    rootContent = this.createErrorUI(errorMessage);
                });
                if (NativeScriptDebug.isLogEnabled()) {
                    NativeScriptDebug.bootstrapLog('bootstrapAction called, draining micro tasks queue. Root: ' + rootContent);
                }
                global.Zone.drainMicroTaskQueue();
                if (NativeScriptDebug.isLogEnabled()) {
                    NativeScriptDebug.bootstrapLog('bootstrapAction called, draining micro tasks queue finished! Root: ' + rootContent);
                }
            };
            if (this.appOptions && this.appOptions.launchView && this.appOptions.launchView.startAnimation) {
                // start animations on next tick (after initial boot)
                setTimeout(() => {
                    // ensure launch animation is executed after launchView added to view stack
                    this.appOptions.launchView.startAnimation();
                });
            }
            bootstrap();
            // if (!bootstrapPromiseCompleted) {
            // 	const errorMessage = "Bootstrap promise didn't resolve";
            // 	if (NativeScriptDebug.isLogEnabled()) {
            // 		NativeScriptDebug.bootstrapLogError(errorMessage);
            // 	}
            // 	rootContent = this.createErrorUI(errorMessage);
            // }
            args.root = rootContent;
        });
        const exitCallback = profile('@nativescript/angular/platform-common.exitCallback', (args) => {
            const androidActivity = args.android;
            if (androidActivity && !androidActivity.isFinishing()) {
                // Exit event was triggered as a part of a restart of the app.
                return;
            }
            const lastModuleRef = lastBootstrappedModule ? lastBootstrappedModule.get() : null;
            if (lastModuleRef) {
                // Make sure the module is only destroyed once
                lastBootstrappedModule = null;
                lastModuleRef.destroy();
            }
            rootContent = null;
        });
        Application.on(Application.launchEvent, launchCallback);
        Application.on(Application.exitEvent, exitCallback);
        Application.run();
    }
    _livesync() {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.bootstrapLog('Angular livesync started.');
        }
        const lastModuleRef = lastBootstrappedModule ? lastBootstrappedModule.get() : null;
        onBeforeLivesync.next(lastModuleRef);
        if (lastModuleRef) {
            lastModuleRef.destroy();
        }
        this._bootstrapper().then((moduleRef) => {
            if (NativeScriptDebug.isLogEnabled()) {
                NativeScriptDebug.bootstrapLog('Angular livesync done.');
            }
            onAfterLivesync.next({ moduleRef });
            lastBootstrappedModule = new WeakRef(moduleRef);
            Application.resetRootView({
                create: () => getRootPage(),
            });
        }, (error) => {
            if (NativeScriptDebug.isLogEnabled()) {
                NativeScriptDebug.bootstrapLogError('ERROR LIVESYNC BOOTSTRAPPING ANGULAR');
            }
            const errorMessage = error.message + '\n\n' + error.stack;
            if (NativeScriptDebug.isLogEnabled()) {
                NativeScriptDebug.bootstrapLogError(errorMessage);
            }
            Application.resetRootView({
                create: () => this.createErrorUI(errorMessage),
            });
            onAfterLivesync.next({ error });
        });
    }
    createErrorUI(message) {
        const errorTextBox = new TextView();
        errorTextBox.text = message;
        errorTextBox.color = new Color('red');
        return errorTextBox;
    }
    createFrameAndPage(isLivesync) {
        const frame = new Frame();
        const pageFactory = this.platform.injector.get(PAGE_FACTORY);
        const page = pageFactory({ isBootstrap: true, isLivesync });
        frame.navigate({
            create: () => {
                return page;
            },
        });
        return { page, frame };
    }
}
__decorate([
    profile
], NativeScriptPlatformRef.prototype, "bootstrapModuleFactory", null);
__decorate([
    profile
], NativeScriptPlatformRef.prototype, "bootstrapModule", null);
__decorate([
    profile
], NativeScriptPlatformRef.prototype, "bootstrapApp", null);
__decorate([
    profile
], NativeScriptPlatformRef.prototype, "bootstrapNativeScriptApp", null);
__decorate([
    profile
], NativeScriptPlatformRef.prototype, "_livesync", null);
//# sourceMappingURL=data:application/json;base64,