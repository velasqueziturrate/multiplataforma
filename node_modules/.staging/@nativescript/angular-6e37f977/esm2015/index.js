// Initial imports and polyfills
import '@nativescript/core';
import '@nativescript/zone-js';
// TODO: migrate to standard zone.js if possible
// investigate Ivy with templated-items-comp to allow standard zone below to be used instead of patched {N} zone above
// import 'zone.js/dist/zone';
import './dom-adapter';
import 'nativescript-intl';
// import "./polyfills/array";
import './polyfills/console';
export * from './platform-common';
export * from './platform-providers';
export * from './platform';
export * from './resource-loader';
export * from './nativescript.module';
export * from './common';
export * from './common/detached-loader';
export * from './common/utils';
export { NativeScriptAnimationsModule } from './animations';
export * from './file-system';
export * from './http-client';
export * from './forms';
export * from './directives';
export * from './router';
export * from './frame.service';
export { NativeScriptRenderer } from './renderer';
export { EmulatedRenderer } from './renderer-emulated';
export { NativeScriptRendererFactory } from './renderer-factory';
// utils
export { NativeScriptDebug } from './trace';
export * from './app-host-view';
export { getViewClass, getViewMeta, isKnownView, registerElement, CommentNode, getSingleViewRecursive, isInvisibleNode, isView } from './element-registry';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQ0FBZ0M7QUFDaEMsT0FBTyxvQkFBb0IsQ0FBQztBQUM1QixPQUFPLHVCQUF1QixDQUFDO0FBQy9CLGdEQUFnRDtBQUNoRCxzSEFBc0g7QUFDdEgsOEJBQThCO0FBQzlCLE9BQU8sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sbUJBQW1CLENBQUM7QUFDM0IsOEJBQThCO0FBQzlCLE9BQU8scUJBQXFCLENBQUM7QUFFN0IsY0FBYyxtQkFBbUIsQ0FBQztBQUNsQyxjQUFjLHNCQUFzQixDQUFDO0FBQ3JDLGNBQWMsWUFBWSxDQUFDO0FBQzNCLGNBQWMsbUJBQW1CLENBQUM7QUFFbEMsY0FBYyx1QkFBdUIsQ0FBQztBQUN0QyxjQUFjLFVBQVUsQ0FBQztBQUN6QixjQUFjLDBCQUEwQixDQUFDO0FBQ3pDLGNBQWMsZ0JBQWdCLENBQUM7QUFFL0IsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzVELGNBQWMsZUFBZSxDQUFDO0FBQzlCLGNBQWMsZUFBZSxDQUFDO0FBQzlCLGNBQWMsU0FBUyxDQUFDO0FBQ3hCLGNBQWMsY0FBYyxDQUFDO0FBQzdCLGNBQWMsVUFBVSxDQUFDO0FBQ3pCLGNBQWMsaUJBQWlCLENBQUM7QUFFaEMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRWpFLFFBQVE7QUFDUixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDNUMsY0FBYyxpQkFBaUIsQ0FBQztBQUNoQyxPQUFPLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBRSxzQkFBc0IsRUFBRSxlQUFlLEVBQUUsTUFBTSxFQUFFLE1BQU0sb0JBQW9CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbml0aWFsIGltcG9ydHMgYW5kIHBvbHlmaWxsc1xuaW1wb3J0ICdAbmF0aXZlc2NyaXB0L2NvcmUnO1xuaW1wb3J0ICdAbmF0aXZlc2NyaXB0L3pvbmUtanMnO1xuLy8gVE9ETzogbWlncmF0ZSB0byBzdGFuZGFyZCB6b25lLmpzIGlmIHBvc3NpYmxlXG4vLyBpbnZlc3RpZ2F0ZSBJdnkgd2l0aCB0ZW1wbGF0ZWQtaXRlbXMtY29tcCB0byBhbGxvdyBzdGFuZGFyZCB6b25lIGJlbG93IHRvIGJlIHVzZWQgaW5zdGVhZCBvZiBwYXRjaGVkIHtOfSB6b25lIGFib3ZlXG4vLyBpbXBvcnQgJ3pvbmUuanMvZGlzdC96b25lJztcbmltcG9ydCAnLi9kb20tYWRhcHRlcic7XG5pbXBvcnQgJ25hdGl2ZXNjcmlwdC1pbnRsJztcbi8vIGltcG9ydCBcIi4vcG9seWZpbGxzL2FycmF5XCI7XG5pbXBvcnQgJy4vcG9seWZpbGxzL2NvbnNvbGUnO1xuXG5leHBvcnQgKiBmcm9tICcuL3BsYXRmb3JtLWNvbW1vbic7XG5leHBvcnQgKiBmcm9tICcuL3BsYXRmb3JtLXByb3ZpZGVycyc7XG5leHBvcnQgKiBmcm9tICcuL3BsYXRmb3JtJztcbmV4cG9ydCAqIGZyb20gJy4vcmVzb3VyY2UtbG9hZGVyJztcblxuZXhwb3J0ICogZnJvbSAnLi9uYXRpdmVzY3JpcHQubW9kdWxlJztcbmV4cG9ydCAqIGZyb20gJy4vY29tbW9uJztcbmV4cG9ydCAqIGZyb20gJy4vY29tbW9uL2RldGFjaGVkLWxvYWRlcic7XG5leHBvcnQgKiBmcm9tICcuL2NvbW1vbi91dGlscyc7XG5cbmV4cG9ydCB7IE5hdGl2ZVNjcmlwdEFuaW1hdGlvbnNNb2R1bGUgfSBmcm9tICcuL2FuaW1hdGlvbnMnO1xuZXhwb3J0ICogZnJvbSAnLi9maWxlLXN5c3RlbSc7XG5leHBvcnQgKiBmcm9tICcuL2h0dHAtY2xpZW50JztcbmV4cG9ydCAqIGZyb20gJy4vZm9ybXMnO1xuZXhwb3J0ICogZnJvbSAnLi9kaXJlY3RpdmVzJztcbmV4cG9ydCAqIGZyb20gJy4vcm91dGVyJztcbmV4cG9ydCAqIGZyb20gJy4vZnJhbWUuc2VydmljZSc7XG5cbmV4cG9ydCB7IE5hdGl2ZVNjcmlwdFJlbmRlcmVyIH0gZnJvbSAnLi9yZW5kZXJlcic7XG5leHBvcnQgeyBFbXVsYXRlZFJlbmRlcmVyIH0gZnJvbSAnLi9yZW5kZXJlci1lbXVsYXRlZCc7XG5leHBvcnQgeyBOYXRpdmVTY3JpcHRSZW5kZXJlckZhY3RvcnkgfSBmcm9tICcuL3JlbmRlcmVyLWZhY3RvcnknO1xuXG4vLyB1dGlsc1xuZXhwb3J0IHsgTmF0aXZlU2NyaXB0RGVidWcgfSBmcm9tICcuL3RyYWNlJztcbmV4cG9ydCAqIGZyb20gJy4vYXBwLWhvc3Qtdmlldyc7XG5leHBvcnQgeyBnZXRWaWV3Q2xhc3MsIGdldFZpZXdNZXRhLCBpc0tub3duVmlldywgcmVnaXN0ZXJFbGVtZW50LCBDb21tZW50Tm9kZSwgZ2V0U2luZ2xlVmlld1JlY3Vyc2l2ZSwgaXNJbnZpc2libGVOb2RlLCBpc1ZpZXcgfSBmcm9tICcuL2VsZW1lbnQtcmVnaXN0cnknO1xuZXhwb3J0IHR5cGUgeyBOZ1ZpZXcsIFZpZXdDbGFzcywgVmlld0NsYXNzTWV0YSwgVmlld1Jlc29sdmVyLCBWaWV3RXh0ZW5zaW9ucyB9IGZyb20gJy4vZWxlbWVudC1yZWdpc3RyeSc7XG4iXX0=