import { ProxyViewContainer, eachDescendant, CssAnimationProperty, CSSHelper } from '@nativescript/core';
import { NativeScriptAnimationPlayer } from './animation-player';
import { dashCaseToCamelCase } from './utils';
import { InvisibleNode } from '../element-registry';
import { NativeScriptDebug } from '../trace';
class Selector {
    constructor(rawSelector) {
        this.parse(rawSelector);
    }
    match(element) {
        return this.nsSelectorMatch(element) || this.classSelectorsMatch(element);
    }
    parse(rawSelector) {
        const selectors = rawSelector.split(',').map((s) => s.trim());
        this.nsSelectors = selectors.map(CSSHelper.createSelector);
        this.classSelectors = selectors.filter((s) => s.startsWith('.')).map((s) => s.substring(1));
    }
    nsSelectorMatch(element) {
        return this.nsSelectors.some((s) => s.match(element));
    }
    classSelectorsMatch(element) {
        return this.classSelectors.some((s) => this.hasClass(element, s));
    }
    // we're using that instead of match for classes
    // that are dynamically added by the animation engine
    // such as .ng-trigger, that's added for every :enter view
    hasClass(element, cls) {
        return element && element['$$classes'] && element['$$classes'][cls];
    }
}
export class NativeScriptAnimationDriver {
    validateStyleProperty(property) {
        NativeScriptDebug.animationsLog(`CssAnimationProperty.validateStyleProperty: ${property}`);
        return NativeScriptAnimationDriver.validProperties.indexOf(property) !== -1;
    }
    matchesElement(element, rawSelector) {
        NativeScriptDebug.animationsLog(`NativeScriptAnimationDriver.matchesElement ` + `element: ${element}, selector: ${rawSelector}`);
        const selector = this.makeSelector(rawSelector);
        return selector.match(element);
    }
    containsElement(elm1, elm2) {
        NativeScriptDebug.animationsLog(`NativeScriptAnimationDriver.containsElement ` + `element1: ${elm1}, element2: ${elm2}`);
        // Checking if the parent is our fake body object
        if (elm1['isOverride']) {
            return true;
        }
        const params = { originalView: elm2 };
        const result = this.visitDescendants(elm1, viewMatches, params);
        return result.found;
    }
    query(element, rawSelector, multi) {
        NativeScriptDebug.animationsLog(`NativeScriptAnimationDriver.query ` + `element: ${element}, selector: ${rawSelector} ` + `multi: ${multi}`);
        const selector = this.makeSelector(rawSelector);
        const params = { selector, multi };
        const result = this.visitDescendants(element, queryDescendants, params);
        return result.matches || [];
    }
    computeStyle(element, prop) {
        NativeScriptDebug.animationsLog(`NativeScriptAnimationDriver.computeStyle ` + `element: ${element}, prop: ${prop}`);
        const camelCaseProp = dashCaseToCamelCase(prop);
        return element.style[camelCaseProp];
    }
    animate(element, keyframes, duration, delay, easing) {
        NativeScriptDebug.animationsLog(`NativeScriptAnimationDriver.animate ` + `element: ${element}, keyframes: ${keyframes} ` + `duration: ${duration}, delay: ${delay} ` + `easing: ${easing}`);
        return new NativeScriptAnimationPlayer(element, keyframes, duration, delay, easing);
    }
    makeSelector(rawSelector) {
        return new Selector(rawSelector);
    }
    visitDescendants(element, cb, cbParams) {
        const result = {};
        // fill the result obj with the result from the callback function
        eachDescendant(element, (child) => cb(child, result, cbParams));
        return result;
    }
}
NativeScriptAnimationDriver.validProperties = [...CssAnimationProperty._getPropertyNames(), 'transform'];
function viewMatches(element, result, params) {
    if (element === params.originalView) {
        result.found = true;
    }
    return !result.found;
}
function queryDescendants(element, result, params) {
    if (!result.matches) {
        result.matches = [];
    }
    const { selector, multi } = params;
    // skip comment and text nodes
    // because they are not actual Views
    // and cannot be animated
    if (element instanceof InvisibleNode || !selector.match(element)) {
        return true;
    }
    if (element instanceof ProxyViewContainer) {
        element.eachChild((child) => {
            result.matches.push(child);
            return true;
        });
    }
    else {
        result.matches.push(element);
    }
    return multi;
}
//# sourceMappingURL=data:application/json;base64,