import { KeyframeAnimation, parseKeyframeDeclarations, animationTimingFunctionConverter } from '@nativescript/core';
const DASH_CASE_REGEXP = /-+([a-z0-9])/g;
export function dashCaseToCamelCase(input) {
    return input.replace(DASH_CASE_REGEXP, (...m) => m[1].toUpperCase());
}
export function createKeyframeAnimation(styles, duration, delay, easing) {
    const info = createKeyframeAnimationInfo(styles, duration, delay, easing);
    return KeyframeAnimation.keyframeAnimationFromInfo(info);
}
const createKeyframeAnimationInfo = (styles, duration, delay, easing) => ({
    isForwards: true,
    duration: duration || 0.01,
    delay,
    curve: getCurve(easing),
    keyframes: styles.map(parseAnimationKeyframe),
});
const ɵ0 = createKeyframeAnimationInfo;
const getCurve = (value) => animationTimingFunctionConverter(value);
const ɵ1 = getCurve;
const parseAnimationKeyframe = (styles) => ({
    duration: getKeyframeDuration(styles),
    declarations: getDeclarations(styles),
});
const ɵ2 = parseAnimationKeyframe;
const getKeyframeDuration = (styles) => styles.offset;
const ɵ3 = getKeyframeDuration;
function getDeclarations(styles) {
    const unparsedDeclarations = Object.keys(styles).map((property) => ({ property, value: styles[property] }));
    return parseKeyframeDeclarations(unparsedDeclarations);
}
export { ɵ0, ɵ1, ɵ2, ɵ3 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9hbmltYXRpb25zL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBNEQseUJBQXlCLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQU85SyxNQUFNLGdCQUFnQixHQUFHLGVBQWUsQ0FBQztBQUN6QyxNQUFNLFVBQVUsbUJBQW1CLENBQUMsS0FBYTtJQUNoRCxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxHQUFHLENBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDN0UsQ0FBQztBQUVELE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxNQUFrQixFQUFFLFFBQWdCLEVBQUUsS0FBYSxFQUFFLE1BQWM7SUFDMUcsTUFBTSxJQUFJLEdBQUcsMkJBQTJCLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDMUUsT0FBTyxpQkFBaUIsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMxRCxDQUFDO0FBRUQsTUFBTSwyQkFBMkIsR0FBRyxDQUFDLE1BQWtCLEVBQUUsUUFBZ0IsRUFBRSxLQUFhLEVBQUUsTUFBYyxFQUF5QixFQUFFLENBQUMsQ0FBQztJQUNwSSxVQUFVLEVBQUUsSUFBSTtJQUNoQixRQUFRLEVBQUUsUUFBUSxJQUFJLElBQUk7SUFDMUIsS0FBSztJQUNMLEtBQUssRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLFNBQVMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDO0NBQzdDLENBQUMsQ0FBQzs7QUFFSCxNQUFNLFFBQVEsR0FBRyxDQUFDLEtBQWEsRUFBRSxFQUFFLENBQUMsZ0NBQWdDLENBQUMsS0FBSyxDQUFDLENBQUM7O0FBRTVFLE1BQU0sc0JBQXNCLEdBQUcsQ0FBQyxNQUFnQixFQUFnQixFQUFFLENBQUMsQ0FBQztJQUNuRSxRQUFRLEVBQUUsbUJBQW1CLENBQUMsTUFBTSxDQUFDO0lBQ3JDLFlBQVksRUFBRSxlQUFlLENBQUMsTUFBTSxDQUFDO0NBQ3JDLENBQUMsQ0FBQzs7QUFFSCxNQUFNLG1CQUFtQixHQUFHLENBQUMsTUFBZ0IsRUFBVSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQzs7QUFFeEUsU0FBUyxlQUFlLENBQUMsTUFBZ0I7SUFDeEMsTUFBTSxvQkFBb0IsR0FBMEIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUVuSSxPQUFPLHlCQUF5QixDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDeEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEtleWZyYW1lQW5pbWF0aW9uLCBLZXlmcmFtZUFuaW1hdGlvbkluZm8sIEtleWZyYW1lRGVjbGFyYXRpb24sIEtleWZyYW1lSW5mbywgcGFyc2VLZXlmcmFtZURlY2xhcmF0aW9ucywgYW5pbWF0aW9uVGltaW5nRnVuY3Rpb25Db252ZXJ0ZXIgfSBmcm9tICdAbmF0aXZlc2NyaXB0L2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEtleWZyYW1lIHtcblx0W2tleTogc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyO1xuXHRvZmZzZXQ6IG51bWJlcjtcbn1cblxuY29uc3QgREFTSF9DQVNFX1JFR0VYUCA9IC8tKyhbYS16MC05XSkvZztcbmV4cG9ydCBmdW5jdGlvbiBkYXNoQ2FzZVRvQ2FtZWxDYXNlKGlucHV0OiBzdHJpbmcpOiBzdHJpbmcge1xuXHRyZXR1cm4gaW5wdXQucmVwbGFjZShEQVNIX0NBU0VfUkVHRVhQLCAoLi4ubTogYW55W10pID0+IG1bMV0udG9VcHBlckNhc2UoKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVLZXlmcmFtZUFuaW1hdGlvbihzdHlsZXM6IEtleWZyYW1lW10sIGR1cmF0aW9uOiBudW1iZXIsIGRlbGF5OiBudW1iZXIsIGVhc2luZzogc3RyaW5nKTogS2V5ZnJhbWVBbmltYXRpb24ge1xuXHRjb25zdCBpbmZvID0gY3JlYXRlS2V5ZnJhbWVBbmltYXRpb25JbmZvKHN0eWxlcywgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcpO1xuXHRyZXR1cm4gS2V5ZnJhbWVBbmltYXRpb24ua2V5ZnJhbWVBbmltYXRpb25Gcm9tSW5mbyhpbmZvKTtcbn1cblxuY29uc3QgY3JlYXRlS2V5ZnJhbWVBbmltYXRpb25JbmZvID0gKHN0eWxlczogS2V5ZnJhbWVbXSwgZHVyYXRpb246IG51bWJlciwgZGVsYXk6IG51bWJlciwgZWFzaW5nOiBzdHJpbmcpOiBLZXlmcmFtZUFuaW1hdGlvbkluZm8gPT4gKHtcblx0aXNGb3J3YXJkczogdHJ1ZSxcblx0ZHVyYXRpb246IGR1cmF0aW9uIHx8IDAuMDEsXG5cdGRlbGF5LFxuXHRjdXJ2ZTogZ2V0Q3VydmUoZWFzaW5nKSxcblx0a2V5ZnJhbWVzOiBzdHlsZXMubWFwKHBhcnNlQW5pbWF0aW9uS2V5ZnJhbWUpLFxufSk7XG5cbmNvbnN0IGdldEN1cnZlID0gKHZhbHVlOiBzdHJpbmcpID0+IGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uQ29udmVydGVyKHZhbHVlKTtcblxuY29uc3QgcGFyc2VBbmltYXRpb25LZXlmcmFtZSA9IChzdHlsZXM6IEtleWZyYW1lKTogS2V5ZnJhbWVJbmZvID0+ICh7XG5cdGR1cmF0aW9uOiBnZXRLZXlmcmFtZUR1cmF0aW9uKHN0eWxlcyksXG5cdGRlY2xhcmF0aW9uczogZ2V0RGVjbGFyYXRpb25zKHN0eWxlcyksXG59KTtcblxuY29uc3QgZ2V0S2V5ZnJhbWVEdXJhdGlvbiA9IChzdHlsZXM6IEtleWZyYW1lKTogbnVtYmVyID0+IHN0eWxlcy5vZmZzZXQ7XG5cbmZ1bmN0aW9uIGdldERlY2xhcmF0aW9ucyhzdHlsZXM6IEtleWZyYW1lKTogS2V5ZnJhbWVEZWNsYXJhdGlvbltdIHtcblx0Y29uc3QgdW5wYXJzZWREZWNsYXJhdGlvbnM6IEtleWZyYW1lRGVjbGFyYXRpb25bXSA9IE9iamVjdC5rZXlzKHN0eWxlcykubWFwKChwcm9wZXJ0eSkgPT4gKHsgcHJvcGVydHksIHZhbHVlOiBzdHlsZXNbcHJvcGVydHldIH0pKTtcblxuXHRyZXR1cm4gcGFyc2VLZXlmcmFtZURlY2xhcmF0aW9ucyh1bnBhcnNlZERlY2xhcmF0aW9ucyk7XG59XG4iXX0=