import { NgModule, Injectable, Inject, NgZone, RendererFactory2, Optional, SkipSelf } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { AnimationBuilder } from '@angular/animations';
import { AnimationDriver, ɵAnimationStyleNormalizer as AnimationStyleNormalizer, ɵWebAnimationsStyleNormalizer as WebAnimationsStyleNormalizer, ɵAnimationEngine as AnimationEngine } from '@angular/animations/browser';
import { ɵAnimationRendererFactory as AnimationRendererFactory, ɵBrowserAnimationBuilder as BrowserAnimationBuilder } from '@angular/platform-browser/animations';
// import { NativeScriptModule } from "../nativescript.module";
import { NativeScriptRendererFactory } from '../renderer-factory';
import { NativeScriptAnimationDriver } from './animation-driver';
import { throwIfAlreadyLoaded } from '../common/utils';
import { NativeScriptCommonModule } from '../common';
export class InjectableAnimationEngine extends AnimationEngine {
    constructor(doc, driver, normalizer) {
        super(doc.body, driver, normalizer);
    }
}
InjectableAnimationEngine.decorators = [
    { type: Injectable }
];
InjectableAnimationEngine.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: AnimationDriver },
    { type: AnimationStyleNormalizer }
];
export function instantiateSupportedAnimationDriver() {
    return new NativeScriptAnimationDriver();
}
export function instantiateRendererFactory(renderer, engine, zone) {
    return new AnimationRendererFactory(renderer, engine, zone);
}
export function instantiateDefaultStyleNormalizer() {
    return new WebAnimationsStyleNormalizer();
}
export class NativeScriptAnimationsModule {
    constructor(parentModule) {
        // Prevents NativeScriptAnimationsModule from getting imported multiple times
        throwIfAlreadyLoaded(parentModule, 'NativeScriptAnimationsModule');
    }
}
NativeScriptAnimationsModule.decorators = [
    { type: NgModule, args: [{
                imports: [NativeScriptCommonModule],
                providers: [
                    {
                        provide: AnimationDriver,
                        useFactory: instantiateSupportedAnimationDriver,
                    },
                    { provide: AnimationBuilder, useClass: BrowserAnimationBuilder },
                    {
                        provide: AnimationStyleNormalizer,
                        useFactory: instantiateDefaultStyleNormalizer,
                    },
                    { provide: AnimationEngine, useClass: InjectableAnimationEngine },
                    {
                        provide: RendererFactory2,
                        useFactory: instantiateRendererFactory,
                        deps: [NativeScriptRendererFactory, AnimationEngine, NgZone],
                    },
                ],
            },] }
];
NativeScriptAnimationsModule.ctorParameters = () => [
    { type: NativeScriptAnimationsModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9ucy5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9hbmltYXRpb25zL2FuaW1hdGlvbnMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFdkQsT0FBTyxFQUFFLGVBQWUsRUFBRSx5QkFBeUIsSUFBSSx3QkFBd0IsRUFBRSw2QkFBNkIsSUFBSSw0QkFBNEIsRUFBRSxnQkFBZ0IsSUFBSSxlQUFlLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUV6TixPQUFPLEVBQUUseUJBQXlCLElBQUksd0JBQXdCLEVBQUUsd0JBQXdCLElBQUksdUJBQXVCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUVsSywrREFBK0Q7QUFDL0QsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbEUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDakUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdkQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBR3JELE1BQU0sT0FBTyx5QkFBMEIsU0FBUSxlQUFlO0lBQzdELFlBQThCLEdBQVEsRUFBRSxNQUF1QixFQUFFLFVBQW9DO1FBQ3BHLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNyQyxDQUFDOzs7WUFKRCxVQUFVOzs7NENBRUcsTUFBTSxTQUFDLFFBQVE7WUFacEIsZUFBZTtZQUErQix3QkFBd0I7O0FBaUIvRSxNQUFNLFVBQVUsbUNBQW1DO0lBQ2xELE9BQU8sSUFBSSwyQkFBMkIsRUFBRSxDQUFDO0FBQzFDLENBQUM7QUFFRCxNQUFNLFVBQVUsMEJBQTBCLENBQUMsUUFBcUMsRUFBRSxNQUF1QixFQUFFLElBQVk7SUFDdEgsT0FBTyxJQUFJLHdCQUF3QixDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDN0QsQ0FBQztBQUVELE1BQU0sVUFBVSxpQ0FBaUM7SUFDaEQsT0FBTyxJQUFJLDRCQUE0QixFQUFFLENBQUM7QUFDM0MsQ0FBQztBQXNCRCxNQUFNLE9BQU8sNEJBQTRCO0lBQ3hDLFlBQW9DLFlBQTBDO1FBQzdFLDZFQUE2RTtRQUM3RSxvQkFBb0IsQ0FBQyxZQUFZLEVBQUUsOEJBQThCLENBQUMsQ0FBQztJQUNwRSxDQUFDOzs7WUF4QkQsUUFBUSxTQUFDO2dCQUNULE9BQU8sRUFBRSxDQUFDLHdCQUF3QixDQUFDO2dCQUNuQyxTQUFTLEVBQUU7b0JBQ1Y7d0JBQ0MsT0FBTyxFQUFFLGVBQWU7d0JBQ3hCLFVBQVUsRUFBRSxtQ0FBbUM7cUJBQy9DO29CQUNELEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSx1QkFBdUIsRUFBRTtvQkFDaEU7d0JBQ0MsT0FBTyxFQUFFLHdCQUF3Qjt3QkFDakMsVUFBVSxFQUFFLGlDQUFpQztxQkFDN0M7b0JBQ0QsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSx5QkFBeUIsRUFBRTtvQkFDakU7d0JBQ0MsT0FBTyxFQUFFLGdCQUFnQjt3QkFDekIsVUFBVSxFQUFFLDBCQUEwQjt3QkFDdEMsSUFBSSxFQUFFLENBQUMsMkJBQTJCLEVBQUUsZUFBZSxFQUFFLE1BQU0sQ0FBQztxQkFDNUQ7aUJBQ0Q7YUFDRDs7O1lBRWtELDRCQUE0Qix1QkFBakUsUUFBUSxZQUFJLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgSW5qZWN0YWJsZSwgSW5qZWN0LCBOZ1pvbmUsIFJlbmRlcmVyRmFjdG9yeTIsIE9wdGlvbmFsLCBTa2lwU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQW5pbWF0aW9uQnVpbGRlciB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuXG5pbXBvcnQgeyBBbmltYXRpb25Ecml2ZXIsIMm1QW5pbWF0aW9uU3R5bGVOb3JtYWxpemVyIGFzIEFuaW1hdGlvblN0eWxlTm9ybWFsaXplciwgybVXZWJBbmltYXRpb25zU3R5bGVOb3JtYWxpemVyIGFzIFdlYkFuaW1hdGlvbnNTdHlsZU5vcm1hbGl6ZXIsIMm1QW5pbWF0aW9uRW5naW5lIGFzIEFuaW1hdGlvbkVuZ2luZSB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMvYnJvd3Nlcic7XG5cbmltcG9ydCB7IMm1QW5pbWF0aW9uUmVuZGVyZXJGYWN0b3J5IGFzIEFuaW1hdGlvblJlbmRlcmVyRmFjdG9yeSwgybVCcm93c2VyQW5pbWF0aW9uQnVpbGRlciBhcyBCcm93c2VyQW5pbWF0aW9uQnVpbGRlciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXIvYW5pbWF0aW9ucyc7XG5cbi8vIGltcG9ydCB7IE5hdGl2ZVNjcmlwdE1vZHVsZSB9IGZyb20gXCIuLi9uYXRpdmVzY3JpcHQubW9kdWxlXCI7XG5pbXBvcnQgeyBOYXRpdmVTY3JpcHRSZW5kZXJlckZhY3RvcnkgfSBmcm9tICcuLi9yZW5kZXJlci1mYWN0b3J5JztcbmltcG9ydCB7IE5hdGl2ZVNjcmlwdEFuaW1hdGlvbkRyaXZlciB9IGZyb20gJy4vYW5pbWF0aW9uLWRyaXZlcic7XG5pbXBvcnQgeyB0aHJvd0lmQWxyZWFkeUxvYWRlZCB9IGZyb20gJy4uL2NvbW1vbi91dGlscyc7XG5pbXBvcnQgeyBOYXRpdmVTY3JpcHRDb21tb25Nb2R1bGUgfSBmcm9tICcuLi9jb21tb24nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSW5qZWN0YWJsZUFuaW1hdGlvbkVuZ2luZSBleHRlbmRzIEFuaW1hdGlvbkVuZ2luZSB7XG5cdGNvbnN0cnVjdG9yKEBJbmplY3QoRE9DVU1FTlQpIGRvYzogYW55LCBkcml2ZXI6IEFuaW1hdGlvbkRyaXZlciwgbm9ybWFsaXplcjogQW5pbWF0aW9uU3R5bGVOb3JtYWxpemVyKSB7XG5cdFx0c3VwZXIoZG9jLmJvZHksIGRyaXZlciwgbm9ybWFsaXplcik7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbnRpYXRlU3VwcG9ydGVkQW5pbWF0aW9uRHJpdmVyKCkge1xuXHRyZXR1cm4gbmV3IE5hdGl2ZVNjcmlwdEFuaW1hdGlvbkRyaXZlcigpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5zdGFudGlhdGVSZW5kZXJlckZhY3RvcnkocmVuZGVyZXI6IE5hdGl2ZVNjcmlwdFJlbmRlcmVyRmFjdG9yeSwgZW5naW5lOiBBbmltYXRpb25FbmdpbmUsIHpvbmU6IE5nWm9uZSkge1xuXHRyZXR1cm4gbmV3IEFuaW1hdGlvblJlbmRlcmVyRmFjdG9yeShyZW5kZXJlciwgZW5naW5lLCB6b25lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbnRpYXRlRGVmYXVsdFN0eWxlTm9ybWFsaXplcigpIHtcblx0cmV0dXJuIG5ldyBXZWJBbmltYXRpb25zU3R5bGVOb3JtYWxpemVyKCk7XG59XG5cbkBOZ01vZHVsZSh7XG5cdGltcG9ydHM6IFtOYXRpdmVTY3JpcHRDb21tb25Nb2R1bGVdLFxuXHRwcm92aWRlcnM6IFtcblx0XHR7XG5cdFx0XHRwcm92aWRlOiBBbmltYXRpb25Ecml2ZXIsXG5cdFx0XHR1c2VGYWN0b3J5OiBpbnN0YW50aWF0ZVN1cHBvcnRlZEFuaW1hdGlvbkRyaXZlcixcblx0XHR9LFxuXHRcdHsgcHJvdmlkZTogQW5pbWF0aW9uQnVpbGRlciwgdXNlQ2xhc3M6IEJyb3dzZXJBbmltYXRpb25CdWlsZGVyIH0sXG5cdFx0e1xuXHRcdFx0cHJvdmlkZTogQW5pbWF0aW9uU3R5bGVOb3JtYWxpemVyLFxuXHRcdFx0dXNlRmFjdG9yeTogaW5zdGFudGlhdGVEZWZhdWx0U3R5bGVOb3JtYWxpemVyLFxuXHRcdH0sXG5cdFx0eyBwcm92aWRlOiBBbmltYXRpb25FbmdpbmUsIHVzZUNsYXNzOiBJbmplY3RhYmxlQW5pbWF0aW9uRW5naW5lIH0sXG5cdFx0e1xuXHRcdFx0cHJvdmlkZTogUmVuZGVyZXJGYWN0b3J5Mixcblx0XHRcdHVzZUZhY3Rvcnk6IGluc3RhbnRpYXRlUmVuZGVyZXJGYWN0b3J5LFxuXHRcdFx0ZGVwczogW05hdGl2ZVNjcmlwdFJlbmRlcmVyRmFjdG9yeSwgQW5pbWF0aW9uRW5naW5lLCBOZ1pvbmVdLFxuXHRcdH0sXG5cdF0sXG59KVxuZXhwb3J0IGNsYXNzIE5hdGl2ZVNjcmlwdEFuaW1hdGlvbnNNb2R1bGUge1xuXHRjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBAU2tpcFNlbGYoKSBwYXJlbnRNb2R1bGU6IE5hdGl2ZVNjcmlwdEFuaW1hdGlvbnNNb2R1bGUpIHtcblx0XHQvLyBQcmV2ZW50cyBOYXRpdmVTY3JpcHRBbmltYXRpb25zTW9kdWxlIGZyb20gZ2V0dGluZyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lc1xuXHRcdHRocm93SWZBbHJlYWR5TG9hZGVkKHBhcmVudE1vZHVsZSwgJ05hdGl2ZVNjcmlwdEFuaW1hdGlvbnNNb2R1bGUnKTtcblx0fVxufVxuIl19