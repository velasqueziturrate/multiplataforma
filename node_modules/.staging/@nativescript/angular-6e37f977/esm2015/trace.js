import { Trace } from '@nativescript/core';
export var NativeScriptDebug;
(function (NativeScriptDebug) {
    NativeScriptDebug.animationsTraceCategory = 'ns-animations';
    NativeScriptDebug.rendererTraceCategory = 'ns-renderer';
    NativeScriptDebug.viewUtilCategory = 'ns-view-util';
    NativeScriptDebug.routerTraceCategory = 'ns-router';
    NativeScriptDebug.routeReuseStrategyTraceCategory = 'ns-route-reuse-strategy';
    NativeScriptDebug.listViewTraceCategory = 'ns-list-view';
    NativeScriptDebug.bootstrapCategory = 'bootstrap';
    // TODO: migrate all usage to this - avoids extraneous method executions
    NativeScriptDebug.enabled = Trace.isEnabled();
    function isLogEnabled() {
        return Trace.isEnabled();
    }
    NativeScriptDebug.isLogEnabled = isLogEnabled;
    function animationsLog(message) {
        Trace.write(message, NativeScriptDebug.animationsTraceCategory);
    }
    NativeScriptDebug.animationsLog = animationsLog;
    function rendererLog(msg) {
        Trace.write(msg, NativeScriptDebug.rendererTraceCategory);
    }
    NativeScriptDebug.rendererLog = rendererLog;
    function rendererError(message) {
        Trace.write(message, NativeScriptDebug.rendererTraceCategory, Trace.messageType.error);
    }
    NativeScriptDebug.rendererError = rendererError;
    function viewUtilLog(msg) {
        Trace.write(msg, NativeScriptDebug.viewUtilCategory);
    }
    NativeScriptDebug.viewUtilLog = viewUtilLog;
    function routerLog(message) {
        Trace.write(message, NativeScriptDebug.routerTraceCategory);
    }
    NativeScriptDebug.routerLog = routerLog;
    function routerError(message) {
        Trace.write(message, NativeScriptDebug.routerTraceCategory, Trace.messageType.error);
    }
    NativeScriptDebug.routerError = routerError;
    function routeReuseStrategyLog(message) {
        Trace.write(message, NativeScriptDebug.routeReuseStrategyTraceCategory);
    }
    NativeScriptDebug.routeReuseStrategyLog = routeReuseStrategyLog;
    function styleError(message) {
        Trace.write(message, Trace.categories.Style, Trace.messageType.error);
    }
    NativeScriptDebug.styleError = styleError;
    function listViewLog(message) {
        Trace.write(message, NativeScriptDebug.listViewTraceCategory);
    }
    NativeScriptDebug.listViewLog = listViewLog;
    function listViewError(message) {
        Trace.write(message, NativeScriptDebug.listViewTraceCategory, Trace.messageType.error);
    }
    NativeScriptDebug.listViewError = listViewError;
    function bootstrapLog(message) {
        Trace.write(message, NativeScriptDebug.bootstrapCategory);
    }
    NativeScriptDebug.bootstrapLog = bootstrapLog;
    function bootstrapLogError(message) {
        Trace.write(message, NativeScriptDebug.bootstrapCategory, Trace.messageType.error);
    }
    NativeScriptDebug.bootstrapLogError = bootstrapLogError;
})(NativeScriptDebug || (NativeScriptDebug = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi90cmFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFM0MsTUFBTSxLQUFXLGlCQUFpQixDQThEakM7QUE5REQsV0FBaUIsaUJBQWlCO0lBQ3BCLHlDQUF1QixHQUFHLGVBQWUsQ0FBQztJQUMxQyx1Q0FBcUIsR0FBRyxhQUFhLENBQUM7SUFDdEMsa0NBQWdCLEdBQUcsY0FBYyxDQUFDO0lBQ2xDLHFDQUFtQixHQUFHLFdBQVcsQ0FBQztJQUNsQyxpREFBK0IsR0FBRyx5QkFBeUIsQ0FBQztJQUM1RCx1Q0FBcUIsR0FBRyxjQUFjLENBQUM7SUFDdkMsbUNBQWlCLEdBQUcsV0FBVyxDQUFDO0lBQzdDLHdFQUF3RTtJQUMzRCx5QkFBTyxHQUFHLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUV6QyxTQUFnQixZQUFZO1FBQzNCLE9BQU8sS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFGZSw4QkFBWSxlQUUzQixDQUFBO0lBRUQsU0FBZ0IsYUFBYSxDQUFDLE9BQWU7UUFDNUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsa0JBQUEsdUJBQXVCLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRmUsK0JBQWEsZ0JBRTVCLENBQUE7SUFFRCxTQUFnQixXQUFXLENBQUMsR0FBRztRQUM5QixLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxrQkFBQSxxQkFBcUIsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFGZSw2QkFBVyxjQUUxQixDQUFBO0lBRUQsU0FBZ0IsYUFBYSxDQUFDLE9BQWU7UUFDNUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsa0JBQUEscUJBQXFCLEVBQUUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRmUsK0JBQWEsZ0JBRTVCLENBQUE7SUFFRCxTQUFnQixXQUFXLENBQUMsR0FBRztRQUM5QixLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxrQkFBQSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFGZSw2QkFBVyxjQUUxQixDQUFBO0lBRUQsU0FBZ0IsU0FBUyxDQUFDLE9BQWU7UUFDeEMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsa0JBQUEsbUJBQW1CLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRmUsMkJBQVMsWUFFeEIsQ0FBQTtJQUVELFNBQWdCLFdBQVcsQ0FBQyxPQUFlO1FBQzFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGtCQUFBLG1CQUFtQixFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUZlLDZCQUFXLGNBRTFCLENBQUE7SUFFRCxTQUFnQixxQkFBcUIsQ0FBQyxPQUFlO1FBQ3BELEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGtCQUFBLCtCQUErQixDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUZlLHVDQUFxQix3QkFFcEMsQ0FBQTtJQUVELFNBQWdCLFVBQVUsQ0FBQyxPQUFlO1FBQ3pDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUZlLDRCQUFVLGFBRXpCLENBQUE7SUFFRCxTQUFnQixXQUFXLENBQUMsT0FBZTtRQUMxQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxrQkFBQSxxQkFBcUIsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFGZSw2QkFBVyxjQUUxQixDQUFBO0lBRUQsU0FBZ0IsYUFBYSxDQUFDLE9BQWU7UUFDNUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsa0JBQUEscUJBQXFCLEVBQUUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRmUsK0JBQWEsZ0JBRTVCLENBQUE7SUFFRCxTQUFnQixZQUFZLENBQUMsT0FBZTtRQUMzQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxrQkFBQSxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFGZSw4QkFBWSxlQUUzQixDQUFBO0lBRUQsU0FBZ0IsaUJBQWlCLENBQUMsT0FBZTtRQUNoRCxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxrQkFBQSxpQkFBaUIsRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFGZSxtQ0FBaUIsb0JBRWhDLENBQUE7QUFDRixDQUFDLEVBOURnQixpQkFBaUIsS0FBakIsaUJBQWlCLFFBOERqQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyYWNlIH0gZnJvbSAnQG5hdGl2ZXNjcmlwdC9jb3JlJztcblxuZXhwb3J0IG5hbWVzcGFjZSBOYXRpdmVTY3JpcHREZWJ1ZyB7XG5cdGV4cG9ydCBjb25zdCBhbmltYXRpb25zVHJhY2VDYXRlZ29yeSA9ICducy1hbmltYXRpb25zJztcblx0ZXhwb3J0IGNvbnN0IHJlbmRlcmVyVHJhY2VDYXRlZ29yeSA9ICducy1yZW5kZXJlcic7XG5cdGV4cG9ydCBjb25zdCB2aWV3VXRpbENhdGVnb3J5ID0gJ25zLXZpZXctdXRpbCc7XG5cdGV4cG9ydCBjb25zdCByb3V0ZXJUcmFjZUNhdGVnb3J5ID0gJ25zLXJvdXRlcic7XG5cdGV4cG9ydCBjb25zdCByb3V0ZVJldXNlU3RyYXRlZ3lUcmFjZUNhdGVnb3J5ID0gJ25zLXJvdXRlLXJldXNlLXN0cmF0ZWd5Jztcblx0ZXhwb3J0IGNvbnN0IGxpc3RWaWV3VHJhY2VDYXRlZ29yeSA9ICducy1saXN0LXZpZXcnO1xuXHRleHBvcnQgY29uc3QgYm9vdHN0cmFwQ2F0ZWdvcnkgPSAnYm9vdHN0cmFwJztcblx0Ly8gVE9ETzogbWlncmF0ZSBhbGwgdXNhZ2UgdG8gdGhpcyAtIGF2b2lkcyBleHRyYW5lb3VzIG1ldGhvZCBleGVjdXRpb25zXG5cdGV4cG9ydCBjb25zdCBlbmFibGVkID0gVHJhY2UuaXNFbmFibGVkKCk7XG5cblx0ZXhwb3J0IGZ1bmN0aW9uIGlzTG9nRW5hYmxlZCgpIHtcblx0XHRyZXR1cm4gVHJhY2UuaXNFbmFibGVkKCk7XG5cdH1cblxuXHRleHBvcnQgZnVuY3Rpb24gYW5pbWF0aW9uc0xvZyhtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcblx0XHRUcmFjZS53cml0ZShtZXNzYWdlLCBhbmltYXRpb25zVHJhY2VDYXRlZ29yeSk7XG5cdH1cblxuXHRleHBvcnQgZnVuY3Rpb24gcmVuZGVyZXJMb2cobXNnKTogdm9pZCB7XG5cdFx0VHJhY2Uud3JpdGUobXNnLCByZW5kZXJlclRyYWNlQ2F0ZWdvcnkpO1xuXHR9XG5cblx0ZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcmVyRXJyb3IobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG5cdFx0VHJhY2Uud3JpdGUobWVzc2FnZSwgcmVuZGVyZXJUcmFjZUNhdGVnb3J5LCBUcmFjZS5tZXNzYWdlVHlwZS5lcnJvcik7XG5cdH1cblxuXHRleHBvcnQgZnVuY3Rpb24gdmlld1V0aWxMb2cobXNnKTogdm9pZCB7XG5cdFx0VHJhY2Uud3JpdGUobXNnLCB2aWV3VXRpbENhdGVnb3J5KTtcblx0fVxuXG5cdGV4cG9ydCBmdW5jdGlvbiByb3V0ZXJMb2cobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG5cdFx0VHJhY2Uud3JpdGUobWVzc2FnZSwgcm91dGVyVHJhY2VDYXRlZ29yeSk7XG5cdH1cblxuXHRleHBvcnQgZnVuY3Rpb24gcm91dGVyRXJyb3IobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG5cdFx0VHJhY2Uud3JpdGUobWVzc2FnZSwgcm91dGVyVHJhY2VDYXRlZ29yeSwgVHJhY2UubWVzc2FnZVR5cGUuZXJyb3IpO1xuXHR9XG5cblx0ZXhwb3J0IGZ1bmN0aW9uIHJvdXRlUmV1c2VTdHJhdGVneUxvZyhtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcblx0XHRUcmFjZS53cml0ZShtZXNzYWdlLCByb3V0ZVJldXNlU3RyYXRlZ3lUcmFjZUNhdGVnb3J5KTtcblx0fVxuXG5cdGV4cG9ydCBmdW5jdGlvbiBzdHlsZUVycm9yKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuXHRcdFRyYWNlLndyaXRlKG1lc3NhZ2UsIFRyYWNlLmNhdGVnb3JpZXMuU3R5bGUsIFRyYWNlLm1lc3NhZ2VUeXBlLmVycm9yKTtcblx0fVxuXG5cdGV4cG9ydCBmdW5jdGlvbiBsaXN0Vmlld0xvZyhtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcblx0XHRUcmFjZS53cml0ZShtZXNzYWdlLCBsaXN0Vmlld1RyYWNlQ2F0ZWdvcnkpO1xuXHR9XG5cblx0ZXhwb3J0IGZ1bmN0aW9uIGxpc3RWaWV3RXJyb3IobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG5cdFx0VHJhY2Uud3JpdGUobWVzc2FnZSwgbGlzdFZpZXdUcmFjZUNhdGVnb3J5LCBUcmFjZS5tZXNzYWdlVHlwZS5lcnJvcik7XG5cdH1cblxuXHRleHBvcnQgZnVuY3Rpb24gYm9vdHN0cmFwTG9nKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuXHRcdFRyYWNlLndyaXRlKG1lc3NhZ2UsIGJvb3RzdHJhcENhdGVnb3J5KTtcblx0fVxuXG5cdGV4cG9ydCBmdW5jdGlvbiBib290c3RyYXBMb2dFcnJvcihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcblx0XHRUcmFjZS53cml0ZShtZXNzYWdlLCBib290c3RyYXBDYXRlZ29yeSwgVHJhY2UubWVzc2FnZVR5cGUuZXJyb3IpO1xuXHR9XG59XG4iXX0=