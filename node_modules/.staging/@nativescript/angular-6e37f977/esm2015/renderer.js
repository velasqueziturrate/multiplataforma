import { __decorate } from "tslib";
import { Injectable, NgZone, Renderer2 } from '@angular/core';
import { View, getViewById, profile } from '@nativescript/core';
import { ViewUtil } from './view-util';
import { NativeScriptDebug } from './trace';
export class NativeScriptRenderer extends Renderer2 {
    constructor(rootView, zone, viewUtil) {
        super();
        this.rootView = rootView;
        this.zone = zone;
        this.viewUtil = viewUtil;
        this.data = Object.create(null);
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog('NativeScriptRenderer created');
        }
    }
    appendChild(parent, newChild) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.appendChild child: ${newChild} parent: ${parent}`);
        }
        this.viewUtil.insertChild(parent, newChild);
    }
    insertBefore(parent, newChild, { previous, next }) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.insertBefore child: ${newChild} ` + `parent: ${parent} previous: ${previous} next: ${next}`);
        }
        this.viewUtil.insertChild(parent, newChild, previous, next);
    }
    removeChild(parent, oldChild) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.removeChild child: ${oldChild} parent: ${parent}`);
        }
        this.viewUtil.removeChild(parent, oldChild);
    }
    selectRootElement(selector) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.selectRootElement: ${selector}`);
        }
        if (selector && selector[0] === '#') {
            const result = getViewById(this.rootView, selector.slice(1));
            return (result || this.rootView);
        }
        return this.rootView;
    }
    parentNode(node) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.parentNode for node: ${node} is ${node.parentNode}`);
        }
        return node.parentNode;
    }
    nextSibling(node) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.nextSibling of ${node} is ${node.nextSibling}`);
        }
        return {
            previous: node,
            next: node.nextSibling,
        };
    }
    createComment(_value) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.createComment ${_value}`);
        }
        return this.viewUtil.createComment();
    }
    createElement(name, _namespace) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.createElement: ${name}`);
        }
        return this.viewUtil.createView(name);
    }
    createText(_value) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.createText ${_value}`);
        }
        return this.viewUtil.createText();
    }
    createViewRoot(hostElement) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.createViewRoot ${hostElement.nodeName}`);
        }
        return hostElement;
    }
    projectNodes(parentElement, nodes) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog('NativeScriptRenderer.projectNodes');
        }
        nodes.forEach((node) => this.viewUtil.insertChild(parentElement, node));
    }
    destroy() {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog('NativeScriptRenderer.destroy');
        }
        // Seems to be called on component dispose only (router outlet)
        // TODO: handle this when we resolve routing and navigation.
    }
    setAttribute(view, name, value, namespace) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.setAttribute ${view} : ${name} = ${value}, namespace: ${namespace}`);
        }
        return this.viewUtil.setProperty(view, name, value, namespace);
    }
    removeAttribute(_el, _name) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.removeAttribute ${_el}: ${_name}`);
        }
    }
    setProperty(view, name, value) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.setProperty ${view} : ${name} = ${value}`);
        }
        return this.viewUtil.setProperty(view, name, value);
    }
    addClass(view, name) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.addClass ${name}`);
        }
        this.viewUtil.addClass(view, name);
    }
    removeClass(view, name) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.removeClass ${name}`);
        }
        this.viewUtil.removeClass(view, name);
    }
    setStyle(view, styleName, value, _flags) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.setStyle: ${styleName} = ${value}`);
        }
        this.viewUtil.setStyle(view, styleName, value);
    }
    removeStyle(view, styleName, _flags) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog('NativeScriptRenderer.removeStyle: ${styleName}');
        }
        this.viewUtil.removeStyle(view, styleName);
    }
    // Used only in debug mode to serialize property changes to comment nodes,
    // such as <template> placeholders.
    setBindingDebugInfo(renderElement, propertyName, propertyValue) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.setBindingDebugInfo: ${renderElement}, ${propertyName} = ${propertyValue}`);
        }
    }
    setElementDebugInfo(renderElement, _info /*RenderDebugInfo*/) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.setElementDebugInfo: ${renderElement}`);
        }
    }
    invokeElementMethod(_renderElement, methodName, args) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.invokeElementMethod ${methodName} ${args}`);
        }
    }
    setValue(_renderNode, _value) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.setValue renderNode: ${_renderNode}, value: ${_value}`);
        }
    }
    listen(renderElement, eventName, callback) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.listen: ${eventName}`);
        }
        // Explicitly wrap in zone
        let zonedCallback = (...args) => {
            this.zone.run(() => {
                callback.apply(undefined, args);
            });
        };
        renderElement.on(eventName, zonedCallback);
        if (eventName === View.loadedEvent && renderElement.isLoaded) {
            const notifyData = { eventName: View.loadedEvent, object: renderElement };
            zonedCallback(notifyData);
        }
        return () => renderElement.off(eventName, zonedCallback);
    }
}
NativeScriptRenderer.decorators = [
    { type: Injectable }
];
NativeScriptRenderer.ctorParameters = () => [
    { type: undefined },
    { type: NgZone },
    { type: ViewUtil }
];
__decorate([
    profile
], NativeScriptRenderer.prototype, "appendChild", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "insertBefore", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "removeChild", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "selectRootElement", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "parentNode", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "nextSibling", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "createComment", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "createElement", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "createText", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "createViewRoot", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "projectNodes", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "destroy", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "setAttribute", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "removeAttribute", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "setProperty", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "addClass", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "removeClass", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "setStyle", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "removeStyle", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "setBindingDebugInfo", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "setElementDebugInfo", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "invokeElementMethod", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "setValue", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "listen", null);
//# sourceMappingURL=data:application/json;base64,