import { ComponentFactoryResolver, Injectable, Injector } from '@angular/core';
import { Frame } from '@nativescript/core';
import { NSLocationStrategy } from '../router/ns-location-strategy';
import { AppHostView, AppHostAsyncView } from '../app-host-view';
import { DetachedLoader } from '../common/detached-loader';
import { PAGE_FACTORY } from '../platform-providers';
import { once } from '../common/utils';
export class ModalDialogParams {
    constructor(context = {}, closeCallback) {
        this.context = context;
        this.closeCallback = closeCallback;
    }
}
export class ModalDialogService {
    constructor(location) {
        this.location = location;
    }
    showModal(type, options) {
        if (!options.viewContainerRef) {
            throw new Error('No viewContainerRef: ' + 'Make sure you pass viewContainerRef in ModalDialogOptions.');
        }
        let parentView = options.viewContainerRef.element.nativeElement;
        if (options.target) {
            parentView = options.target;
        }
        if ((parentView instanceof AppHostView || parentView instanceof AppHostAsyncView) && parentView.ngAppRoot) {
            parentView = parentView.ngAppRoot;
        }
        // _ngDialogRoot is the first child of the previously detached proxy.
        // It should have 'viewController' (iOS) or '_dialogFragment' (Android) available for
        // presenting future modal views.
        if (parentView._ngDialogRoot) {
            parentView = parentView._ngDialogRoot;
        }
        const pageFactory = options.viewContainerRef.injector.get(PAGE_FACTORY);
        // resolve from particular module (moduleRef)
        // or from same module as parentView (viewContainerRef)
        const componentContainer = options.moduleRef || options.viewContainerRef;
        const resolver = componentContainer.injector.get(ComponentFactoryResolver);
        let frame = parentView;
        if (!(parentView instanceof Frame)) {
            frame = (parentView.page && parentView.page.frame) || Frame.topmost();
        }
        this.location._beginModalNavigation(frame);
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                try {
                    this._showDialog(Object.assign(Object.assign({}, options), { containerRef: options.viewContainerRef, context: options.context, doneCallback: resolve, pageFactory,
                        parentView,
                        resolver,
                        type }));
                }
                catch (err) {
                    reject(err);
                }
            }, 10);
        });
    }
    _showDialog(options) {
        let componentView;
        let detachedLoaderRef;
        const closeCallback = once((...args) => {
            options.doneCallback.apply(undefined, args);
            if (componentView) {
                componentView.closeModal();
                this.location._closeModalNavigation();
                detachedLoaderRef.instance.detectChanges();
                detachedLoaderRef.destroy();
            }
        });
        const modalParams = new ModalDialogParams(options.context, closeCallback);
        const childInjector = Injector.create({
            providers: [{ provide: ModalDialogParams, useValue: modalParams }],
            parent: options.containerRef.injector,
        });
        const detachedFactory = options.resolver.resolveComponentFactory(DetachedLoader);
        detachedLoaderRef = options.containerRef.createComponent(detachedFactory, 0, childInjector, null);
        detachedLoaderRef.instance.loadComponent(options.type).then((compRef) => {
            const detachedProxy = compRef.location.nativeElement;
            if (detachedProxy.getChildrenCount() > 1) {
                throw new Error('Modal content has more than one root view.');
            }
            componentView = detachedProxy.getChildAt(0);
            if (componentView.parent) {
                componentView.parent._ngDialogRoot = componentView;
                componentView.parent.removeChild(componentView);
            }
            options.parentView.showModal(componentView, Object.assign(Object.assign({}, options), { closeCallback }));
        });
    }
}
ModalDialogService.decorators = [
    { type: Injectable }
];
ModalDialogService.ctorParameters = () => [
    { type: NSLocationStrategy }
];
//# sourceMappingURL=data:application/json;base64,