import { NgModule, NO_ERRORS_SCHEMA, Optional, SkipSelf } from '@angular/core';
import { RouterModule, RouteReuseStrategy } from '@angular/router';
import { LocationStrategy, PlatformLocation } from '@angular/common';
import { NSRouterLink } from './ns-router-link';
import { NSRouterLinkActive } from './ns-router-link-active';
import { PageRouterOutlet } from './page-router-outlet';
import { NSLocationStrategy } from './ns-location-strategy';
import { NativescriptPlatformLocation } from './ns-platform-location';
import { NSRouteReuseStrategy } from './ns-route-reuse-strategy';
import { RouterExtensions } from './router-extensions';
import { NativeScriptCommonModule } from '../common';
import { FrameService } from '../frame.service';
import { NSEmptyOutletComponent } from './ns-empty-outlet.component';
export { PageRoute } from './page-router-outlet';
export { RouterExtensions } from './router-extensions';
export { NSModuleFactoryLoader } from './ns-module-factory-loader';
export { Outlet, defaultNavOptions } from './ns-location-utils';
export { NSRouterLink } from './ns-router-link';
export { NSRouterLinkActive } from './ns-router-link-active';
export { PageRouterOutlet } from './page-router-outlet';
export { NSLocationStrategy } from './ns-location-strategy';
export { NSEmptyOutletComponent } from './ns-empty-outlet.component';
export function provideLocationStrategy(locationStrategy, frameService) {
    return locationStrategy ? locationStrategy : new NSLocationStrategy(frameService);
}
export class NativeScriptRouterModule {
    static forRoot(routes, config) {
        return {
            ngModule: NativeScriptRouterModule,
            providers: [
                ...RouterModule.forRoot(routes, config).providers,
                {
                    provide: NSLocationStrategy,
                    useFactory: provideLocationStrategy,
                    deps: [[NSLocationStrategy, new Optional(), new SkipSelf()], FrameService],
                },
                { provide: LocationStrategy, useExisting: NSLocationStrategy },
                NativescriptPlatformLocation,
                { provide: PlatformLocation, useExisting: NativescriptPlatformLocation },
                RouterExtensions,
                NSRouteReuseStrategy,
                { provide: RouteReuseStrategy, useExisting: NSRouteReuseStrategy },
            ],
        };
    }
    static forChild(routes) {
        return { ngModule: NativeScriptRouterModule, providers: RouterModule.forChild(routes).providers };
    }
}
NativeScriptRouterModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NSRouterLink, NSRouterLinkActive, PageRouterOutlet, NSEmptyOutletComponent],
                entryComponents: [NSEmptyOutletComponent],
                imports: [RouterModule, NativeScriptCommonModule],
                exports: [RouterModule, NSRouterLink, NSRouterLinkActive, PageRouterOutlet, NSEmptyOutletComponent],
                schemas: [NO_ERRORS_SCHEMA],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3JvdXRlci9yb3V0ZXIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEcsT0FBTyxFQUFFLFlBQVksRUFBd0Isa0JBQWtCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6RixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDakUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3JELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUVyRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDakQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDbkUsT0FBTyxFQUFFLE1BQU0sRUFBb0MsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNsRyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFckUsTUFBTSxVQUFVLHVCQUF1QixDQUFDLGdCQUFvQyxFQUFFLFlBQTBCO0lBQ3ZHLE9BQU8sZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxJQUFJLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ25GLENBQUM7QUFTRCxNQUFNLE9BQU8sd0JBQXdCO0lBQ3BDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBYyxFQUFFLE1BQXFCO1FBQ25ELE9BQU87WUFDTixRQUFRLEVBQUUsd0JBQXdCO1lBQ2xDLFNBQVMsRUFBRTtnQkFDVixHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLFNBQVM7Z0JBQ2pEO29CQUNDLE9BQU8sRUFBRSxrQkFBa0I7b0JBQzNCLFVBQVUsRUFBRSx1QkFBdUI7b0JBQ25DLElBQUksRUFBRSxDQUFDLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxRQUFRLEVBQUUsRUFBRSxJQUFJLFFBQVEsRUFBRSxDQUFDLEVBQUUsWUFBWSxDQUFDO2lCQUMxRTtnQkFDRCxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsa0JBQWtCLEVBQUU7Z0JBQzlELDRCQUE0QjtnQkFDNUIsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLDRCQUE0QixFQUFFO2dCQUN4RSxnQkFBZ0I7Z0JBQ2hCLG9CQUFvQjtnQkFDcEIsRUFBRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsV0FBVyxFQUFFLG9CQUFvQixFQUFFO2FBQ2xFO1NBQ0QsQ0FBQztJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQWM7UUFDN0IsT0FBTyxFQUFFLFFBQVEsRUFBRSx3QkFBd0IsRUFBRSxTQUFTLEVBQUUsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNuRyxDQUFDOzs7WUE5QkQsUUFBUSxTQUFDO2dCQUNULFlBQVksRUFBRSxDQUFDLFlBQVksRUFBRSxrQkFBa0IsRUFBRSxnQkFBZ0IsRUFBRSxzQkFBc0IsQ0FBQztnQkFDMUYsZUFBZSxFQUFFLENBQUMsc0JBQXNCLENBQUM7Z0JBQ3pDLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSx3QkFBd0IsQ0FBQztnQkFDakQsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLFlBQVksRUFBRSxrQkFBa0IsRUFBRSxnQkFBZ0IsRUFBRSxzQkFBc0IsQ0FBQztnQkFDbkcsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7YUFDM0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgTk9fRVJST1JTX1NDSEVNQSwgT3B0aW9uYWwsIFNraXBTZWxmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXJNb2R1bGUsIFJvdXRlcywgRXh0cmFPcHRpb25zLCBSb3V0ZVJldXNlU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgTG9jYXRpb25TdHJhdGVneSwgUGxhdGZvcm1Mb2NhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOU1JvdXRlckxpbmsgfSBmcm9tICcuL25zLXJvdXRlci1saW5rJztcbmltcG9ydCB7IE5TUm91dGVyTGlua0FjdGl2ZSB9IGZyb20gJy4vbnMtcm91dGVyLWxpbmstYWN0aXZlJztcbmltcG9ydCB7IFBhZ2VSb3V0ZXJPdXRsZXQgfSBmcm9tICcuL3BhZ2Utcm91dGVyLW91dGxldCc7XG5pbXBvcnQgeyBOU0xvY2F0aW9uU3RyYXRlZ3kgfSBmcm9tICcuL25zLWxvY2F0aW9uLXN0cmF0ZWd5JztcbmltcG9ydCB7IE5hdGl2ZXNjcmlwdFBsYXRmb3JtTG9jYXRpb24gfSBmcm9tICcuL25zLXBsYXRmb3JtLWxvY2F0aW9uJztcbmltcG9ydCB7IE5TUm91dGVSZXVzZVN0cmF0ZWd5IH0gZnJvbSAnLi9ucy1yb3V0ZS1yZXVzZS1zdHJhdGVneSc7XG5pbXBvcnQgeyBSb3V0ZXJFeHRlbnNpb25zIH0gZnJvbSAnLi9yb3V0ZXItZXh0ZW5zaW9ucyc7XG5pbXBvcnQgeyBOYXRpdmVTY3JpcHRDb21tb25Nb2R1bGUgfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHsgRnJhbWVTZXJ2aWNlIH0gZnJvbSAnLi4vZnJhbWUuc2VydmljZSc7XG5pbXBvcnQgeyBOU0VtcHR5T3V0bGV0Q29tcG9uZW50IH0gZnJvbSAnLi9ucy1lbXB0eS1vdXRsZXQuY29tcG9uZW50JztcblxuZXhwb3J0IHsgUGFnZVJvdXRlIH0gZnJvbSAnLi9wYWdlLXJvdXRlci1vdXRsZXQnO1xuZXhwb3J0IHsgUm91dGVyRXh0ZW5zaW9ucyB9IGZyb20gJy4vcm91dGVyLWV4dGVuc2lvbnMnO1xuZXhwb3J0IHsgTlNNb2R1bGVGYWN0b3J5TG9hZGVyIH0gZnJvbSAnLi9ucy1tb2R1bGUtZmFjdG9yeS1sb2FkZXInO1xuZXhwb3J0IHsgT3V0bGV0LCBOYXZpZ2F0aW9uT3B0aW9ucywgTG9jYXRpb25TdGF0ZSwgZGVmYXVsdE5hdk9wdGlvbnMgfSBmcm9tICcuL25zLWxvY2F0aW9uLXV0aWxzJztcbmV4cG9ydCB7IE5TUm91dGVyTGluayB9IGZyb20gJy4vbnMtcm91dGVyLWxpbmsnO1xuZXhwb3J0IHsgTlNSb3V0ZXJMaW5rQWN0aXZlIH0gZnJvbSAnLi9ucy1yb3V0ZXItbGluay1hY3RpdmUnO1xuZXhwb3J0IHsgUGFnZVJvdXRlck91dGxldCB9IGZyb20gJy4vcGFnZS1yb3V0ZXItb3V0bGV0JztcbmV4cG9ydCB7IE5TTG9jYXRpb25TdHJhdGVneSB9IGZyb20gJy4vbnMtbG9jYXRpb24tc3RyYXRlZ3knO1xuZXhwb3J0IHsgTlNFbXB0eU91dGxldENvbXBvbmVudCB9IGZyb20gJy4vbnMtZW1wdHktb3V0bGV0LmNvbXBvbmVudCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlTG9jYXRpb25TdHJhdGVneShsb2NhdGlvblN0cmF0ZWd5OiBOU0xvY2F0aW9uU3RyYXRlZ3ksIGZyYW1lU2VydmljZTogRnJhbWVTZXJ2aWNlKTogTlNMb2NhdGlvblN0cmF0ZWd5IHtcblx0cmV0dXJuIGxvY2F0aW9uU3RyYXRlZ3kgPyBsb2NhdGlvblN0cmF0ZWd5IDogbmV3IE5TTG9jYXRpb25TdHJhdGVneShmcmFtZVNlcnZpY2UpO1xufVxuXG5ATmdNb2R1bGUoe1xuXHRkZWNsYXJhdGlvbnM6IFtOU1JvdXRlckxpbmssIE5TUm91dGVyTGlua0FjdGl2ZSwgUGFnZVJvdXRlck91dGxldCwgTlNFbXB0eU91dGxldENvbXBvbmVudF0sXG5cdGVudHJ5Q29tcG9uZW50czogW05TRW1wdHlPdXRsZXRDb21wb25lbnRdLFxuXHRpbXBvcnRzOiBbUm91dGVyTW9kdWxlLCBOYXRpdmVTY3JpcHRDb21tb25Nb2R1bGVdLFxuXHRleHBvcnRzOiBbUm91dGVyTW9kdWxlLCBOU1JvdXRlckxpbmssIE5TUm91dGVyTGlua0FjdGl2ZSwgUGFnZVJvdXRlck91dGxldCwgTlNFbXB0eU91dGxldENvbXBvbmVudF0sXG5cdHNjaGVtYXM6IFtOT19FUlJPUlNfU0NIRU1BXSxcbn0pXG5leHBvcnQgY2xhc3MgTmF0aXZlU2NyaXB0Um91dGVyTW9kdWxlIHtcblx0c3RhdGljIGZvclJvb3Qocm91dGVzOiBSb3V0ZXMsIGNvbmZpZz86IEV4dHJhT3B0aW9ucyk6IE1vZHVsZVdpdGhQcm92aWRlcnM8TmF0aXZlU2NyaXB0Um91dGVyTW9kdWxlPiB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdG5nTW9kdWxlOiBOYXRpdmVTY3JpcHRSb3V0ZXJNb2R1bGUsXG5cdFx0XHRwcm92aWRlcnM6IFtcblx0XHRcdFx0Li4uUm91dGVyTW9kdWxlLmZvclJvb3Qocm91dGVzLCBjb25maWcpLnByb3ZpZGVycyxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHByb3ZpZGU6IE5TTG9jYXRpb25TdHJhdGVneSxcblx0XHRcdFx0XHR1c2VGYWN0b3J5OiBwcm92aWRlTG9jYXRpb25TdHJhdGVneSxcblx0XHRcdFx0XHRkZXBzOiBbW05TTG9jYXRpb25TdHJhdGVneSwgbmV3IE9wdGlvbmFsKCksIG5ldyBTa2lwU2VsZigpXSwgRnJhbWVTZXJ2aWNlXSxcblx0XHRcdFx0fSxcblx0XHRcdFx0eyBwcm92aWRlOiBMb2NhdGlvblN0cmF0ZWd5LCB1c2VFeGlzdGluZzogTlNMb2NhdGlvblN0cmF0ZWd5IH0sXG5cdFx0XHRcdE5hdGl2ZXNjcmlwdFBsYXRmb3JtTG9jYXRpb24sXG5cdFx0XHRcdHsgcHJvdmlkZTogUGxhdGZvcm1Mb2NhdGlvbiwgdXNlRXhpc3Rpbmc6IE5hdGl2ZXNjcmlwdFBsYXRmb3JtTG9jYXRpb24gfSxcblx0XHRcdFx0Um91dGVyRXh0ZW5zaW9ucyxcblx0XHRcdFx0TlNSb3V0ZVJldXNlU3RyYXRlZ3ksXG5cdFx0XHRcdHsgcHJvdmlkZTogUm91dGVSZXVzZVN0cmF0ZWd5LCB1c2VFeGlzdGluZzogTlNSb3V0ZVJldXNlU3RyYXRlZ3kgfSxcblx0XHRcdF0sXG5cdFx0fTtcblx0fVxuXG5cdHN0YXRpYyBmb3JDaGlsZChyb3V0ZXM6IFJvdXRlcyk6IE1vZHVsZVdpdGhQcm92aWRlcnM8TmF0aXZlU2NyaXB0Um91dGVyTW9kdWxlPiB7XG5cdFx0cmV0dXJuIHsgbmdNb2R1bGU6IE5hdGl2ZVNjcmlwdFJvdXRlck1vZHVsZSwgcHJvdmlkZXJzOiBSb3V0ZXJNb2R1bGUuZm9yQ2hpbGQocm91dGVzKS5wcm92aWRlcnMgfTtcblx0fVxufVxuIl19