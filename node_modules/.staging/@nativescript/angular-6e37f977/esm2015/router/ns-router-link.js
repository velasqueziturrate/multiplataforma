import { Directive, HostListener, Input } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { NativeScriptDebug } from '../trace';
import { RouterExtensions } from './router-extensions';
/**
 * The nsRouterLink directive lets you link to specific parts of your app.
 *
 * Consider the following route configuration:
 * ```
 * [{ path: "/user", component: UserCmp }]
 * ```
 *
 * When linking to this `User` route, you can write:
 *
 * ```
 * <a [nsRouterLink]="["/user"]">link to user component</a>
 * ```
 *
 * NSRouterLink expects the value to be an array of path segments, followed by the params
 * for that level of routing. For instance `["/team", {teamId: 1}, "user", {userId: 2}]`
 * means that we want to generate a link to `/team;teamId=1/user;userId=2`.
 *
 * The first segment name can be prepended with `/`, `./`, or `../`.
 * If the segment begins with `/`, the router will look up the route from the root of the app.
 * If the segment begins with `./`, or doesn"t begin with a slash, the router will
 * instead look in the current component"s children for the route.
 * And if the segment begins with `../`, the router will go up one level.
 */
export class NSRouterLink {
    constructor(router, navigator, route) {
        this.router = router;
        this.navigator = navigator;
        this.route = route;
        this.pageTransition = true;
        this.commands = [];
    }
    set params(data) {
        if (Array.isArray(data)) {
            this.commands = data;
        }
        else {
            this.commands = [data];
        }
    }
    onTap() {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.routerLog(`nsRouterLink.tapped: ${this.commands} ` + `clear: ${this.clearHistory} ` + `transition: ${JSON.stringify(this.pageTransition)} ` + `duration: ${this.pageTransitionDuration}`);
        }
        const extras = this.getExtras();
        this.navigator.navigateByUrl(this.urlTree, extras);
    }
    getExtras() {
        const transition = this.getTransition();
        return {
            skipLocationChange: attrBoolValue(this.skipLocationChange),
            replaceUrl: attrBoolValue(this.replaceUrl),
            clearHistory: this.convertClearHistory(this.clearHistory),
            animated: transition.animated,
            transition: transition.transition,
        };
    }
    get urlTree() {
        const urlTree = this.router.createUrlTree(this.commands, {
            relativeTo: this.route,
            queryParams: this.queryParams,
            fragment: this.fragment,
            preserveQueryParams: attrBoolValue(this.preserveQueryParams),
            queryParamsHandling: this.queryParamsHandling,
            preserveFragment: attrBoolValue(this.preserveFragment),
        });
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.routerLog(`nsRouterLink urlTree created: ${urlTree}`);
        }
        return urlTree;
    }
    convertClearHistory(value) {
        return value === true || value === 'true';
    }
    getTransition() {
        let transition;
        let animated;
        if (typeof this.pageTransition === 'boolean') {
            animated = this.pageTransition;
        }
        else if (typeof this.pageTransition === 'string') {
            if (this.pageTransition === 'none' || this.pageTransition === 'false') {
                animated = false;
            }
            else {
                animated = true;
                transition = {
                    name: this.pageTransition,
                };
            }
        }
        else {
            animated = true;
            transition = this.pageTransition;
        }
        let duration = +this.pageTransitionDuration;
        if (!isNaN(duration)) {
            transition = transition || {};
            transition.duration = duration;
        }
        return { animated, transition };
    }
}
NSRouterLink.decorators = [
    { type: Directive, args: [{ selector: '[nsRouterLink]' },] }
];
NSRouterLink.ctorParameters = () => [
    { type: Router },
    { type: RouterExtensions },
    { type: ActivatedRoute }
];
NSRouterLink.propDecorators = {
    target: [{ type: Input }],
    queryParams: [{ type: Input }],
    fragment: [{ type: Input }],
    queryParamsHandling: [{ type: Input }],
    preserveQueryParams: [{ type: Input }],
    preserveFragment: [{ type: Input }],
    skipLocationChange: [{ type: Input }],
    replaceUrl: [{ type: Input }],
    clearHistory: [{ type: Input }],
    pageTransition: [{ type: Input }],
    pageTransitionDuration: [{ type: Input }],
    params: [{ type: Input, args: ['nsRouterLink',] }],
    onTap: [{ type: HostListener, args: ['tap',] }]
};
function attrBoolValue(s) {
    return s === '' || !!s;
}
//# sourceMappingURL=data:application/json;base64,