export class Outlet {
    constructor(outletKey, path, pathByOutlets, modalNavigationDepth) {
        // More than one frame available when using NSEmptyOutletComponent component
        // in module that lazy loads children (loadChildren) and has outlet name.
        this.frames = [];
        this.states = [];
        // Used in reuse-strategy by its children to determine if they should be detached too.
        this.shouldDetach = true;
        this.outletKeys = [outletKey];
        this.isPageNavigationBack = false;
        this.showingModal = false;
        this.modalNavigationDepth = modalNavigationDepth || 0;
        this.pathByOutlets = pathByOutlets;
        this.path = path;
    }
    containsFrame(frame) {
        return this.frames.indexOf(frame) > -1;
    }
    peekState() {
        if (this.states.length > 0) {
            return this.states[this.states.length - 1];
        }
        return null;
    }
    containsTopState(stateUrl) {
        const lastState = this.peekState();
        return lastState && lastState.segmentGroup.toString() === stateUrl;
    }
    // Search for frame that can go back.
    // Nested 'primary' outlets could result in Outlet with multiple navigatable frames.
    getFrameToBack() {
        let frame = this.frames[this.frames.length - 1];
        if (!this.isNSEmptyOutlet) {
            for (let index = this.frames.length - 1; index >= 0; index--) {
                const currentFrame = this.frames[index];
                if (currentFrame.canGoBack()) {
                    frame = currentFrame;
                    break;
                }
            }
        }
        return frame;
    }
}
export const defaultNavOptions = {
    clearHistory: false,
    animated: true,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnMtbG9jYXRpb24tdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9yb3V0ZXIvbnMtbG9jYXRpb24tdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE1BQU0sT0FBTyxNQUFNO0lBdUJsQixZQUFZLFNBQWlCLEVBQUUsSUFBWSxFQUFFLGFBQXFCLEVBQUUsb0JBQTZCO1FBYmpHLDRFQUE0RTtRQUM1RSx5RUFBeUU7UUFDekUsV0FBTSxHQUFpQixFQUFFLENBQUM7UUFNMUIsV0FBTSxHQUF5QixFQUFFLENBQUM7UUFHbEMsc0ZBQXNGO1FBQ3RGLGlCQUFZLEdBQVksSUFBSSxDQUFDO1FBRTVCLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsb0JBQW9CLEdBQUcsS0FBSyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQzFCLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxvQkFBb0IsSUFBSSxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbEIsQ0FBQztJQUVELGFBQWEsQ0FBQyxLQUFZO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELFNBQVM7UUFDUixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMzQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDM0M7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxRQUFnQjtRQUNoQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDbkMsT0FBTyxTQUFTLElBQUksU0FBUyxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsS0FBSyxRQUFRLENBQUM7SUFDcEUsQ0FBQztJQUVELHFDQUFxQztJQUNyQyxvRkFBb0Y7SUFDcEYsY0FBYztRQUNiLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFaEQsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDMUIsS0FBSyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsS0FBSyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRTtnQkFDN0QsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDeEMsSUFBSSxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUU7b0JBQzdCLEtBQUssR0FBRyxZQUFZLENBQUM7b0JBQ3JCLE1BQU07aUJBQ047YUFDRDtTQUNEO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO0NBQ0Q7QUFFRCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBc0I7SUFDbkQsWUFBWSxFQUFFLEtBQUs7SUFDbkIsUUFBUSxFQUFFLElBQUk7Q0FDZCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRnJhbWUsIE5hdmlnYXRpb25UcmFuc2l0aW9uIH0gZnJvbSAnQG5hdGl2ZXNjcmlwdC9jb3JlJztcbmltcG9ydCB7IERlZmF1bHRVcmxTZXJpYWxpemVyLCBVcmxTZWdtZW50R3JvdXAsIFVybFRyZWUsIEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9jYXRpb25TdGF0ZSB7XG5cdHF1ZXJ5UGFyYW1zOiBQYXJhbXM7XG5cdHNlZ21lbnRHcm91cDogVXJsU2VnbWVudEdyb3VwO1xuXHRpc1Jvb3RTZWdtZW50R3JvdXA6IGJvb2xlYW47XG5cdGlzUGFnZU5hdmlnYXRpb246IGJvb2xlYW47XG5cdGZyYW1lPzogRnJhbWU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmF2aWdhdGlvbk9wdGlvbnMge1xuXHRjbGVhckhpc3Rvcnk/OiBib29sZWFuO1xuXHRhbmltYXRlZD86IGJvb2xlYW47XG5cdHRyYW5zaXRpb24/OiBOYXZpZ2F0aW9uVHJhbnNpdGlvbjtcbn1cblxuZXhwb3J0IGNsYXNzIE91dGxldCB7XG5cdHNob3dpbmdNb2RhbDogYm9vbGVhbjtcblx0bW9kYWxOYXZpZ2F0aW9uRGVwdGg6IG51bWJlcjtcblx0cGFyZW50OiBPdXRsZXQ7XG5cdGlzUGFnZU5hdmlnYXRpb25CYWNrOiBib29sZWFuO1xuXG5cdC8vIE1vcmUgdGhhbiBvbmUga2V5IGF2YWlsYWJsZSB3aGVuIHVzaW5nIE5TRW1wdHlPdXRsZXRDb21wb25lbnQgY29tcG9uZW50XG5cdC8vIGluIG1vZHVsZSB0aGF0IGxhenkgbG9hZHMgY2hpbGRyZW4gKGxvYWRDaGlsZHJlbikgYW5kIGhhcyBvdXRsZXQgbmFtZS5cblx0b3V0bGV0S2V5czogQXJyYXk8c3RyaW5nPjtcblxuXHQvLyBNb3JlIHRoYW4gb25lIGZyYW1lIGF2YWlsYWJsZSB3aGVuIHVzaW5nIE5TRW1wdHlPdXRsZXRDb21wb25lbnQgY29tcG9uZW50XG5cdC8vIGluIG1vZHVsZSB0aGF0IGxhenkgbG9hZHMgY2hpbGRyZW4gKGxvYWRDaGlsZHJlbikgYW5kIGhhcyBvdXRsZXQgbmFtZS5cblx0ZnJhbWVzOiBBcnJheTxGcmFtZT4gPSBbXTtcblx0Ly8gVGhlIHVybCBwYXRoIHRvIHRoZSBPdXRsZXQuXG5cdC8vIEUuRzogdGhlIHBhdGggdG8gT3V0bGV0MyB0aGF0IGlzIG5lc3RlZCBPdXRsZXQxKGhvbWUpLT5PdXRsZXQyKG5lc3RlZDEpLT5PdXRsZXQzKG5lc3RlZDIpXG5cdC8vIHdpbGwgYmUgJ2hvbWUvbmVzdGVkMSdcblx0cGF0aDogc3RyaW5nO1xuXHRwYXRoQnlPdXRsZXRzOiBzdHJpbmc7XG5cdHN0YXRlczogQXJyYXk8TG9jYXRpb25TdGF0ZT4gPSBbXTtcblx0aXNOU0VtcHR5T3V0bGV0OiBib29sZWFuO1xuXG5cdC8vIFVzZWQgaW4gcmV1c2Utc3RyYXRlZ3kgYnkgaXRzIGNoaWxkcmVuIHRvIGRldGVybWluZSBpZiB0aGV5IHNob3VsZCBiZSBkZXRhY2hlZCB0b28uXG5cdHNob3VsZERldGFjaDogYm9vbGVhbiA9IHRydWU7XG5cdGNvbnN0cnVjdG9yKG91dGxldEtleTogc3RyaW5nLCBwYXRoOiBzdHJpbmcsIHBhdGhCeU91dGxldHM6IHN0cmluZywgbW9kYWxOYXZpZ2F0aW9uRGVwdGg/OiBudW1iZXIpIHtcblx0XHR0aGlzLm91dGxldEtleXMgPSBbb3V0bGV0S2V5XTtcblx0XHR0aGlzLmlzUGFnZU5hdmlnYXRpb25CYWNrID0gZmFsc2U7XG5cdFx0dGhpcy5zaG93aW5nTW9kYWwgPSBmYWxzZTtcblx0XHR0aGlzLm1vZGFsTmF2aWdhdGlvbkRlcHRoID0gbW9kYWxOYXZpZ2F0aW9uRGVwdGggfHwgMDtcblx0XHR0aGlzLnBhdGhCeU91dGxldHMgPSBwYXRoQnlPdXRsZXRzO1xuXHRcdHRoaXMucGF0aCA9IHBhdGg7XG5cdH1cblxuXHRjb250YWluc0ZyYW1lKGZyYW1lOiBGcmFtZSk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLmZyYW1lcy5pbmRleE9mKGZyYW1lKSA+IC0xO1xuXHR9XG5cblx0cGVla1N0YXRlKCk6IExvY2F0aW9uU3RhdGUge1xuXHRcdGlmICh0aGlzLnN0YXRlcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5zdGF0ZXNbdGhpcy5zdGF0ZXMubGVuZ3RoIC0gMV07XG5cdFx0fVxuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Y29udGFpbnNUb3BTdGF0ZShzdGF0ZVVybDogc3RyaW5nKTogYm9vbGVhbiB7XG5cdFx0Y29uc3QgbGFzdFN0YXRlID0gdGhpcy5wZWVrU3RhdGUoKTtcblx0XHRyZXR1cm4gbGFzdFN0YXRlICYmIGxhc3RTdGF0ZS5zZWdtZW50R3JvdXAudG9TdHJpbmcoKSA9PT0gc3RhdGVVcmw7XG5cdH1cblxuXHQvLyBTZWFyY2ggZm9yIGZyYW1lIHRoYXQgY2FuIGdvIGJhY2suXG5cdC8vIE5lc3RlZCAncHJpbWFyeScgb3V0bGV0cyBjb3VsZCByZXN1bHQgaW4gT3V0bGV0IHdpdGggbXVsdGlwbGUgbmF2aWdhdGFibGUgZnJhbWVzLlxuXHRnZXRGcmFtZVRvQmFjaygpOiBGcmFtZSB7XG5cdFx0bGV0IGZyYW1lID0gdGhpcy5mcmFtZXNbdGhpcy5mcmFtZXMubGVuZ3RoIC0gMV07XG5cblx0XHRpZiAoIXRoaXMuaXNOU0VtcHR5T3V0bGV0KSB7XG5cdFx0XHRmb3IgKGxldCBpbmRleCA9IHRoaXMuZnJhbWVzLmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IGluZGV4LS0pIHtcblx0XHRcdFx0Y29uc3QgY3VycmVudEZyYW1lID0gdGhpcy5mcmFtZXNbaW5kZXhdO1xuXHRcdFx0XHRpZiAoY3VycmVudEZyYW1lLmNhbkdvQmFjaygpKSB7XG5cdFx0XHRcdFx0ZnJhbWUgPSBjdXJyZW50RnJhbWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZnJhbWU7XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IGRlZmF1bHROYXZPcHRpb25zOiBOYXZpZ2F0aW9uT3B0aW9ucyA9IHtcblx0Y2xlYXJIaXN0b3J5OiBmYWxzZSxcblx0YW5pbWF0ZWQ6IHRydWUsXG59O1xuIl19