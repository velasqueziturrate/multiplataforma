import { NSLocationStrategy } from './ns-location-strategy';
import { PlatformLocation } from '@angular/common';
import { Injectable } from '@angular/core';
import { NativeScriptDebug } from '../trace';
export class NativescriptPlatformLocation extends PlatformLocation {
    constructor(locationStrategy) {
        super();
        this.locationStrategy = locationStrategy;
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.routerLog('NativescriptPlatformLocation.constructor()');
        }
    }
    getState() {
        return undefined;
    }
    getBaseHrefFromDOM() {
        return '/';
    }
    onPopState(fn) {
        this.locationStrategy.onPopState(fn);
    }
    onHashChange(_fn) { }
    get search() {
        return '';
    }
    get hash() {
        return '';
    }
    get pathname() {
        return this.locationStrategy.path();
    }
    set pathname(_newPath) {
        throw new Error('NativescriptPlatformLocation set pathname - not implemented');
    }
    pushState(state, title, url) {
        this.locationStrategy.pushState(state, title, url, null);
    }
    replaceState(state, title, url) {
        this.locationStrategy.replaceState(state, title, url, null);
    }
    forward() {
        throw new Error('NativescriptPlatformLocation.forward() - not implemented');
    }
    back() {
        this.locationStrategy.back();
    }
}
NativescriptPlatformLocation.decorators = [
    { type: Injectable }
];
NativescriptPlatformLocation.ctorParameters = () => [
    { type: NSLocationStrategy }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnMtcGxhdGZvcm0tbG9jYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9yb3V0ZXIvbnMtcGxhdGZvcm0tbG9jYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGdCQUFnQixFQUEwQixNQUFNLGlCQUFpQixDQUFDO0FBQzNFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRzdDLE1BQU0sT0FBTyw0QkFBNkIsU0FBUSxnQkFBZ0I7SUFDakUsWUFBb0IsZ0JBQW9DO1FBQ3ZELEtBQUssRUFBRSxDQUFDO1FBRFcscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFvQjtRQUV2RCxJQUFJLGlCQUFpQixDQUFDLFlBQVksRUFBRSxFQUFFO1lBQ3JDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO1NBQzFFO0lBQ0YsQ0FBQztJQUVELFFBQVE7UUFDUCxPQUFPLFNBQVMsQ0FBQztJQUNsQixDQUFDO0lBT0Qsa0JBQWtCO1FBQ2pCLE9BQU8sR0FBRyxDQUFDO0lBQ1osQ0FBQztJQUVELFVBQVUsQ0FBQyxFQUEwQjtRQUNwQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxZQUFZLENBQUMsR0FBMkIsSUFBUyxDQUFDO0lBRWxELElBQUksTUFBTTtRQUNULE9BQU8sRUFBRSxDQUFDO0lBQ1gsQ0FBQztJQUNELElBQUksSUFBSTtRQUNQLE9BQU8sRUFBRSxDQUFDO0lBQ1gsQ0FBQztJQUNELElBQUksUUFBUTtRQUNYLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFDRCxJQUFJLFFBQVEsQ0FBQyxRQUFnQjtRQUM1QixNQUFNLElBQUksS0FBSyxDQUFDLDZEQUE2RCxDQUFDLENBQUM7SUFDaEYsQ0FBQztJQUVELFNBQVMsQ0FBQyxLQUFVLEVBQUUsS0FBYSxFQUFFLEdBQVc7UUFDL0MsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsWUFBWSxDQUFDLEtBQVUsRUFBRSxLQUFhLEVBQUUsR0FBVztRQUNsRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFRCxPQUFPO1FBQ04sTUFBTSxJQUFJLEtBQUssQ0FBQywwREFBMEQsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFRCxJQUFJO1FBQ0gsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDO0lBQzlCLENBQUM7OztZQXZERCxVQUFVOzs7WUFMRixrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOU0xvY2F0aW9uU3RyYXRlZ3kgfSBmcm9tICcuL25zLWxvY2F0aW9uLXN0cmF0ZWd5JztcbmltcG9ydCB7IFBsYXRmb3JtTG9jYXRpb24sIExvY2F0aW9uQ2hhbmdlTGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmF0aXZlU2NyaXB0RGVidWcgfSBmcm9tICcuLi90cmFjZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOYXRpdmVzY3JpcHRQbGF0Zm9ybUxvY2F0aW9uIGV4dGVuZHMgUGxhdGZvcm1Mb2NhdGlvbiB7XG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgbG9jYXRpb25TdHJhdGVneTogTlNMb2NhdGlvblN0cmF0ZWd5KSB7XG5cdFx0c3VwZXIoKTtcblx0XHRpZiAoTmF0aXZlU2NyaXB0RGVidWcuaXNMb2dFbmFibGVkKCkpIHtcblx0XHRcdE5hdGl2ZVNjcmlwdERlYnVnLnJvdXRlckxvZygnTmF0aXZlc2NyaXB0UGxhdGZvcm1Mb2NhdGlvbi5jb25zdHJ1Y3RvcigpJyk7XG5cdFx0fVxuXHR9XG5cblx0Z2V0U3RhdGUoKTogYW55IHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0cmVhZG9ubHkgaG9zdG5hbWU6IHN0cmluZztcblx0cmVhZG9ubHkgaHJlZjogc3RyaW5nO1xuXHRyZWFkb25seSBwb3J0OiBzdHJpbmc7XG5cdHJlYWRvbmx5IHByb3RvY29sOiBzdHJpbmc7XG5cblx0Z2V0QmFzZUhyZWZGcm9tRE9NKCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuICcvJztcblx0fVxuXG5cdG9uUG9wU3RhdGUoZm46IExvY2F0aW9uQ2hhbmdlTGlzdGVuZXIpOiB2b2lkIHtcblx0XHR0aGlzLmxvY2F0aW9uU3RyYXRlZ3kub25Qb3BTdGF0ZShmbik7XG5cdH1cblxuXHRvbkhhc2hDaGFuZ2UoX2ZuOiBMb2NhdGlvbkNoYW5nZUxpc3RlbmVyKTogdm9pZCB7fVxuXG5cdGdldCBzZWFyY2goKTogc3RyaW5nIHtcblx0XHRyZXR1cm4gJyc7XG5cdH1cblx0Z2V0IGhhc2goKTogc3RyaW5nIHtcblx0XHRyZXR1cm4gJyc7XG5cdH1cblx0Z2V0IHBhdGhuYW1lKCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIHRoaXMubG9jYXRpb25TdHJhdGVneS5wYXRoKCk7XG5cdH1cblx0c2V0IHBhdGhuYW1lKF9uZXdQYXRoOiBzdHJpbmcpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ05hdGl2ZXNjcmlwdFBsYXRmb3JtTG9jYXRpb24gc2V0IHBhdGhuYW1lIC0gbm90IGltcGxlbWVudGVkJyk7XG5cdH1cblxuXHRwdXNoU3RhdGUoc3RhdGU6IGFueSwgdGl0bGU6IHN0cmluZywgdXJsOiBzdHJpbmcpOiB2b2lkIHtcblx0XHR0aGlzLmxvY2F0aW9uU3RyYXRlZ3kucHVzaFN0YXRlKHN0YXRlLCB0aXRsZSwgdXJsLCBudWxsKTtcblx0fVxuXG5cdHJlcGxhY2VTdGF0ZShzdGF0ZTogYW55LCB0aXRsZTogc3RyaW5nLCB1cmw6IHN0cmluZyk6IHZvaWQge1xuXHRcdHRoaXMubG9jYXRpb25TdHJhdGVneS5yZXBsYWNlU3RhdGUoc3RhdGUsIHRpdGxlLCB1cmwsIG51bGwpO1xuXHR9XG5cblx0Zm9yd2FyZCgpOiB2b2lkIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ05hdGl2ZXNjcmlwdFBsYXRmb3JtTG9jYXRpb24uZm9yd2FyZCgpIC0gbm90IGltcGxlbWVudGVkJyk7XG5cdH1cblxuXHRiYWNrKCk6IHZvaWQge1xuXHRcdHRoaXMubG9jYXRpb25TdHJhdGVneS5iYWNrKCk7XG5cdH1cbn1cbiJdfQ==