import { ViewContainerRef, Component, ComponentFactoryResolver, ChangeDetectorRef } from '@angular/core';
import { Trace } from '@nativescript/core';
/**
 * Wrapper component used for loading components when navigating
 * It uses DetachedContainer as selector so that it is containerRef is not attached to
 * the visual tree.
 */
export class DetachedLoader {
    // tslint:disable-line:component-class-suffix
    constructor(resolver, changeDetector, containerRef) {
        this.resolver = resolver;
        this.changeDetector = changeDetector;
        this.containerRef = containerRef;
    }
    loadInLocation(componentType) {
        const factory = this.resolver.resolveComponentFactory(componentType);
        const componentRef = this.containerRef.createComponent(factory, this.containerRef.length, this.containerRef.injector);
        // Component is created, built may not be checked if we are loading
        // inside component with OnPush CD strategy. Mark us for check to be sure CD will reach us.
        // We are inside a promise here so no need for setTimeout - CD should trigger
        // after the promise.
        Trace.write('DetachedLoader.loadInLocation component loaded -> markForCheck', 'detached-loader');
        return Promise.resolve(componentRef);
    }
    detectChanges() {
        this.changeDetector.markForCheck();
    }
    // TODO: change this API -- async promises not needed here anymore.
    loadComponent(componentType) {
        Trace.write('DetachedLoader.loadComponent', 'detached-loader');
        return this.loadInLocation(componentType);
    }
    loadWithFactory(factory) {
        return this.containerRef.createComponent(factory, this.containerRef.length, this.containerRef.injector, null);
    }
}
DetachedLoader.decorators = [
    { type: Component, args: [{
                selector: 'DetachedContainer',
                template: `<Placeholder #loader></Placeholder>`
            },] }
];
DetachedLoader.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ChangeDetectorRef },
    { type: ViewContainerRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV0YWNoZWQtbG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vY29tbW9uL2RldGFjaGVkLWxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWtDLGdCQUFnQixFQUFFLFNBQVMsRUFBUSx3QkFBd0IsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvSSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFM0M7Ozs7R0FJRztBQUtILE1BQU0sT0FBTyxjQUFjO0lBQzFCLDZDQUE2QztJQUM3QyxZQUFvQixRQUFrQyxFQUFVLGNBQWlDLEVBQVUsWUFBOEI7UUFBckgsYUFBUSxHQUFSLFFBQVEsQ0FBMEI7UUFBVSxtQkFBYyxHQUFkLGNBQWMsQ0FBbUI7UUFBVSxpQkFBWSxHQUFaLFlBQVksQ0FBa0I7SUFBRyxDQUFDO0lBRXJJLGNBQWMsQ0FBQyxhQUF3QjtRQUM5QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3JFLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXRILG1FQUFtRTtRQUNuRSwyRkFBMkY7UUFDM0YsNkVBQTZFO1FBQzdFLHFCQUFxQjtRQUNyQixLQUFLLENBQUMsS0FBSyxDQUFDLGdFQUFnRSxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFFakcsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFTSxhQUFhO1FBQ25CLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUVELG1FQUFtRTtJQUM1RCxhQUFhLENBQUMsYUFBd0I7UUFDNUMsS0FBSyxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQy9ELE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRU0sZUFBZSxDQUFJLE9BQTRCO1FBQ3JELE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9HLENBQUM7OztZQWpDRCxTQUFTLFNBQUM7Z0JBQ1YsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IsUUFBUSxFQUFFLHFDQUFxQzthQUMvQzs7O1lBWDJFLHdCQUF3QjtZQUFFLGlCQUFpQjtZQUE5RSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRSZWYsIENvbXBvbmVudEZhY3RvcnksIFZpZXdDb250YWluZXJSZWYsIENvbXBvbmVudCwgVHlwZSwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJhY2UgfSBmcm9tICdAbmF0aXZlc2NyaXB0L2NvcmUnO1xuXG4vKipcbiAqIFdyYXBwZXIgY29tcG9uZW50IHVzZWQgZm9yIGxvYWRpbmcgY29tcG9uZW50cyB3aGVuIG5hdmlnYXRpbmdcbiAqIEl0IHVzZXMgRGV0YWNoZWRDb250YWluZXIgYXMgc2VsZWN0b3Igc28gdGhhdCBpdCBpcyBjb250YWluZXJSZWYgaXMgbm90IGF0dGFjaGVkIHRvXG4gKiB0aGUgdmlzdWFsIHRyZWUuXG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogJ0RldGFjaGVkQ29udGFpbmVyJyxcblx0dGVtcGxhdGU6IGA8UGxhY2Vob2xkZXIgI2xvYWRlcj48L1BsYWNlaG9sZGVyPmAsXG59KVxuZXhwb3J0IGNsYXNzIERldGFjaGVkTG9hZGVyIHtcblx0Ly8gdHNsaW50OmRpc2FibGUtbGluZTpjb21wb25lbnQtY2xhc3Mtc3VmZml4XG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHByaXZhdGUgY29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmKSB7fVxuXG5cdHByaXZhdGUgbG9hZEluTG9jYXRpb24oY29tcG9uZW50VHlwZTogVHlwZTxhbnk+KTogUHJvbWlzZTxDb21wb25lbnRSZWY8YW55Pj4ge1xuXHRcdGNvbnN0IGZhY3RvcnkgPSB0aGlzLnJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KGNvbXBvbmVudFR5cGUpO1xuXHRcdGNvbnN0IGNvbXBvbmVudFJlZiA9IHRoaXMuY29udGFpbmVyUmVmLmNyZWF0ZUNvbXBvbmVudChmYWN0b3J5LCB0aGlzLmNvbnRhaW5lclJlZi5sZW5ndGgsIHRoaXMuY29udGFpbmVyUmVmLmluamVjdG9yKTtcblxuXHRcdC8vIENvbXBvbmVudCBpcyBjcmVhdGVkLCBidWlsdCBtYXkgbm90IGJlIGNoZWNrZWQgaWYgd2UgYXJlIGxvYWRpbmdcblx0XHQvLyBpbnNpZGUgY29tcG9uZW50IHdpdGggT25QdXNoIENEIHN0cmF0ZWd5LiBNYXJrIHVzIGZvciBjaGVjayB0byBiZSBzdXJlIENEIHdpbGwgcmVhY2ggdXMuXG5cdFx0Ly8gV2UgYXJlIGluc2lkZSBhIHByb21pc2UgaGVyZSBzbyBubyBuZWVkIGZvciBzZXRUaW1lb3V0IC0gQ0Qgc2hvdWxkIHRyaWdnZXJcblx0XHQvLyBhZnRlciB0aGUgcHJvbWlzZS5cblx0XHRUcmFjZS53cml0ZSgnRGV0YWNoZWRMb2FkZXIubG9hZEluTG9jYXRpb24gY29tcG9uZW50IGxvYWRlZCAtPiBtYXJrRm9yQ2hlY2snLCAnZGV0YWNoZWQtbG9hZGVyJyk7XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNvbXBvbmVudFJlZik7XG5cdH1cblxuXHRwdWJsaWMgZGV0ZWN0Q2hhbmdlcygpIHtcblx0XHR0aGlzLmNoYW5nZURldGVjdG9yLm1hcmtGb3JDaGVjaygpO1xuXHR9XG5cblx0Ly8gVE9ETzogY2hhbmdlIHRoaXMgQVBJIC0tIGFzeW5jIHByb21pc2VzIG5vdCBuZWVkZWQgaGVyZSBhbnltb3JlLlxuXHRwdWJsaWMgbG9hZENvbXBvbmVudChjb21wb25lbnRUeXBlOiBUeXBlPGFueT4pOiBQcm9taXNlPENvbXBvbmVudFJlZjxhbnk+PiB7XG5cdFx0VHJhY2Uud3JpdGUoJ0RldGFjaGVkTG9hZGVyLmxvYWRDb21wb25lbnQnLCAnZGV0YWNoZWQtbG9hZGVyJyk7XG5cdFx0cmV0dXJuIHRoaXMubG9hZEluTG9jYXRpb24oY29tcG9uZW50VHlwZSk7XG5cdH1cblxuXHRwdWJsaWMgbG9hZFdpdGhGYWN0b3J5PFQ+KGZhY3Rvcnk6IENvbXBvbmVudEZhY3Rvcnk8VD4pOiBDb21wb25lbnRSZWY8VD4ge1xuXHRcdHJldHVybiB0aGlzLmNvbnRhaW5lclJlZi5jcmVhdGVDb21wb25lbnQoZmFjdG9yeSwgdGhpcy5jb250YWluZXJSZWYubGVuZ3RoLCB0aGlzLmNvbnRhaW5lclJlZi5pbmplY3RvciwgbnVsbCk7XG5cdH1cbn1cbiJdfQ==