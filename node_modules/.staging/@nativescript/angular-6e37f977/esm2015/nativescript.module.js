import { ApplicationModule, ErrorHandler, NO_ERRORS_SCHEMA, NgModule, RendererFactory2, SystemJsNgModuleLoader, Optional, SkipSelf, ɵINJECTOR_SCOPE } from '@angular/core';
import { ViewportScroller, ɵNullViewportScroller as NullViewportScroller } from '@angular/common';
import { NativeScriptCommonModule } from './common';
import { NativeScriptRendererFactory } from './renderer-factory';
import { DetachedLoader } from './common/detached-loader';
import { throwIfAlreadyLoaded } from './common/utils';
import { FrameService } from './frame.service';
export function errorHandlerFactory() {
    return new ErrorHandler();
}
export { DetachedLoader } from './common/detached-loader';
export class NativeScriptModule {
    constructor(parentModule) {
        // Prevents NativeScriptModule from getting imported multiple times
        throwIfAlreadyLoaded(parentModule, 'NativeScriptModule');
    }
}
NativeScriptModule.decorators = [
    { type: NgModule, args: [{
                declarations: [DetachedLoader],
                providers: [FrameService, NativeScriptRendererFactory, SystemJsNgModuleLoader, { provide: ɵINJECTOR_SCOPE, useValue: 'root' }, { provide: ErrorHandler, useFactory: errorHandlerFactory }, { provide: RendererFactory2, useExisting: NativeScriptRendererFactory }, { provide: ViewportScroller, useClass: NullViewportScroller }],
                entryComponents: [DetachedLoader],
                imports: [ApplicationModule, NativeScriptCommonModule],
                exports: [ApplicationModule, NativeScriptCommonModule, DetachedLoader],
                schemas: [NO_ERRORS_SCHEMA],
            },] }
];
NativeScriptModule.ctorParameters = () => [
    { type: NativeScriptModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlc2NyaXB0Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL25hdGl2ZXNjcmlwdC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsc0JBQXNCLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0ssT0FBTyxFQUFFLGdCQUFnQixFQUFFLHFCQUFxQixJQUFJLG9CQUFvQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbEcsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3BELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsTUFBTSxVQUFVLG1CQUFtQjtJQUNsQyxPQUFPLElBQUksWUFBWSxFQUFFLENBQUM7QUFDM0IsQ0FBQztBQUVELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQVUxRCxNQUFNLE9BQU8sa0JBQWtCO0lBQzlCLFlBQW9DLFlBQWdDO1FBQ25FLG1FQUFtRTtRQUNuRSxvQkFBb0IsQ0FBQyxZQUFZLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztJQUMxRCxDQUFDOzs7WUFaRCxRQUFRLFNBQUM7Z0JBQ1QsWUFBWSxFQUFFLENBQUMsY0FBYyxDQUFDO2dCQUM5QixTQUFTLEVBQUUsQ0FBQyxZQUFZLEVBQUUsMkJBQTJCLEVBQUUsc0JBQXNCLEVBQUUsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLG1CQUFtQixFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLDJCQUEyQixFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLG9CQUFvQixFQUFFLENBQUM7Z0JBQ2xVLGVBQWUsRUFBRSxDQUFDLGNBQWMsQ0FBQztnQkFDakMsT0FBTyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsd0JBQXdCLENBQUM7Z0JBQ3RELE9BQU8sRUFBRSxDQUFDLGlCQUFpQixFQUFFLHdCQUF3QixFQUFFLGNBQWMsQ0FBQztnQkFDdEUsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7YUFDM0I7OztZQUVrRCxrQkFBa0IsdUJBQXZELFFBQVEsWUFBSSxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwbGljYXRpb25Nb2R1bGUsIEVycm9ySGFuZGxlciwgTk9fRVJST1JTX1NDSEVNQSwgTmdNb2R1bGUsIFJlbmRlcmVyRmFjdG9yeTIsIFN5c3RlbUpzTmdNb2R1bGVMb2FkZXIsIE9wdGlvbmFsLCBTa2lwU2VsZiwgybVJTkpFQ1RPUl9TQ09QRSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBWaWV3cG9ydFNjcm9sbGVyLCDJtU51bGxWaWV3cG9ydFNjcm9sbGVyIGFzIE51bGxWaWV3cG9ydFNjcm9sbGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgTmF0aXZlU2NyaXB0Q29tbW9uTW9kdWxlIH0gZnJvbSAnLi9jb21tb24nO1xuaW1wb3J0IHsgTmF0aXZlU2NyaXB0UmVuZGVyZXJGYWN0b3J5IH0gZnJvbSAnLi9yZW5kZXJlci1mYWN0b3J5JztcbmltcG9ydCB7IERldGFjaGVkTG9hZGVyIH0gZnJvbSAnLi9jb21tb24vZGV0YWNoZWQtbG9hZGVyJztcbmltcG9ydCB7IHRocm93SWZBbHJlYWR5TG9hZGVkIH0gZnJvbSAnLi9jb21tb24vdXRpbHMnO1xuaW1wb3J0IHsgRnJhbWVTZXJ2aWNlIH0gZnJvbSAnLi9mcmFtZS5zZXJ2aWNlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGVycm9ySGFuZGxlckZhY3RvcnkoKSB7XG5cdHJldHVybiBuZXcgRXJyb3JIYW5kbGVyKCk7XG59XG5cbmV4cG9ydCB7IERldGFjaGVkTG9hZGVyIH0gZnJvbSAnLi9jb21tb24vZGV0YWNoZWQtbG9hZGVyJztcblxuQE5nTW9kdWxlKHtcblx0ZGVjbGFyYXRpb25zOiBbRGV0YWNoZWRMb2FkZXJdLFxuXHRwcm92aWRlcnM6IFtGcmFtZVNlcnZpY2UsIE5hdGl2ZVNjcmlwdFJlbmRlcmVyRmFjdG9yeSwgU3lzdGVtSnNOZ01vZHVsZUxvYWRlciwgeyBwcm92aWRlOiDJtUlOSkVDVE9SX1NDT1BFLCB1c2VWYWx1ZTogJ3Jvb3QnIH0sIHsgcHJvdmlkZTogRXJyb3JIYW5kbGVyLCB1c2VGYWN0b3J5OiBlcnJvckhhbmRsZXJGYWN0b3J5IH0sIHsgcHJvdmlkZTogUmVuZGVyZXJGYWN0b3J5MiwgdXNlRXhpc3Rpbmc6IE5hdGl2ZVNjcmlwdFJlbmRlcmVyRmFjdG9yeSB9LCB7IHByb3ZpZGU6IFZpZXdwb3J0U2Nyb2xsZXIsIHVzZUNsYXNzOiBOdWxsVmlld3BvcnRTY3JvbGxlciB9XSxcblx0ZW50cnlDb21wb25lbnRzOiBbRGV0YWNoZWRMb2FkZXJdLFxuXHRpbXBvcnRzOiBbQXBwbGljYXRpb25Nb2R1bGUsIE5hdGl2ZVNjcmlwdENvbW1vbk1vZHVsZV0sXG5cdGV4cG9ydHM6IFtBcHBsaWNhdGlvbk1vZHVsZSwgTmF0aXZlU2NyaXB0Q29tbW9uTW9kdWxlLCBEZXRhY2hlZExvYWRlcl0sXG5cdHNjaGVtYXM6IFtOT19FUlJPUlNfU0NIRU1BXSxcbn0pXG5leHBvcnQgY2xhc3MgTmF0aXZlU2NyaXB0TW9kdWxlIHtcblx0Y29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQFNraXBTZWxmKCkgcGFyZW50TW9kdWxlOiBOYXRpdmVTY3JpcHRNb2R1bGUpIHtcblx0XHQvLyBQcmV2ZW50cyBOYXRpdmVTY3JpcHRNb2R1bGUgZnJvbSBnZXR0aW5nIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzXG5cdFx0dGhyb3dJZkFscmVhZHlMb2FkZWQocGFyZW50TW9kdWxlLCAnTmF0aXZlU2NyaXB0TW9kdWxlJyk7XG5cdH1cbn1cbiJdfQ==