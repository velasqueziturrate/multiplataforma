import { __decorate } from "tslib";
import { Injectable, NgZone } from '@angular/core';
import { Application, profile } from '@nativescript/core';
import { ViewUtil } from './view-util';
import { NativeScriptRenderer } from './renderer';
// CONTENT_ATTR not exported from NativeScript_renderer - we need it for styles application.
const COMPONENT_REGEX = /%COMP%/g;
const ATTR_SANITIZER = /-/g;
export const COMPONENT_VARIABLE = '%COMP%';
export const HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;
export const CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;
const replaceNgAttribute = function (input, componentId) {
    return input.replace(COMPONENT_REGEX, componentId);
};
const ɵ0 = replaceNgAttribute;
const ɵ1 = function addScopedStyleToCss(style) {
    Application.addCss(style, true);
};
const addScopedStyleToCss = profile(`"renderer".addScopedStyleToCss`, ɵ1);
export class EmulatedRenderer extends NativeScriptRenderer {
    constructor(component, rootView, zone, viewUtil) {
        super(rootView, zone, viewUtil);
        const componentId = component.id.replace(ATTR_SANITIZER, '_');
        this.contentAttr = replaceNgAttribute(CONTENT_ATTR, componentId);
        this.hostAttr = replaceNgAttribute(HOST_ATTR, componentId);
        this.addStyles(component.styles, componentId);
    }
    applyToHost(view) {
        super.setAttribute(view, this.hostAttr, '');
    }
    appendChild(parent, newChild) {
        super.appendChild(parent, newChild);
    }
    createElement(parent, name) {
        const view = super.createElement(parent, name);
        // Set an attribute to the view to scope component-specific css.
        // The property name is pre-generated by Angular.
        super.setAttribute(view, this.contentAttr, '');
        return view;
    }
    addStyles(styles, componentId) {
        styles
            .map((s) => s.toString())
            .map((s) => replaceNgAttribute(s, componentId))
            .forEach(addScopedStyleToCss);
    }
}
EmulatedRenderer.decorators = [
    { type: Injectable }
];
EmulatedRenderer.ctorParameters = () => [
    { type: undefined },
    { type: undefined },
    { type: NgZone },
    { type: ViewUtil }
];
__decorate([
    profile
], EmulatedRenderer.prototype, "addStyles", null);
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZXItZW11bGF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9yZW5kZXJlci1lbXVsYXRlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFVLFVBQVUsRUFBOEIsTUFBTSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUN0RyxPQUFPLEVBQXFCLFdBQVcsRUFBRSxPQUFPLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUU3RSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3ZDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUVsRCw0RkFBNEY7QUFDNUYsTUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDO0FBQ2xDLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQztBQUM1QixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxRQUFRLENBQUM7QUFDM0MsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFdBQVcsa0JBQWtCLEVBQUUsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsY0FBYyxrQkFBa0IsRUFBRSxDQUFDO0FBRS9ELE1BQU0sa0JBQWtCLEdBQUcsVUFBVSxLQUFhLEVBQUUsV0FBbUI7SUFDdEUsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUNwRCxDQUFDLENBQUM7O1dBRW9FLFNBQVMsbUJBQW1CLENBQUMsS0FBYTtJQUMvRyxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNqQyxDQUFDO0FBRkQsTUFBTSxtQkFBbUIsR0FBRyxPQUFPLENBQUMsZ0NBQWdDLEtBRWxFLENBQUM7QUFHSCxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsb0JBQW9CO0lBSXpELFlBQVksU0FBd0IsRUFBRSxRQUFnQixFQUFFLElBQVksRUFBRSxRQUFrQjtRQUN2RixLQUFLLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUVoQyxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLFdBQVcsR0FBRyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLFFBQVEsR0FBRyxrQkFBa0IsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCxXQUFXLENBQUMsSUFBWTtRQUN2QixLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxXQUFXLENBQUMsTUFBVyxFQUFFLFFBQWdCO1FBQ3hDLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxhQUFhLENBQUMsTUFBVyxFQUFFLElBQVk7UUFDdEMsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFL0MsZ0VBQWdFO1FBQ2hFLGlEQUFpRDtRQUNqRCxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRS9DLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUdPLFNBQVMsQ0FBQyxNQUEwQixFQUFFLFdBQW1CO1FBQ2hFLE1BQU07YUFDSixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUN4QixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQzthQUM5QyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7WUF0Q0QsVUFBVTs7Ozs7WUF2QjhDLE1BQU07WUFHdEQsUUFBUTs7QUFxRGhCO0lBREMsT0FBTztpREFNUCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgUmVuZGVyZXJGYWN0b3J5MiwgT3B0aW9uYWwsIE5nWm9uZSwgUmVuZGVyZXJUeXBlMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVmlldywgZ2V0Vmlld0J5SWQsIEFwcGxpY2F0aW9uLCBwcm9maWxlIH0gZnJvbSAnQG5hdGl2ZXNjcmlwdC9jb3JlJztcbmltcG9ydCB7IEFQUF9ST09UX1ZJRVcsIGdldFJvb3RQYWdlIH0gZnJvbSAnLi9wbGF0Zm9ybS1wcm92aWRlcnMnO1xuaW1wb3J0IHsgVmlld1V0aWwgfSBmcm9tICcuL3ZpZXctdXRpbCc7XG5pbXBvcnQgeyBOZ1ZpZXcsIEludmlzaWJsZU5vZGUgfSBmcm9tICcuL2VsZW1lbnQtcmVnaXN0cnknO1xuaW1wb3J0IHsgTmF0aXZlU2NyaXB0RGVidWcgfSBmcm9tICcuL3RyYWNlJztcbmltcG9ydCB7IE5hdGl2ZVNjcmlwdFJlbmRlcmVyIH0gZnJvbSAnLi9yZW5kZXJlcic7XG5cbi8vIENPTlRFTlRfQVRUUiBub3QgZXhwb3J0ZWQgZnJvbSBOYXRpdmVTY3JpcHRfcmVuZGVyZXIgLSB3ZSBuZWVkIGl0IGZvciBzdHlsZXMgYXBwbGljYXRpb24uXG5jb25zdCBDT01QT05FTlRfUkVHRVggPSAvJUNPTVAlL2c7XG5jb25zdCBBVFRSX1NBTklUSVpFUiA9IC8tL2c7XG5leHBvcnQgY29uc3QgQ09NUE9ORU5UX1ZBUklBQkxFID0gJyVDT01QJSc7XG5leHBvcnQgY29uc3QgSE9TVF9BVFRSID0gYF9uZ2hvc3QtJHtDT01QT05FTlRfVkFSSUFCTEV9YDtcbmV4cG9ydCBjb25zdCBDT05URU5UX0FUVFIgPSBgX25nY29udGVudC0ke0NPTVBPTkVOVF9WQVJJQUJMRX1gO1xuXG5jb25zdCByZXBsYWNlTmdBdHRyaWJ1dGUgPSBmdW5jdGlvbiAoaW5wdXQ6IHN0cmluZywgY29tcG9uZW50SWQ6IHN0cmluZyk6IHN0cmluZyB7XG5cdHJldHVybiBpbnB1dC5yZXBsYWNlKENPTVBPTkVOVF9SRUdFWCwgY29tcG9uZW50SWQpO1xufTtcblxuY29uc3QgYWRkU2NvcGVkU3R5bGVUb0NzcyA9IHByb2ZpbGUoYFwicmVuZGVyZXJcIi5hZGRTY29wZWRTdHlsZVRvQ3NzYCwgZnVuY3Rpb24gYWRkU2NvcGVkU3R5bGVUb0NzcyhzdHlsZTogc3RyaW5nKTogdm9pZCB7XG5cdEFwcGxpY2F0aW9uLmFkZENzcyhzdHlsZSwgdHJ1ZSk7XG59KTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEVtdWxhdGVkUmVuZGVyZXIgZXh0ZW5kcyBOYXRpdmVTY3JpcHRSZW5kZXJlciB7XG5cdHByaXZhdGUgY29udGVudEF0dHI6IHN0cmluZztcblx0cHJpdmF0ZSBob3N0QXR0cjogc3RyaW5nO1xuXG5cdGNvbnN0cnVjdG9yKGNvbXBvbmVudDogUmVuZGVyZXJUeXBlMiwgcm9vdFZpZXc6IE5nVmlldywgem9uZTogTmdab25lLCB2aWV3VXRpbDogVmlld1V0aWwpIHtcblx0XHRzdXBlcihyb290Vmlldywgem9uZSwgdmlld1V0aWwpO1xuXG5cdFx0Y29uc3QgY29tcG9uZW50SWQgPSBjb21wb25lbnQuaWQucmVwbGFjZShBVFRSX1NBTklUSVpFUiwgJ18nKTtcblx0XHR0aGlzLmNvbnRlbnRBdHRyID0gcmVwbGFjZU5nQXR0cmlidXRlKENPTlRFTlRfQVRUUiwgY29tcG9uZW50SWQpO1xuXHRcdHRoaXMuaG9zdEF0dHIgPSByZXBsYWNlTmdBdHRyaWJ1dGUoSE9TVF9BVFRSLCBjb21wb25lbnRJZCk7XG5cdFx0dGhpcy5hZGRTdHlsZXMoY29tcG9uZW50LnN0eWxlcywgY29tcG9uZW50SWQpO1xuXHR9XG5cblx0YXBwbHlUb0hvc3QodmlldzogTmdWaWV3KSB7XG5cdFx0c3VwZXIuc2V0QXR0cmlidXRlKHZpZXcsIHRoaXMuaG9zdEF0dHIsICcnKTtcblx0fVxuXG5cdGFwcGVuZENoaWxkKHBhcmVudDogYW55LCBuZXdDaGlsZDogTmdWaWV3KTogdm9pZCB7XG5cdFx0c3VwZXIuYXBwZW5kQ2hpbGQocGFyZW50LCBuZXdDaGlsZCk7XG5cdH1cblxuXHRjcmVhdGVFbGVtZW50KHBhcmVudDogYW55LCBuYW1lOiBzdHJpbmcpOiBOZ1ZpZXcge1xuXHRcdGNvbnN0IHZpZXcgPSBzdXBlci5jcmVhdGVFbGVtZW50KHBhcmVudCwgbmFtZSk7XG5cblx0XHQvLyBTZXQgYW4gYXR0cmlidXRlIHRvIHRoZSB2aWV3IHRvIHNjb3BlIGNvbXBvbmVudC1zcGVjaWZpYyBjc3MuXG5cdFx0Ly8gVGhlIHByb3BlcnR5IG5hbWUgaXMgcHJlLWdlbmVyYXRlZCBieSBBbmd1bGFyLlxuXHRcdHN1cGVyLnNldEF0dHJpYnV0ZSh2aWV3LCB0aGlzLmNvbnRlbnRBdHRyLCAnJyk7XG5cblx0XHRyZXR1cm4gdmlldztcblx0fVxuXG5cdEBwcm9maWxlXG5cdHByaXZhdGUgYWRkU3R5bGVzKHN0eWxlczogKHN0cmluZyB8IGFueVtdKVtdLCBjb21wb25lbnRJZDogc3RyaW5nKSB7XG5cdFx0c3R5bGVzXG5cdFx0XHQubWFwKChzKSA9PiBzLnRvU3RyaW5nKCkpXG5cdFx0XHQubWFwKChzKSA9PiByZXBsYWNlTmdBdHRyaWJ1dGUocywgY29tcG9uZW50SWQpKVxuXHRcdFx0LmZvckVhY2goYWRkU2NvcGVkU3R5bGVUb0Nzcyk7XG5cdH1cbn1cbiJdfQ==