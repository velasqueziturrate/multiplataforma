import { Observable } from 'rxjs';
import { path } from '@nativescript/core';
export function isLocalRequest(url) {
    return url.indexOf('~') === 0 || url.indexOf('/') === 0;
}
export function getAbsolutePath(url, nsFileSystem) {
    url = url.replace('~', '').replace('/', '');
    url = path.join(nsFileSystem.currentApp().path, url);
    return url;
}
export function processLocalFileRequest(url, nsFileSystem, successResponse, errorResponse) {
    url = getAbsolutePath(url, nsFileSystem);
    // request from local app resources
    return new Observable((observer) => {
        if (nsFileSystem.fileExists(url)) {
            const localFile = nsFileSystem.fileFromPath(url);
            localFile.readText().then((data) => {
                try {
                    const json = JSON.parse(data);
                    observer.next(successResponse(url, json, 200));
                    observer.complete();
                }
                catch (error) {
                    // Even though the response status was 2xx, this is still an error.
                    // The parse error contains the text of the body that failed to parse.
                    const errorResult = { error, text: data };
                    observer.error(errorResponse(url, errorResult, 200));
                }
            }, (err) => {
                observer.error(errorResponse(url, err, 400));
            });
        }
        else {
            observer.error(errorResponse(url, 'Not Found', 404));
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2h0dHAtY2xpZW50L2h0dHAtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFVBQVUsRUFBWSxNQUFNLE1BQU0sQ0FBQztBQUM1QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFLMUMsTUFBTSxVQUFVLGNBQWMsQ0FBQyxHQUFXO0lBQ3pDLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekQsQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBQUMsR0FBVyxFQUFFLFlBQTBCO0lBQ3RFLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDckQsT0FBTyxHQUFHLENBQUM7QUFDWixDQUFDO0FBRUQsTUFBTSxVQUFVLHVCQUF1QixDQUFJLEdBQVcsRUFBRSxZQUEwQixFQUFFLGVBQXVDLEVBQUUsYUFBK0I7SUFDM0osR0FBRyxHQUFHLGVBQWUsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFFekMsbUNBQW1DO0lBQ25DLE9BQU8sSUFBSSxVQUFVLENBQUMsQ0FBQyxRQUFxQixFQUFFLEVBQUU7UUFDL0MsSUFBSSxZQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ2pDLE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDakQsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FDeEIsQ0FBQyxJQUFJLEVBQUUsRUFBRTtnQkFDUixJQUFJO29CQUNILE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQzlCLFFBQVEsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDL0MsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO2lCQUNwQjtnQkFBQyxPQUFPLEtBQUssRUFBRTtvQkFDZixtRUFBbUU7b0JBQ25FLHNFQUFzRTtvQkFDdEUsTUFBTSxXQUFXLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDO29CQUMxQyxRQUFRLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7aUJBQ3JEO1lBQ0YsQ0FBQyxFQUNELENBQUMsR0FBVyxFQUFFLEVBQUU7Z0JBQ2YsUUFBUSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzlDLENBQUMsQ0FDRCxDQUFDO1NBQ0Y7YUFBTTtZQUNOLFFBQVEsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNyRDtJQUNGLENBQUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TRmlsZVN5c3RlbSB9IGZyb20gJy4uL2ZpbGUtc3lzdGVtL25zLWZpbGUtc3lzdGVtJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgT2JzZXJ2ZXIgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHBhdGggfSBmcm9tICdAbmF0aXZlc2NyaXB0L2NvcmUnO1xuXG5leHBvcnQgdHlwZSBodHRwUmVzcG9uc2VGYWN0b3J5PFQ+ID0gKHVybDogc3RyaW5nLCBib2R5OiBhbnksIHN0YXR1czogbnVtYmVyKSA9PiBUO1xuZXhwb3J0IHR5cGUgaHR0cEVycm9yRmFjdG9yeSA9ICh1cmw6IHN0cmluZywgYm9keTogYW55LCBzdGF0dXM6IG51bWJlcikgPT4gYW55O1xuXG5leHBvcnQgZnVuY3Rpb24gaXNMb2NhbFJlcXVlc3QodXJsOiBzdHJpbmcpOiBib29sZWFuIHtcblx0cmV0dXJuIHVybC5pbmRleE9mKCd+JykgPT09IDAgfHwgdXJsLmluZGV4T2YoJy8nKSA9PT0gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFic29sdXRlUGF0aCh1cmw6IHN0cmluZywgbnNGaWxlU3lzdGVtOiBOU0ZpbGVTeXN0ZW0pOiBzdHJpbmcge1xuXHR1cmwgPSB1cmwucmVwbGFjZSgnficsICcnKS5yZXBsYWNlKCcvJywgJycpO1xuXHR1cmwgPSBwYXRoLmpvaW4obnNGaWxlU3lzdGVtLmN1cnJlbnRBcHAoKS5wYXRoLCB1cmwpO1xuXHRyZXR1cm4gdXJsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc0xvY2FsRmlsZVJlcXVlc3Q8VD4odXJsOiBzdHJpbmcsIG5zRmlsZVN5c3RlbTogTlNGaWxlU3lzdGVtLCBzdWNjZXNzUmVzcG9uc2U6IGh0dHBSZXNwb25zZUZhY3Rvcnk8VD4sIGVycm9yUmVzcG9uc2U6IGh0dHBFcnJvckZhY3RvcnkpOiBPYnNlcnZhYmxlPFQ+IHtcblx0dXJsID0gZ2V0QWJzb2x1dGVQYXRoKHVybCwgbnNGaWxlU3lzdGVtKTtcblxuXHQvLyByZXF1ZXN0IGZyb20gbG9jYWwgYXBwIHJlc291cmNlc1xuXHRyZXR1cm4gbmV3IE9ic2VydmFibGUoKG9ic2VydmVyOiBPYnNlcnZlcjxUPikgPT4ge1xuXHRcdGlmIChuc0ZpbGVTeXN0ZW0uZmlsZUV4aXN0cyh1cmwpKSB7XG5cdFx0XHRjb25zdCBsb2NhbEZpbGUgPSBuc0ZpbGVTeXN0ZW0uZmlsZUZyb21QYXRoKHVybCk7XG5cdFx0XHRsb2NhbEZpbGUucmVhZFRleHQoKS50aGVuKFxuXHRcdFx0XHQoZGF0YSkgPT4ge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRjb25zdCBqc29uID0gSlNPTi5wYXJzZShkYXRhKTtcblx0XHRcdFx0XHRcdG9ic2VydmVyLm5leHQoc3VjY2Vzc1Jlc3BvbnNlKHVybCwganNvbiwgMjAwKSk7XG5cdFx0XHRcdFx0XHRvYnNlcnZlci5jb21wbGV0ZSgpO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdFx0XHQvLyBFdmVuIHRob3VnaCB0aGUgcmVzcG9uc2Ugc3RhdHVzIHdhcyAyeHgsIHRoaXMgaXMgc3RpbGwgYW4gZXJyb3IuXG5cdFx0XHRcdFx0XHQvLyBUaGUgcGFyc2UgZXJyb3IgY29udGFpbnMgdGhlIHRleHQgb2YgdGhlIGJvZHkgdGhhdCBmYWlsZWQgdG8gcGFyc2UuXG5cdFx0XHRcdFx0XHRjb25zdCBlcnJvclJlc3VsdCA9IHsgZXJyb3IsIHRleHQ6IGRhdGEgfTtcblx0XHRcdFx0XHRcdG9ic2VydmVyLmVycm9yKGVycm9yUmVzcG9uc2UodXJsLCBlcnJvclJlc3VsdCwgMjAwKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHQoZXJyOiBPYmplY3QpID0+IHtcblx0XHRcdFx0XHRvYnNlcnZlci5lcnJvcihlcnJvclJlc3BvbnNlKHVybCwgZXJyLCA0MDApKTtcblx0XHRcdFx0fVxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b2JzZXJ2ZXIuZXJyb3IoZXJyb3JSZXNwb25zZSh1cmwsICdOb3QgRm91bmQnLCA0MDQpKTtcblx0XHR9XG5cdH0pO1xufVxuIl19