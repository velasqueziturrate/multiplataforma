import { Injectable } from '@angular/core';
import { XhrFactory, HttpResponse, HttpErrorResponse, HttpXhrBackend } from '@angular/common/http';
import { NSFileSystem } from '../file-system/ns-file-system';
import { isLocalRequest, processLocalFileRequest } from './http-utils';
export class NsHttpBackEnd extends HttpXhrBackend {
    constructor(xhrFactory, nsFileSystem) {
        super(xhrFactory);
        this.nsFileSystem = nsFileSystem;
    }
    handle(req) {
        let result;
        if (isLocalRequest(req.url)) {
            result = this.handleLocalFileRequest(req.url);
        }
        else {
            result = super.handle(req);
        }
        return result;
    }
    handleLocalFileRequest(url) {
        return processLocalFileRequest(url, this.nsFileSystem, createSuccessResponse, createErrorResponse);
    }
}
NsHttpBackEnd.decorators = [
    { type: Injectable }
];
NsHttpBackEnd.ctorParameters = () => [
    { type: XhrFactory },
    { type: NSFileSystem }
];
function createSuccessResponse(url, body, status) {
    return new HttpResponse({
        url,
        body,
        status,
        statusText: 'OK',
    });
}
function createErrorResponse(url, body, status) {
    return new HttpErrorResponse({
        url,
        error: body,
        status,
        statusText: 'ERROR',
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnMtaHR0cC1iYWNrZW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vaHR0cC1jbGllbnQvbnMtaHR0cC1iYWNrZW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUEwQixVQUFVLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFLGNBQWMsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRzNILE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsY0FBYyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBR3ZFLE1BQU0sT0FBTyxhQUFjLFNBQVEsY0FBYztJQUNoRCxZQUFZLFVBQXNCLEVBQVUsWUFBMEI7UUFDckUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRHlCLGlCQUFZLEdBQVosWUFBWSxDQUFjO0lBRXRFLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBcUI7UUFDM0IsSUFBSSxNQUFrQyxDQUFDO1FBRXZDLElBQUksY0FBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM1QixNQUFNLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUM5QzthQUFNO1lBQ04sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDM0I7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNmLENBQUM7SUFFTyxzQkFBc0IsQ0FBQyxHQUFXO1FBQ3pDLE9BQU8sdUJBQXVCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUscUJBQXFCLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUNwRyxDQUFDOzs7WUFwQkQsVUFBVTs7O1lBTnNCLFVBQVU7WUFHbEMsWUFBWTs7QUEwQnJCLFNBQVMscUJBQXFCLENBQUMsR0FBVyxFQUFFLElBQVMsRUFBRSxNQUFjO0lBQ3BFLE9BQU8sSUFBSSxZQUFZLENBQUM7UUFDdkIsR0FBRztRQUNILElBQUk7UUFDSixNQUFNO1FBQ04sVUFBVSxFQUFFLElBQUk7S0FDaEIsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsbUJBQW1CLENBQUMsR0FBVyxFQUFFLElBQVMsRUFBRSxNQUFjO0lBQ2xFLE9BQU8sSUFBSSxpQkFBaUIsQ0FBQztRQUM1QixHQUFHO1FBQ0gsS0FBSyxFQUFFLElBQUk7UUFDWCxNQUFNO1FBQ04sVUFBVSxFQUFFLE9BQU87S0FDbkIsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBSZXF1ZXN0LCBIdHRwRXZlbnQsIFhockZhY3RvcnksIEh0dHBSZXNwb25zZSwgSHR0cEVycm9yUmVzcG9uc2UsIEh0dHBYaHJCYWNrZW5kIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBOU0ZpbGVTeXN0ZW0gfSBmcm9tICcuLi9maWxlLXN5c3RlbS9ucy1maWxlLXN5c3RlbSc7XG5pbXBvcnQgeyBpc0xvY2FsUmVxdWVzdCwgcHJvY2Vzc0xvY2FsRmlsZVJlcXVlc3QgfSBmcm9tICcuL2h0dHAtdXRpbHMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTnNIdHRwQmFja0VuZCBleHRlbmRzIEh0dHBYaHJCYWNrZW5kIHtcblx0Y29uc3RydWN0b3IoeGhyRmFjdG9yeTogWGhyRmFjdG9yeSwgcHJpdmF0ZSBuc0ZpbGVTeXN0ZW06IE5TRmlsZVN5c3RlbSkge1xuXHRcdHN1cGVyKHhockZhY3RvcnkpO1xuXHR9XG5cblx0aGFuZGxlKHJlcTogSHR0cFJlcXVlc3Q8YW55Pik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcblx0XHRsZXQgcmVzdWx0OiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PjtcblxuXHRcdGlmIChpc0xvY2FsUmVxdWVzdChyZXEudXJsKSkge1xuXHRcdFx0cmVzdWx0ID0gdGhpcy5oYW5kbGVMb2NhbEZpbGVSZXF1ZXN0KHJlcS51cmwpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBzdXBlci5oYW5kbGUocmVxKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0cHJpdmF0ZSBoYW5kbGVMb2NhbEZpbGVSZXF1ZXN0KHVybDogc3RyaW5nKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuXHRcdHJldHVybiBwcm9jZXNzTG9jYWxGaWxlUmVxdWVzdCh1cmwsIHRoaXMubnNGaWxlU3lzdGVtLCBjcmVhdGVTdWNjZXNzUmVzcG9uc2UsIGNyZWF0ZUVycm9yUmVzcG9uc2UpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN1Y2Nlc3NSZXNwb25zZSh1cmw6IHN0cmluZywgYm9keTogYW55LCBzdGF0dXM6IG51bWJlcik6IEh0dHBFdmVudDxhbnk+IHtcblx0cmV0dXJuIG5ldyBIdHRwUmVzcG9uc2Uoe1xuXHRcdHVybCxcblx0XHRib2R5LFxuXHRcdHN0YXR1cyxcblx0XHRzdGF0dXNUZXh0OiAnT0snLFxuXHR9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRXJyb3JSZXNwb25zZSh1cmw6IHN0cmluZywgYm9keTogYW55LCBzdGF0dXM6IG51bWJlcik6IEh0dHBFcnJvclJlc3BvbnNlIHtcblx0cmV0dXJuIG5ldyBIdHRwRXJyb3JSZXNwb25zZSh7XG5cdFx0dXJsLFxuXHRcdGVycm9yOiBib2R5LFxuXHRcdHN0YXR1cyxcblx0XHRzdGF0dXNUZXh0OiAnRVJST1InLFxuXHR9KTtcbn1cbiJdfQ==