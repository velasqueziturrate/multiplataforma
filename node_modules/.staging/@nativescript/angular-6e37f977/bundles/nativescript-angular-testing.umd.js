(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core/testing'), require('@nativescript/angular'), require('@angular/platform-browser-dynamic/testing'), require('@angular/core'), require('@nativescript/core')) :
    typeof define === 'function' && define.amd ? define('@nativescript/angular/testing', ['exports', '@angular/core/testing', '@nativescript/angular', '@angular/platform-browser-dynamic/testing', '@angular/core', '@nativescript/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.nativescript = global.nativescript || {}, global.nativescript.angular = global.nativescript.angular || {}, global.nativescript.angular.testing = {}), global.ng.core.testing, global.nativescript.angular, global.ng.platformBrowserDynamic.testing, global.ng.core, global['ns-core']));
}(this, (function (exports, testing, angular, testing$1, core, core$1) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, exports) {
        for (var p in m)
            if (p !== "default" && !exports.hasOwnProperty(p))
                __createBinding(exports, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var TESTING_ROOT_ID = '__testing_container';
    /**
     * Get a reference to the fixtures container.
     */
    function testingRootView() {
        var rootPageLayout = core$1.Frame.topmost().currentPage.content;
        var testingRoot;
        rootPageLayout.eachChild(function (child) {
            if (child.id === TESTING_ROOT_ID) {
                testingRoot = child;
                return false;
            }
            return true;
        });
        if (!testingRoot) {
            testingRoot = new core$1.GridLayout();
            testingRoot.id = TESTING_ROOT_ID;
            core$1.GridLayout.setColumnSpan(testingRoot, 100);
            core$1.GridLayout.setRowSpan(testingRoot, 100);
            rootPageLayout.addChild(testingRoot);
        }
        return testingRoot;
    }

    /**
     * A NativeScript based implementation of the TestComponentRenderer.
     */
    var NativeScriptTestComponentRenderer = /** @class */ (function (_super) {
        __extends(NativeScriptTestComponentRenderer, _super);
        function NativeScriptTestComponentRenderer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NativeScriptTestComponentRenderer.prototype.insertRootElement = function (rootElId) {
            var layout = new core$1.ProxyViewContainer();
            layout.id = rootElId;
            var rootLayout = testingRootView();
            rootLayout.addChild(layout);
        };
        return NativeScriptTestComponentRenderer;
    }(testing.TestComponentRenderer));
    NativeScriptTestComponentRenderer.decorators = [
        { type: core.Injectable }
    ];

    var ɵ0 = testingRootView;
    /**
     * Providers array is exported for cases where a custom module has to be constructed
     * to test a particular piece of code. This can happen, for example, if you are trying
     * to test dynamic component loading and need to specify an entryComponent for the testing
     * module.
     */
    var NATIVESCRIPT_TESTING_PROVIDERS = [angular.COMMON_PROVIDERS, { provide: angular.APP_ROOT_VIEW, useFactory: ɵ0 }, { provide: testing.TestComponentRenderer, useClass: NativeScriptTestComponentRenderer }];
    /**
     * NativeScript testing support module. Enables use of TestBed for angular components, directives,
     * pipes, and services.
     */
    var NativeScriptTestingModule = /** @class */ (function () {
        function NativeScriptTestingModule() {
        }
        return NativeScriptTestingModule;
    }());
    NativeScriptTestingModule.decorators = [
        { type: core.NgModule, args: [{
                    providers: NATIVESCRIPT_TESTING_PROVIDERS,
                },] }
    ];

    /**
     * Declared test contexts. When the suite is done this map should be empty if all lifecycle
     * calls have happened as expected.
     * @private
     */
    var activeTestFixtures = [];
    /**
     * Return a promise that resolves after (durationMs) milliseconds
     */
    function promiseWait(durationMs) {
        return function () { return new Promise(function (resolve) { return setTimeout(function () { return resolve(); }, durationMs); }); };
    }
    /**
     * Perform basic TestBed environment initialization. Call this once in the main entry point to your tests.
     */
    function nsTestBedInit() {
        testing.TestBed.initTestEnvironment(NativeScriptTestingModule, testing$1.platformBrowserDynamicTesting() // NS_COMPILER_PROVIDERS)
        );
    }
    /**
     * Helper for configuring a TestBed instance for rendering components for test. Ideally this
     * would not be needed, and in truth it's just a wrapper to eliminate some boilerplate. It
     * exists because when you need to specify `entryComponents` for a test the setup becomes quite
     * a bit more complex than if you're just doing a basic component test.
     *
     * More about entryComponents complexity: https://github.com/angular/angular/issues/12079
     *
     * Use:
     * ```
     *   beforeEach(nsTestBedBeforeEach([MyComponent,MyFailComponent]));
     * ```
     *
     * **NOTE*** Remember to pair with {@see nsTestBedAfterEach}
     *
     * @param components Any components that you will create during the test
     * @param providers Any services your tests depend on
     * @param imports Any module imports your tests depend on
     * @param entryComponents Any entry components that your tests depend on
     */
    function nsTestBedBeforeEach(components, providers, imports, entryComponents) {
        if (providers === void 0) { providers = []; }
        if (imports === void 0) { imports = []; }
        if (entryComponents === void 0) { entryComponents = []; }
        return function (done) {
            activeTestFixtures.push([]);
            // If there are no entry components we can take the simple path.
            if (entryComponents.length === 0) {
                testing.TestBed.configureTestingModule({
                    declarations: __spread(components),
                    providers: __spread(providers),
                    imports: __spread([angular.NativeScriptModule], imports),
                });
            }
            else {
                // If there are entry components, we have to reset the testing platform.
                //
                // There's got to be a better way... (o_O)
                // TestBed.resetTestEnvironment();
                // @NgModule({
                //     declarations: entryComponents,
                //     exports: entryComponents,
                //     entryComponents: entryComponents
                // })
                // class EntryComponentsTestModule {
                // }
                // TestBed.initTestEnvironment(
                //     EntryComponentsTestModule,
                //     platformBrowserDynamicTesting(NS_COMPILER_PROVIDERS)
                // );
                // TestBed.configureTestingModule({
                //     declarations: components,
                //     imports: [
                //         NativeScriptModule, NativeScriptTestingModule, CommonModule,
                //         ...imports
                //     ],
                //     providers: [...providers, ...NATIVESCRIPT_TESTING_PROVIDERS],
                // });
            }
            testing.TestBed.compileComponents()
                .then(function () { return done(); })
                .catch(function (e) {
                console.log("Failed to instantiate test component with error: " + e);
                console.log(e.stack);
                done();
            });
        };
    }
    /**
     * Helper for a basic component TestBed clean up.
     * @param resetEnv When true the testing environment will be reset
     * @param resetFn When resetting the environment, use this init function
     */
    function nsTestBedAfterEach(resetEnv, resetFn) {
        if (resetEnv === void 0) { resetEnv = true; }
        if (resetFn === void 0) { resetFn = nsTestBedInit; }
        return function () {
            if (activeTestFixtures.length === 0) {
                throw new Error("There are no more declared fixtures." + "Did you call \"nsTestBedBeforeEach\" and \"nsTestBedAfterEach\" an equal number of times?");
            }
            var root = testingRootView();
            var fixtures = activeTestFixtures.pop();
            fixtures.forEach(function (fixture) {
                var fixtureView = fixture.nativeElement;
                if (fixtureView.parent === root) {
                    root.removeChild(fixtureView);
                }
                fixture.destroy();
            });
            testing.TestBed.resetTestingModule();
            if (resetEnv) {
                testing.TestBed.resetTestEnvironment();
                resetFn();
            }
        };
    }
    /**
     * Render a component using the TestBed helper, and return a promise that resolves when the
     * ComponentFixture is fully initialized.
     */
    function nsTestBedRender(componentType) {
        var fixture = testing.TestBed.createComponent(componentType);
        fixture.detectChanges();
        return (fixture
            .whenRenderingDone()
            // TODO(jd): it seems that the whenStable and whenRenderingDone utilities of ComponentFixture
            //           do not work as expected. I looked at how to fix it and it's not clear how to provide
            //           a {N} specific subclass, because ComponentFixture is newed directly rather than injected
            // What to do about it? Maybe fakeAsync can help? For now just setTimeout for 100ms (x_X)
            .then(promiseWait(100))
            .then(function () {
            var list = activeTestFixtures[activeTestFixtures.length - 1];
            if (!list) {
                console.warn('nsTestBedRender called without nsTestBedBeforeEach/nsTestBedAfter each. ' + "You are responsible for calling 'fixture.destroy()' when your test is done " + 'in order to clean up the components that are created.');
            }
            else {
                list.push(fixture);
            }
            return fixture;
        }));
    }

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NATIVESCRIPT_TESTING_PROVIDERS = NATIVESCRIPT_TESTING_PROVIDERS;
    exports.NativeScriptTestComponentRenderer = NativeScriptTestComponentRenderer;
    exports.NativeScriptTestingModule = NativeScriptTestingModule;
    exports.nsTestBedAfterEach = nsTestBedAfterEach;
    exports.nsTestBedBeforeEach = nsTestBedBeforeEach;
    exports.nsTestBedInit = nsTestBedInit;
    exports.nsTestBedRender = nsTestBedRender;
    exports.promiseWait = promiseWait;
    exports.testingRootView = testingRootView;
    exports.ɵ0 = ɵ0;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=nativescript-angular-testing.umd.js.map
