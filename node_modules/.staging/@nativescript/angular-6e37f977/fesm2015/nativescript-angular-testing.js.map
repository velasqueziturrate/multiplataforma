{"version":3,"file":"nativescript-angular-testing.js","sources":["../../testing/src/test-root-view.ts","../../testing/src/nativescript_test_component_renderer.ts","../../testing/src/nativescript-testing.module.ts","../../testing/src/util.ts","../../testing/src/nativescript-angular-testing.ts"],"sourcesContent":["import { LayoutBase, GridLayout, Frame } from '@nativescript/core';\n\nconst TESTING_ROOT_ID = '__testing_container';\n\n/**\n * Get a reference to the fixtures container.\n */\nexport function testingRootView(): LayoutBase {\n\tconst rootPageLayout = Frame.topmost().currentPage.content as LayoutBase;\n\n\tlet testingRoot: LayoutBase;\n\trootPageLayout.eachChild((child) => {\n\t\tif (child.id === TESTING_ROOT_ID) {\n\t\t\ttestingRoot = child as LayoutBase;\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t});\n\n\tif (!testingRoot) {\n\t\ttestingRoot = new GridLayout();\n\t\ttestingRoot.id = TESTING_ROOT_ID;\n\t\tGridLayout.setColumnSpan(testingRoot, 100);\n\t\tGridLayout.setRowSpan(testingRoot, 100);\n\t\trootPageLayout.addChild(testingRoot);\n\t}\n\n\treturn testingRoot;\n}\n","import { Injectable } from '@angular/core';\nimport { TestComponentRenderer } from '@angular/core/testing';\nimport { ProxyViewContainer } from '@nativescript/core';\nimport { testingRootView } from './test-root-view';\n\n/**\n * A NativeScript based implementation of the TestComponentRenderer.\n */\n@Injectable()\nexport class NativeScriptTestComponentRenderer extends TestComponentRenderer {\n\tinsertRootElement(rootElId: string) {\n\t\tconst layout = new ProxyViewContainer();\n\t\tlayout.id = rootElId;\n\n\t\tconst rootLayout = testingRootView();\n\t\trootLayout.addChild(layout);\n\t}\n}\n","import { NgModule } from '@angular/core';\nimport { TestComponentRenderer } from '@angular/core/testing';\nimport { COMMON_PROVIDERS, APP_ROOT_VIEW } from '@nativescript/angular';\nimport { NativeScriptTestComponentRenderer } from './nativescript_test_component_renderer';\nimport { testingRootView } from './test-root-view';\n\n/**\n * Providers array is exported for cases where a custom module has to be constructed\n * to test a particular piece of code. This can happen, for example, if you are trying\n * to test dynamic component loading and need to specify an entryComponent for the testing\n * module.\n */\nexport const NATIVESCRIPT_TESTING_PROVIDERS: any[] = [COMMON_PROVIDERS, { provide: APP_ROOT_VIEW, useFactory: testingRootView }, { provide: TestComponentRenderer, useClass: NativeScriptTestComponentRenderer }];\n\n/**\n * NativeScript testing support module. Enables use of TestBed for angular components, directives,\n * pipes, and services.\n */\n@NgModule({\n\tproviders: NATIVESCRIPT_TESTING_PROVIDERS,\n})\nexport class NativeScriptTestingModule {}\n","import { View, Frame, LayoutBase, GridLayout } from '@nativescript/core';\nimport { NgModule, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { CommonModule } from '@angular/common';\nimport { NativeScriptModule } from '@nativescript/angular';\nimport { platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';\n// import { NS_COMPILER_PROVIDERS } from \"../../platform\";\nimport { NATIVESCRIPT_TESTING_PROVIDERS, NativeScriptTestingModule } from './nativescript-testing.module';\nimport { testingRootView } from './test-root-view';\n\n/**\n * Declared test contexts. When the suite is done this map should be empty if all lifecycle\n * calls have happened as expected.\n * @private\n */\nconst activeTestFixtures: ComponentFixture<any>[][] = [];\n\n/**\n * Return a promise that resolves after (durationMs) milliseconds\n */\nexport function promiseWait(durationMs: number) {\n\treturn () => new Promise((resolve) => setTimeout(() => resolve(), durationMs));\n}\n\n/**\n * Perform basic TestBed environment initialization. Call this once in the main entry point to your tests.\n */\nexport function nsTestBedInit() {\n\tTestBed.initTestEnvironment(\n\t\tNativeScriptTestingModule,\n\t\tplatformBrowserDynamicTesting() // NS_COMPILER_PROVIDERS)\n\t);\n}\n\n/**\n * Helper for configuring a TestBed instance for rendering components for test. Ideally this\n * would not be needed, and in truth it's just a wrapper to eliminate some boilerplate. It\n * exists because when you need to specify `entryComponents` for a test the setup becomes quite\n * a bit more complex than if you're just doing a basic component test.\n *\n * More about entryComponents complexity: https://github.com/angular/angular/issues/12079\n *\n * Use:\n * ```\n *   beforeEach(nsTestBedBeforeEach([MyComponent,MyFailComponent]));\n * ```\n *\n * **NOTE*** Remember to pair with {@see nsTestBedAfterEach}\n *\n * @param components Any components that you will create during the test\n * @param providers Any services your tests depend on\n * @param imports Any module imports your tests depend on\n * @param entryComponents Any entry components that your tests depend on\n */\nexport function nsTestBedBeforeEach(components: any[], providers: any[] = [], imports: any[] = [], entryComponents: any[] = []) {\n\treturn (done) => {\n\t\tactiveTestFixtures.push([]);\n\t\t// If there are no entry components we can take the simple path.\n\t\tif (entryComponents.length === 0) {\n\t\t\tTestBed.configureTestingModule({\n\t\t\t\tdeclarations: [...components],\n\t\t\t\tproviders: [...providers],\n\t\t\t\timports: [NativeScriptModule, ...imports],\n\t\t\t});\n\t\t} else {\n\t\t\t// If there are entry components, we have to reset the testing platform.\n\t\t\t//\n\t\t\t// There's got to be a better way... (o_O)\n\t\t\t// TestBed.resetTestEnvironment();\n\t\t\t// @NgModule({\n\t\t\t//     declarations: entryComponents,\n\t\t\t//     exports: entryComponents,\n\t\t\t//     entryComponents: entryComponents\n\t\t\t// })\n\t\t\t// class EntryComponentsTestModule {\n\t\t\t// }\n\t\t\t// TestBed.initTestEnvironment(\n\t\t\t//     EntryComponentsTestModule,\n\t\t\t//     platformBrowserDynamicTesting(NS_COMPILER_PROVIDERS)\n\t\t\t// );\n\t\t\t// TestBed.configureTestingModule({\n\t\t\t//     declarations: components,\n\t\t\t//     imports: [\n\t\t\t//         NativeScriptModule, NativeScriptTestingModule, CommonModule,\n\t\t\t//         ...imports\n\t\t\t//     ],\n\t\t\t//     providers: [...providers, ...NATIVESCRIPT_TESTING_PROVIDERS],\n\t\t\t// });\n\t\t}\n\t\tTestBed.compileComponents()\n\t\t\t.then(() => done())\n\t\t\t.catch((e) => {\n\t\t\t\tconsole.log(`Failed to instantiate test component with error: ${e}`);\n\t\t\t\tconsole.log(e.stack);\n\t\t\t\tdone();\n\t\t\t});\n\t};\n}\n\n/**\n * Helper for a basic component TestBed clean up.\n * @param resetEnv When true the testing environment will be reset\n * @param resetFn When resetting the environment, use this init function\n */\nexport function nsTestBedAfterEach(resetEnv = true, resetFn = nsTestBedInit) {\n\treturn () => {\n\t\tif (activeTestFixtures.length === 0) {\n\t\t\tthrow new Error(`There are no more declared fixtures.` + `Did you call \"nsTestBedBeforeEach\" and \"nsTestBedAfterEach\" an equal number of times?`);\n\t\t}\n\t\tconst root = testingRootView() as LayoutBase;\n\t\tconst fixtures = activeTestFixtures.pop();\n\t\tfixtures.forEach((fixture) => {\n\t\t\tconst fixtureView = <View>fixture.nativeElement;\n\t\t\tif (fixtureView.parent === root) {\n\t\t\t\troot.removeChild(fixtureView);\n\t\t\t}\n\t\t\tfixture.destroy();\n\t\t});\n\t\tTestBed.resetTestingModule();\n\t\tif (resetEnv) {\n\t\t\tTestBed.resetTestEnvironment();\n\t\t\tresetFn();\n\t\t}\n\t};\n}\n\n/**\n * Render a component using the TestBed helper, and return a promise that resolves when the\n * ComponentFixture is fully initialized.\n */\nexport function nsTestBedRender<T>(componentType: Type<T>): Promise<ComponentFixture<T>> {\n\tconst fixture = TestBed.createComponent(componentType);\n\tfixture.detectChanges();\n\treturn (\n\t\tfixture\n\t\t\t.whenRenderingDone()\n\t\t\t// TODO(jd): it seems that the whenStable and whenRenderingDone utilities of ComponentFixture\n\t\t\t//           do not work as expected. I looked at how to fix it and it's not clear how to provide\n\t\t\t//           a {N} specific subclass, because ComponentFixture is newed directly rather than injected\n\t\t\t// What to do about it? Maybe fakeAsync can help? For now just setTimeout for 100ms (x_X)\n\t\t\t.then(promiseWait(100))\n\t\t\t.then(() => {\n\t\t\t\tconst list = activeTestFixtures[activeTestFixtures.length - 1];\n\t\t\t\tif (!list) {\n\t\t\t\t\tconsole.warn('nsTestBedRender called without nsTestBedBeforeEach/nsTestBedAfter each. ' + \"You are responsible for calling 'fixture.destroy()' when your test is done \" + 'in order to clean up the components that are created.');\n\t\t\t\t} else {\n\t\t\t\t\tlist.push(fixture);\n\t\t\t\t}\n\t\t\t\treturn fixture;\n\t\t\t})\n\t);\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}